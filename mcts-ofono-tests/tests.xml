<?xml version="1.0" encoding="UTF-8"?>
<testdefinition version="1.0">
<description></description>
<suite name="oFono" description="&lt;p&gt;1, you can use real network for those cases which had&amp;nbsp; information (in real network)in description.&lt;/p&gt;
&lt;p&gt;2, For most case we have to use simulator to test UI&lt;/p&gt;
&lt;p&gt;3, Phonesim is for developer but will be good help for debugging&lt;/p&gt;
&lt;p&gt;4, you have to use script to connect your modem or simulator: ./test-modem power, test-modem online&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp; also you need modify the configration file /etc/ofono/modem.conf as following:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp; [phonesim]&lt;br /&gt;
&amp;nbsp;&amp;nbsp; Driver=phonesim&lt;br /&gt;
&amp;nbsp;&amp;nbsp; Address=127.0.0.1&lt;br /&gt;
&amp;nbsp;&amp;nbsp; Port=12345&lt;br /&gt;
&amp;nbsp;5, if you use modem you need modify the configration file like above&lt;/p&gt;
&lt;p&gt;6, you should start ofonod first : ofonod -n -d '*'&lt;/p&gt;
&lt;p&gt;7, you power on you modem :&amp;nbsp; ./test-modem poweron, test-modem online&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
">
<set name="simple_call" description=" 
">

<case name="oFn_SimpCall_SendDtmf" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
send dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it <br />
[root@xx]# ./test-simple-call answer<br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9])<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_send_dtmf.sh</step>
</case>

<case name="oFn_SimpCall_SendMultiDtmf" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
send multi dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it<br />
[root@xx]# ./test-simple-call answer <br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9,*,#,A,B,C,D]<br />
3. repeat step2 for 3 times<br />
4,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send multi dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_send_multi-dtmf.sh</step>
</case>

<case name="oFn_SimpCall_hold_hungupCall" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
hangup the held call<br />
Run Instructions:<br />
1, setup an outgoing call<br />
[root@xx]# ./test-simplecall dial [number]<br />
2, hold this call<br />
[root@xx]# ./test-simplecall hold<br />
3, hangup this call [root@xx]# ./test-simple-voicecall hangup<br />
Pass/Fail Criteria:<br />
1, user can terminate he held call.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_hungup_hold.sh</step>
</case>

<case name="oFn_SimpCall_hungup_byRemote" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
hangup an incoming call by remote side<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote party and accept it <br />
[root@xx]# ./test-simple-call dial 199<br />
2, hangup this call by phonesim automatically<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1.&nbsp;The call can be hung up&nbsp;by remote<br />
2, in phonesim, this call will be terminated automatically</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_hungup_inc_mo.sh</step>
</case>

<case name="oFn_SimpCall_SendSmsDuringCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
send sms during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it [root@xx]# ./test-simple-call answer <br />
2, send a sms<br />
[root@xx]# ./test-sms send [number] [content])<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send sms during the call<br />
3. this call is in active status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_SimpCall_RecvSmsDuringCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive sms during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it <br />
[root@xx]# ./test-simple-call answer<br />
2, send a sms from remote side<br />
3, receive this message during this call <br />
[root@xx]# ./test-receive-sms<br />
4,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can receive sms during the call<br />
3. this call is in active status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_SimpCall_hungup" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
hang up an outgoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hangup this ongoing call<br />
[root@xx]# ./test-simple-voicecall hangupall<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an outgoing call<br />
2. user can hangup the call<br />
3. no call is in active status</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_hungup.sh</step>
</case>

<case name="oFn_SimpCall_retrieve" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
retrieve an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hold this outgoing call<br />
[root@xx]# ./test-simple-call hold<br />
3, retrieve this call<br />
[root@xx]# ./test-simple-call retrieve<br />
4, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can retrive the call<br />
2. The ongoing call is in active status after step3</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_retrieve.sh</step>
</case>

<case name="oFn_SimpCall_hold" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
hold an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, Hold this call<br />
[root@xx]# ./test-simple-call hold<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can hold the call<br />
2. the ongoing call is in held status after step2</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_hold.sh</step>
</case>

<case name="oFn_SimpCall_reject" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
reject an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
2, reject this incoming call<br />
[root@xx]# ./test-simple-call hangup<br />
Pass/Fail Criteria:<br />
1,The incoming can be rejected</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_reject_inc.sh</step>
</case>

<case name="oFn_SimpleCall_hfp_MO_3imes" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
make a outgoing call for 3times in hfp<br />
Run Instructions:<br />
1. setup an outgoing call <br />
2.hangup this call<br />
3. repeat 3 times<br />
Pass/Fail Criteria:<br />
each call should work normally</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_SimpCall_accept" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
accept an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
[root@xx]# ./test-simple-voicecall dial 199<br />
2, accept this incoming call<br />
[root@xx]# ./test-simple-call answer<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call <br />
2. this incoming call is in active status after step2</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_accept_inc.sh</step>
</case>

<case name="oFn_SimpCall_setup" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
make an outgoing call<br />
Run Instructions:<br />
<br />
1, make an outgoing call and accept it from remote side<br />
./test-simple-call dial [number]<br />
Pass/Fail Criteria:<br />
1. user can setup outgoing call successfully<br />
note: in real network, user can listen the ring tone at peer side. While with phonesim, user will see AT command e.g. AT+CLCC,</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_outgoing.sh</step>
</case>

<case name="oFn_SimpCall_hideCallid" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose: enable hide call id to dial a call</p>
<p>Run Instructions:</p>
<p>[root@xx]# ./test-simple-voicecall hide-callid [number]</p>
<p>Pass/Fail Criteria: user can make this outgoing call successfully</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_hide_callid.sh</step>
</case>

<case name="oFn_SimpleCall_repeat_IncomingCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
make incoming calls<br />
Run Instructions:<br />
<br />
(real network)<br />
1. make a call from remote side<br />
2. accept the incoming call<br />
./test-simple-voice call answer 0<br />
3, terminate this call from remote side<br />
4, repeat step1-3 for 9 times<br />
Pass/Fail Criteria:<br />
<br />
incoming calls can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_SimpleCall_repeat_OutgoingCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
make outgoing calls<br />
Run Instructions:<br />
<br />
(real network)<br />
1. setup an outgoing call<br />
./test-simple-call dial [number] .<br />
2. terminate the call from remote side<br />
3, repeat step1-2 for 9 times<br />
Pass/Fail Criteria:<br />
<br />
outgoing calls can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="multi_call" description=" 
">

<case name="oFn_MultiCall_release_HeldCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
make multiparty call then release the held outgoing call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup incoming call and accept it<br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial an outgoing call <br />
./test-simple-call dial [number]<br />
5, hold the call<br />
./test-simple-call hold<br />
6, release the held call<br />
./test-simple-call hangup 2<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call<br />
2. user can hold and hangup second outgoing call<br />
3. multiparty call is released after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_MultiCall_PrivateChat_4" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
private chat(4 parties)<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial a call<br />
./test-simple-voicecall dial [number]<br />
5, add to multiparty<br />
./test-mult-voicecall multipartycall<br />
6, private talk with the second one<br />
./test-multi-voicecall privatechat 1<br />
Pass/Fail Criteria:<br />
Private chat is created with&nbsp;the second call<br />
other calls are in held status</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_private_chat_4.sh</step>
</case>

<case name="oFn_MultiCall_swap_merge" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
swap between multiparty call and outgoing call then merge them together<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup an incoming call and accept it <br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial an outgoing call <br />
./test-simple-call dial [number]<br />
5, hold the call<br />
./test-simple-call hold<br />
6, add the held call in conversation<br />
./test-multi-voicecall multipartycall<br />
Pass/Fail Criteria:<br />
1. user can swap between multiparty call and outgoing call<br />
2. user can&nbsp;merge the&nbsp;held call in conversation after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_MultiCall_hangup_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
hangup the active outgoing call and active multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make an outgoing call <br />
./test-simple-call dial [number]<br />
5, hangup the active outgoing call<br />
./test-simple-call hangup 2<br />
6, active the held multiparty<br />
./test-simple-call retrieve<br />
Pass/Fail Criteria:<br />
1. user can hangup the active outgoing call after step5<br />
2. user can active the multiparty after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_MultiCall_add_OneParty" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
add one party into a multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make an outgoing call<br />
./test-simple-call dial [number]<br />
5, add the held multiparty call in conversation<br />
./test-multi-voicecall multiparty<br />
Pass/Fail Criteria:<br />
1. The held multiparty call is added in the conversation</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_add_one_party.sh</step>
</case>

<case name="oFn_MultiCall_hungup_OnePartyInMultiCall" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
hangup one party in multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multiparty<br />
4, make the third outgoing call<br />
./test-simple-call dial [number]<br />
5, hangup one party of multiparty<br />
./test-simple-call hang up 1<br />
Pass/Fail Criteria:<br />
1. user can hangup one party in multiparty call<br />
2. The call in multiparty&nbsp;is in held status and another outgoing call&nbsp;is in active status after step5</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_hungup_one_party.sh</step>
</case>

<case name="oFn_MultiCall_hungup_multiCall" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
hangup multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make the third outgoing call <br />
./test-simple-call dial [number]<br />
5, hang up the multiparty call<br />
./test-multi-voicecall hangupmultiparty<br />
Pass/Fail Criteria:<br />
1. user can hangup multiparty call<br />
2. only the third outgoing call is in active status after step5</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_hungup_multiparty.sh</step>
</case>

<case name="oFn_MultiCall_PrivateChat_3" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
private chat(3 parties)<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, private talk with the second one<br />
./test-multi-voicecall privatechat<br />
Pass/Fail Criteria:<br />
1. the first call is in held status and the second one is in active status</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_private_chat_3.sh</step>
</case>

<case name="oFn_MultiCall_create" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
multiparty call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call and all calls are in active status</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_create_multiparty.sh</step>
</case>

<case name="oFn_MultiCall_check3callsStatus" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
3 call: 1 active, 1 held, 1 waiting<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. setup an incoming call and accept it<br />
3, setup second outgoing call and accept it at remote side<br />
<br />
Pass/Fail Criteria:<br />
1. outgoing/incoming calls can be setup successfully one by one<br />
2. after step3, call status should be:<br />
one in active; one in waiting; one in held status.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_MultiCall_ECT" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
transfer two calls<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold <br />
3, setup second outgoing call and accept it at remote side<br />
4, transfer the two call <br />
./test-simple-call transfer<br />
Pass/Fail Criteria:<br />
1. user can transfer the two outgoing calls<br />
note: it need network support and with simulator we only can see the two call were released.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_ect.sh</step>
</case>

<case name="oFn_MultiCall_swap" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
swap two calls<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold<br />
3, setup second outgoing call and accept it at remote side<br />
4, swap the two call<br />
./test-simple-call hold/retrieve <br />
<br />
Pass/Fail Criteria:<br />
1. user can swap the two outgoing calls<br />
2. status of these two outgoing calls is showed correctly during swapping</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_swap_calls.sh</step>
</case>

<case name="oFn_MultiCall_call_deflect" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
call deflect<br />
Run Instructions:<br />
<br />
1, setup an incoming call and deflect it to another number<br />
./test-simple-call deflect [number]<br />
<br />
Pass/Fail Criteria:<br />
1. user can deflect the call to another number<br />
note: the feature needs network support. with simulator we only can see this call was released.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_deflect.sh</step>
</case>

<case name="oFn_MultiCall_HoldMO_RejectMT" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
2 call:<br />
hold outgoing call and reject incoming call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold<br />
3,make an incoming call<br />
4,reject this incoming call<br />
./test-simple-call haungup 1<br />
Pass/Fail Criteria:<br />
1. outgoing call can be hold successfully after step2<br />
2. user can reject the incoming call</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_MultiCall_rejectSecondCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
2call: reject incoming call during outgoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, reject this incoming call<br />
./test-simple-call haungup 1<br />
4. terminate the outgoing call<br />
Pass/Fail Criteria:<br />
1. the incoming call can be rejected successfully<br />
2. the outgoing call is still in active status after step3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_MultiCall_hold_answer" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
2 call:<br />
hold first outgoing call and accept incoming<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, hold the first outgoing call and then accept the incoming call<br />
./test-multi-voicecall holdandanswer<br />
4, release the active call<br />
./test-simple-call hang up 1<br />
Pass/Fail Criteria:<br />
1. the outgoing call can be hold and the incoming call can be accepted successfylly after step3<br />
2. the active call can be released after step4</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_hold_and_answer.sh</step>
</case>

<case name="oFn_MulitCall_release_answer" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
2call: release first outgoing call and accept incoming call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, release the first outgoing call and accept this incoming call<br />
./test-multi-voicecall releaseandanswer<br />
Pass/Fail Criteria:<br />
only the incoming call is in active status after step3</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_release_and_answer.sh</step>
</case>
</set>
<set name="emergency_call" description="&lt;p&gt;cases for emergency telephony&lt;/p&gt; 
">

<case name="oFn_EmergCall_sosNum_withoutEfecc" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
remove sos number from Efecc file<br />
Run Instructions:<br />
1, modify the number of Efecc file in /usr/share/phonesim/default.xml <br />
remove all records<br />
2, check the emergency call number of modem<br />
[root@xx]# ./test-multi-voicecall getproperties<br />
<br />
Pass/Fail Criteria:<br />
user will get sos call number of modem: 112,911,110,119,999,118,08,000</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_EmergCall_with_simcard" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
dial sos call with sim card<br />
Run Instructions:<br />
pre-condition: sim card is in target device<br />
1, setup sos call<br />
[root@xx]# ./test-simple-call dial 112 (or other number 911 etc.)<br />
2, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
3. terminate the sos call<br />
Pass/Fail Criteria:<br />
1, the sos call can be setup successfully<br />
2. user can terminate the sos call</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_call_sos.sh</step>
</case>

<case name="oFn_EmergCall_get_sosNum_SIM" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
get emergency call number in SIM file<br />
Run Instructions:<br />
1, modify the number of Efecc file in /usr/share/phonesim/defautl.xml, as 21 F3<br />
2, check the emergency call number of modem<br />
[root@xx]# ./test-multi-voicecall getproperties<br />
<br />
Pass/Fail Criteria:<br />
user will get the 123 number and 911, 112</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_EmergCall_get_sosNum_Modem" manual="false" timeout="90" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
get emergency call number of modem<br />
Run Instructions:<br />
<br />
1, get the emergency call number of modem<br />
( ./test-multi-voicecall getproperties<br />
<br />
Pass/Fail Criteria:<br />
sos number will be showed, e.g. 112, 911 etc.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_emergency_list.sh</step>
</case>
</set>
<set name="call_history" description="&lt;p&gt;In MeeGo image, the call history information will be handled by application storage.&lt;/p&gt;
&lt;p&gt;So we need check ofonod log about the call history information.&lt;/p&gt;
&lt;p&gt;./ofonod -n -d '*'&lt;/p&gt;
&lt;p&gt;moreover, there was some cache data in /var/cache/callhistory&lt;/p&gt; 
">

<case name="oFn_CallH_OutgoingcallInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
outgoing call history<br />
Run Instructions:<br />
1, setup an outgoing call<br />
./test-simple-call dial [number]<br />
2, accept the call from remote side<br />
3, terminate the call from remote side<br />
4, check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
Pass/Fail Criteria:<br />
this outgoing call information could be found in calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_CallH_IncomingCallInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
incoming call history<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
2, accept this incoming call<br />
./test-simple-voice call answer 0<br />
3, terminate this call from remote side<br />
4, check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
Pass/Fail Criteria:<br />
this incoming call information could be found in calendar.ics</p>
<p>or be check the history in ofono log window(the terminal window which run ofono)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_CallH_DurationInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
duration information of outgoing call<br />
Run Instructions:<br />
1,setup an outgoing call<br />
[root@xx]# ./test-simple-voice call dial [number]<br />
or dial one number in phonesim <br />
2, accept it from remote side<br />
3, terminate this call from remote side<br />
4, check duration information of outgoing call <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono) <br />
Pass/Fail Criteria:<br />
duration information could be found in calendar.ics, e.g. the Starts and End date or the duration value calculated</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_CallH_MT_DateInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
date information of incoming call<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
In phonesim that is dialing one number from incoming tag <br />
2, accept this incoming call<br />
[root@xx]# ./test-simple-voice call answer 0 <br />
3, terminate this call from remote side<br />
[root@xx]# ./test-simple-voice hangup <br />
4, check date information of incoming call<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono) <br />
Pass/Fail Criteria:<br />
date duration information could be found in calendar.ics, e.g. the Starts and End date or the duration value calculated</p>
<p>&nbsp;</p>
<p>information of incoming call could be found in calendar.ics</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_CallH_SingleMissedCallInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
single missed call history<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
2, do not accept this call<br />
3, terminate this call from remote side<br />
4. check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
Pass/Fail Criteria:<br />
this missed call information could be found in calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_CallH_MultiMissedCallInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
missed calls history<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
2, do not accept this call<br />
3, terminate this call from remote side<br />
4. repeat step1-3<br />
5. repeat step1-3<br />
6,check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono) <br />
Pass/Fail Criteria:<br />
these 3 missed calls information could be found in calendar.ics</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="call_volume" description=" 
">

<case name="oFn_CallVol_get_mute" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get mute/unmute value<br />
Run Instructions:<br />
<br />
1, get mute/unmute value<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
<br />
mute/unmute value will be showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_volume_get_mute.sh</step>
</case>

<case name="oFn_CallVol_set_mute" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set mute on<br />
Run Instructions:<br />
<br />
1, enable mute<br />
&nbsp;&nbsp; ./test-volume set mute<br />
Pass/Fail Criteria:<br />
<br />
mute is in ON after step1</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_volume_set_mute.sh</step>
</case>

<case name="oFn_CallVol_get_MicVolVal" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get microphone volume value<br />
Run Instructions:<br />
<br />
1, get the value of volume<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
value of volume for microphone will be showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_volume_get_microphone.sh</step>
</case>

<case name="oFn_CallVol_set_MicVolVal" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set microphone volume value<br />
Run Instructions:<br />
<br />
1, set the value of volume for microphone<br />
&nbsp;&nbsp; ./test-volume set Microphone 60<br />
Pass/Fail Criteria:<br />
the value of volume for microphone can be set correctly, phonesim do not support it but hfp is ok</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_CallVol_get_SpkVolVal" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get speaker volume value<br />
Run Instructions:<br />
<br />
1, get the value of volume<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
value of volume for speaker will be showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_volume_get_speaker.sh</step>
</case>

<case name="oFn_CallVol_set_SpkVolVal" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set Speakerphone volume value<br />
Run Instructions:<br />
<br />
1, set the value of volume for speakerphone<br />
&nbsp;&nbsp; ./test-volume set Speakerphone 60<br />
Pass/Fail Criteria:<br />
the value of volume for speakerphone can be set correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_volume_set_speaker.sh</step>
</case>
</set>
<set name="sms" description=" 
">

<case name="oFn_sms_SendMsg" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
send sms<br />
Run Instructions:<br />
(real network)<br />
1, send a sms<br />
./test-sms send [message content]<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="oFn_sms_RecvMsg" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive sms<br />
Run Instructions:<br />
(real network)<br />
1. send a sms from remote side<br />
1, receive the sms<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_SendMsg_UCS2" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
send UCS2 message<br />
Run Instructions:<br />
(real network)<br />
1, send a &quot;UCS2&quot; message<br />
./test-sms send (UCS2 content)<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sms_send_ucs2.sh</step>
</case>

<case name="oFn_sms_Sendsms_160ucs2" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
UCS2 character set in sms<br />
Run Instructions:<br />
1, set character set as UCS2: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;UCS2&quot;<br />
2,send a sms (160 char)<br />
<br />
Pass/Fail Criteria:<br />
The message should be sent successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvMsg_UCS2" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive UCS2 message<br />
Run Instructions:<br />
(real network)<br />
1, send a UCS2 message from remote side <br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully and the message content is displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_Sendsms_70gsm" manual="true" timeout="90" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
GSM character set in sms<br />
Run Instructions:<br />
1, set character set as GSM: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;GSM&quot;<br />
2, send a sms (70 char)<br />
<br />
Pass/Fail Criteria:<br />
The message should be sent successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvSeveralCB" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive several cell broadcast messages<br />
Run Instructions:<br />
1, send several cell broadcast messages from phonesim</p>
<p>&nbsp;&nbsp; you need change the channel number for second cb or later<br />
2, receive the cell broadcast messages<br />
<br />
Pass/Fail Criteria:<br />
All cell broadcast messages should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvMsg_class0" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>receive class0 message</p>
<p><br />
Run Instructions:</p>
<p>1, launch phonesim</p>
<p>2, enter 0 in message type of phonesim sms application</p>
<p>3, start ./test-receive-message script</p>
<p>4, check the class0 message receiving</p>
<p><br />
Pass/Fail Criteria:</p>
<p>it will show the &quot;A class0 message ......&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvMsg_2pages" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
receive 2 pages message<br />
Run Instructions:<br />
<br />
(real network)<br />
1, send 2 pages message at remote side<br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvMsg_7bit" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive 7bit coded message<br />
Run Instructions:<br />
(simulator)<br />
1, send a 7 bit coded message at remote side <br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_set_SC_Num" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
set service center number<br />
Run Instructions:<br />
(real network)<br />
1, set service center number<br />
[root@xx]# ./test-sms sc [ number ]<br />
Pass/Fail Criteria:<br />
The service center number can be set successfully</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sms_set_sc.sh</step>
</case>

<case name="oFn_sms_SendMsg_long" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
send long message<br />
Run Instructions:<br />
(real network)<br />
1, send a long message<br />
./test-sms send [content (more than 140 byte)] .<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sms_send_long.sh</step>
</case>

<case name="oFn_sms_RecvMsg_GSMChar" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive sms message with GSM character<br />
Run Instructions:<br />
(simulator)<br />
1, set charater set as GSM: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;GSM&quot;<br />
2, send a short message from phonesim<br />
3, check whether the message can be received<br />
.<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvMsg_UCS2_pSimu" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive sms message with UCS2 character set<br />
Run Instructions:<br />
(simulator)<br />
1, set charater set as UCS2: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;UCS2&quot;<br />
2, send a short message from phonesim<br />
3, check whether the message can be received<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_SendMsg_UCS2_pSimu" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
send sms message with UCS2 character set<br />
Run Instructions:<br />
(simulator)<br />
1, set charater set as GSM: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;UCS2&quot;<br />
2, send a short message<br />
Pass/Fail Criteria:<br />
The message should be sent successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvCBMsg" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive cell broadcast message<br />
Run Instructions:<br />
(real network)<br />
1, send a cell broadcast message from phonesim<br />
2. receive the cell broadcast message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvCBMsg_GSMChar" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive cell broadcast message with GSM character set<br />
Run Instructions:<br />
(simulator)<br />
1, set charater set as GSM: modify the phonesim data file <br />
/usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;GSM&quot;<br />
2, send a cell broadcast message from phonesim .<br />
3, check whether the cell broadcast can be received<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvCBMsg_French" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
receive cell broadcast message with french (or other no-English) language<br />
Run Instructions:<br />
(simulator)<br />
1, set charater set as GSM: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;UCS2&quot;<br />
2, send a cell broadcast message by phonesim with french language (or other no-English language)<br />
3, check whether the message can be received<br />
Pass/Fail Criteria:<br />
The message should be received and displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvCBMsg_Chinese" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Receive cell broadcast message with chinese language<br />
Run Instructions:<br />
(simulator)<br />
1, set charater set as GSM: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;UCS2&quot;<br />
2, send a cell broadcast message by phonesim with Chinese language .<br />
Pass/Fail Criteria:<br />
The message should be received and displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_Sendsms_160Char_7bit" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
160 7bit char in sms<br />
Run Instructions:<br />
(simulator)<br />
1,send a sms (with 160 char 7bit encoded) <br />
2, receive the message<br />
./test-receive-message .<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_SendMsg_140Char_8bit" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
140 8bit char in sms<br />
Run Instructions:<br />
(real network)<br />
1,send a sms (with 140 char 8bit encoded)<br />
2, receive the message<br />
./test-receive-message .<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_Sendsms_70Char_ucs2" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
70 UCS2 char in sms<br />
Run Instructions:<br />
(real network)<br />
1, send a sms (with 70 UCS2 char) from remote side <br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_DeliveryReports_enable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Enable delivery report</p>
<p>Run Instructions:1) ./test-sms enable-reports</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2)./test-sms properties</p>
<p>Pass/Fail Criteria:the UseDeliveryReports value is true</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sms_enable_de_report.sh</step>
</case>

<case name="oFn_sms_DeliveryReports_disable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Disable sms delivery reports</p>
<p>Run Instructions:1) ./test-sms disable-reports</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2), ./test-sms properties</p>
<p>Pass/Fail Criteria: the UseDeliveryReports is false or 0</p>]]></description>
</case>

<case name="oFn_sms_GetBearer" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Get sms bearer</p>
<p>Run Instructions:Get sms bearer information</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-sms properties</p>
<p>Pass/Fail Criteria:it is cs-preferred by default</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sms_get_bearer.sh</step>
</case>

<case name="oFn_sms_SetBearer" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Set sms bearer</p>
<p>Run Instructions:./test-sms bearer [cs-only,ps-only,cs-preferred,ps-preferred]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, ./test-sms properties</p>
<p>Pass/Fail Criteria: Will get bearer value</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sms_set_bearer.sh</step>
</case>

<case name="oFn_sms_DeliveryReports_success" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Get successful delivery report of sms</p>
<p>Run Instructions:1) plug in modem then send a sms</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-sms send [number] [content]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2) get the delivery report</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; check the sms status information in ofonod log</p>
<p>Pass/Fail Criteria: there was sms delivered information in ofonod log</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_DeliveryReports_Fail" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:get delivery fail report</p>
<p>Run Instructions:1) plug in modem and power on modem</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2) send a sms with wrong number</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3) check status report in sms history or ofonod log</p>
<p>Pass/Fail Criteria:there was submit failed information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_fail_report" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
check fail report time of sms<br />
Run Instructions:<br />
1, send message to an invalid number <br />
2, check whether can receive the sending fail report in 10s<br />
Pass/Fail Criteria:<br />
should receive the fail report during 10s</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sms_RecvEmptyMsg" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Receive empty sms<br />
Run Instructions:<br />
1, send an empty message from peer side<br />
<br />
Pass/Fail Criteria:<br />
the empty message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="sms_history" description="&lt;p&gt;In MeeGo image, the sms history information will be handled by application storage.&lt;/p&gt;
&lt;p&gt;So we need check ofonod log about the&amp;nbsp;sms history information.&lt;/p&gt;
&lt;p&gt;./ofonod -n -d '*'&lt;/p&gt;
&lt;p&gt;moreover, there was some cache data in /var/cache/smshistory&lt;/p&gt; 
">

<case name="oFn_smsH_SendMsg_Info" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
message content in send history<br />
Run Instructions:<br />
<br />
1, send a message<br />
2, check the sent message information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window<br />
Pass/Fail Criteria:<br />
<br />
sent message information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_smsH_RecvMsg_Info" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
message content in receive history<br />
Run Instructions:<br />
<br />
1,configure ofono to enable history record and install ofono<br />
[root@xx]# ./configure --prefix=/usr --mandir=/usr/share/man \ <br />
--sysconfdir=/etc --localstatedir=/var \ <br />
&ndash;enable-maintainer-mode <br />
send a message, in phonesim is: enter message tag, input number and text , click send button<br />
receive a message<br />
#./test-sms receive <br />
2, check the received message information<br />
in ofono log terminal window <br />
Pass/Fail Criteria:<br />
<br />
received message information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_smsH_SendMsg_DateInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
message date in send history<br />
Run Instructions:<br />
<br />
1, send a message<br />
2, check date information of sent message<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window.<br />
Pass/Fail Criteria:<br />
<br />
date information of sent message will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_smsH_RecvMsg_DateInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
message date in receive history<br />
Run Instructions:<br />
<br />
1, receive a message<br />
2, check date information of received message<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window <br />
Pass/Fail Criteria:<br />
date information of received message will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_smsH_ChangeDate_SendMsg" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
change the time then check the date in send history<br />
Run Instructions:<br />
<br />
1, send a message<br />
2, check date information of sent message<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
3, change the time<br />
4. check date information of sent message again<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window <br />
Pass/Fail Criteria:<br />
1. date information of sent message will be showed correctly<br />
2. date information of sent message will not be changed after step3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="gsm_string" description="&lt;p&gt;test cases for gsm_string&lt;/p&gt; 
">

<case name="oFn_GS_CB_OutgoingAll_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
interrogate BAOC outgoing call<br />
Run Instructions:<br />
<br />
1, Input *#33*3579# <br />
./test-ss-gsm-cb ss-cb-baoc-interrogate<br />
<br />
Pass/Fail Criteria:<br />
all outgoing call barring status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cb_baoc.sh</step>
</case>

<case name="oFn_GS_CB_AllOutgoing_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive all CB outgoing<br />
Run Instructions:<br />
<br />
1, Input #333*3579*11# <br />
./test-ss-gsm-cb ss-cb-alloutgoing-deactive<br />
2, check the output of phonesim log<br />
Pass/Fail Criteria:<br />
1. CB outgoing status should be disabled; there will be AT+CLCK=&quot;AG',0,3579',1 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_change_ss_pwd" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
change password<br />
Run Instructions:<br />
<br />
1, change ss password<br />
*30**old pwd *new pwd*newpwd#</p>
<p>eg: old pwd is 3579, new pwd is 2468<br />
or ./test-ss-gsm-string ss-change-password &lt;old pwd&gt; &lt;new pwd&gt;<br />
<br />
Pass/Fail Criteria:<br />
user can change ss password</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_BAIC_interrogat" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Interrogate BAIC incoming call<br />
Run Instructions:<br />
<br />
1, Input *#35*3579# <br />
./test-ss-gsm-cb ss-cb-baic-interrogate<br />
<br />
Pass/Fail Criteria:<br />
all incoming call barring status should be displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_BAIC_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive BAIC incoming call<br />
Run Instructions:<br />
<br />
1, Input #35*3579# <br />
./test-ss-gsm-cb ss-cb-baic-deactive<br />
2, check the output of phonesim log<br />
Pass/Fail Criteria:<br />
user can find AT+CLCK=&quot;AI',0,3579, such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_BAIC_roam_interrogat" manual="false" timeout="90" type="Functional" insignificant="false" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
Interrogate BAICRO incoming call<br />
Run Instructions:<br />
<br />
1, Input *#351*3579# <br />
./test-ss-gsm-cb ss-cb-baicro-interrogate<br />
Pass/Fail Criteria:<br />
all incoming call barring when roaming status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cb_baicro.sh</step>
</case>

<case name="oFn_GS_BAIC_roam_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive BAICRO incoming call<br />
Run Instructions:<br />
<br />
1, Input #351*3579# <br />
./test-ss-gsm-cb ss-cb-baicro-deactive<br />
2, check the output of phonesim log<br />
Pass/Fail Criteria:<br />
user can find AT+CLCK=&quot;OX',0,3579, such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_BAOIC_exHC_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Interrogate BAOICEH outgoing call<br />
Run Instructions:<br />
<br />
1, Input *#332*3579# <br />
./test-ss-gsm-cb ss-cb-baoiceh-interrogate<br />
<br />
Pass/Fail Criteria:<br />
alloutgoing international call barring status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cb_baoiceh.sh</step>
</case>

<case name="oFn_GS_BAOIC_exHC_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive BAOICEH outgoing call<br />
Run Instructions:<br />
<br />
1, Input #332*3579# <br />
./test-ss-gsm-cb ss-cb-baoiceh-deactive<br />
<br />
Pass/Fail Criteria:<br />
user can find AT+CLCK=&quot;OX',1,3579, such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_BAOIC_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Interrogate BAOIC outgoing call<br />
Run Instructions:<br />
<br />
1, Input *#331*3579#<br />
./test-ss-gsm-cb ss-cb-baoic-interrogate<br />
Pass/Fail Criteria:<br />
all outgoing international call barring status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cb_baoic.sh</step>
</case>

<case name="oFn_GS_BAOIC_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive BAOIC outgoing call<br />
Run Instructions:<br />
<br />
1, Input #331*3579#<br />
./test-ss-gsm-cb ss-cb-baoic-deactive<br />
Pass/Fail Criteria:<br />
user can find AT+CLCK=&quot;OI',1,3579' such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_BAOC_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
interrogate all CB outgoing<br />
Run Instructions:<br />
<br />
1, Input *#333*3579# <br />
./test-ss-gsm-cb ss-cb-alloutgoing-interrogate<br />
<br />
Pass/Fail Criteria:<br />
all outgoing barring status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cb_all_out.sh</step>
</case>

<case name="oFn_GS_BAOC_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
active BAOC outgoing call<br />
Run Instructions:<br />
<br />
1, Input **33*3579*11# <br />
./test-ss-gsm-cb ss-cb-baoc-active<br />
<br />
Pass/Fail Criteria:<br />
user can active all outgoing call barring</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_BAOC_deactive_fax" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive BAOC outgoing fax service<br />
Run Instructions:<br />
<br />
1, Input #33*3579*13# <br />
./test-ss-gsm-cb ss-cb-baoc-deactive<br />
2, check the output of phonesim log<br />
Pass/Fail Criteria:<br />
user could find AT+CLCK=&quot;AO',0,3579,4' such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CB_AllIncoming_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive all CB incoming<br />
Run Instructions:<br />
<br />
1, Input *#353*3579# <br />
./test-ss-gsm-cb ss-cb-allincoming-deactive<br />
<br />
Pass/Fail Criteria:<br />
user could find AT+CLCK=&quot;AC',0,3579',such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CB_AllIncoming_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
interrogate all CB incoming<br />
Run Instructions:<br />
<br />
1, Input *#353*3579# <br />
./test-ss-gsm-cb ss-cb-allincoming-interrogate<br />
<br />
Pass/Fail Criteria:<br />
all incoming barring status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cb_all_inc.sh</step>
</case>

<case name="oFn_GS_CB_all_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deactive all CB<br />
Run Instructions:<br />
<br />
1, Input #330*3579*11# <br />
./test-ss-gsm-cb ss-cb-all-deactive<br />
2, check the phonesim log<br />
Pass/Fail Criteria:<br />
cb deactive information will be showed, e.g.AT+CLCK=&quot;AB',0,3579',1 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CB_Outgoing_interrogat" manual="false" timeout="90" type="Functional" insignificant="false" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
Interrogate all CB<br />
Run Instructions:<br />
<br />
1, Input *#330*3579# <br />
./test-ss-gsm-cb ss-cb-all-interrogate<br />
<br />
Pass/Fail Criteria:<br />
call barring status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cb_all.sh</step>
</case>

<case name="oFn_GS_CF_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
cf interrogate<br />
Run Instructions:<br />
1 Input *#002#<br />
or ./test-ss-gsm-string ss-cf-interrogate<br />
Pass/Fail Criteria:<br />
<br />
the status of cf should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cf_all.sh</step>
</case>

<case name="oFn_GS_CF_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
cf active<br />
Run Instructions:<br />
1 Input *002*61167537**20#<br />
or ./test-ss-gsm-string ss-cf-active [number]<br />
2, check the output of phonesim log<br />
Pass/Fail Criteria:<br />
cf active information will be showed, e.g.there is the number in AT+CCFC=4,3,</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CF_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
cf deactive<br />
Run Instructions:<br />
1 ./test-ss-gsm-string ss-cf-deactive<br />
Pass/Fail Criteria:<br />
cf deactive information will be showed, e.g. AT+CCFC=4,0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CFB_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFB interrogate<br />
Run Instructions:<br />
1, Input *#67# <br />
./test-ss-gsm-string ss-cfb-voice-interrogate<br />
<br />
Pass/Fail Criteria:<br />
the CFB status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cf_busy.sh</step>
</case>

<case name="oFn_GS_CFB_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFB deactive<br />
Run Instructions:<br />
1, Input #67**11# , <br />
./test-ss-gsm-string ss-cfb-voice-deactive<br />
<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=1,0,,,1 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CFB_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFB active<br />
Run Instructions:<br />
1, Input **67*61167537*11#<br />
./test-ss-gsm-string ss-cfb-voice-active [number]<br />
<br />
Pass/Fail Criteria:<br />
user can find the nubmer information for CFB</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CFNRc_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFNRc active<br />
Run Instructions:<br />
1, Input *62*61167537*13# , <br />
./test-ss-gsm-string ss-cfnrc-fax-active [number]<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=3,3,,,4 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CFNRc_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFNRc interrogate<br />
Run Instructions:<br />
1, Input *#62**13#<br />
./test-ss-gsm-string ss-cfnrc-fax-interrogate<br />
Pass/Fail Criteria:<br />
the CFNRc status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cf_nrc.sh</step>
</case>

<case name="oFn_GS_CFNRc_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFNRc deactive<br />
Run Instructions:<br />
1, Input #62**13# , <br />
./test-ss-gsm-string ss-cfnrc-fax-active<br />
<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=3,0,,,4 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CFNRy_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFNRy deactive<br />
Run Instructions:<br />
1, Input #61**20# ,<br />
./test-ss-gsm-string ss-cfnry-data-deactive<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=2,0,,,48 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CFNRy_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFNRy active for data service with 30s timeout<br />
Run Instructions:<br />
1, Input **61*61167537*20*30# ,<br />
./test-ss-gsm-string ss-cfnry-data-active [number]<br />
<br />
Pass/Fail Criteria:<br />
user can find the number in AT+CCFC=2,3,,..48,30 and such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CFNRy_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFNRy interrogate<br />
Run Instructions:<br />
1, Input *#61# , <br />
./test-ss-gsm-string ss-cfnry-data-interrogate<br />
<br />
Pass/Fail Criteria:<br />
the CFNRy data status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cf_nry.sh</step>
</case>

<case name="oFn_GS_CFU_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFU interrogate<br />
Run Instructions:<br />
1, Input *#21# <br />
./test-ss-gsm-string ss-cfu-all-interrogate<br />
Pass/Fail Criteria:<br />
the CFU status should be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cf_uncon.sh</step>
</case>

<case name="oFn_GS_CFU_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CFU active<br />
Run Instructions:<br />
1, Input **21*61167537*11# , <br />
or ./test-ss-gsm-string ss-cfu-all-active [number]<br />
Pass/Fail Criteria:<br />
number will be displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CW_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
cw interrogate<br />
Run Instructions:<br />
1 Input *#43#<br />
or ./test-ss-gsm-string ss-cw-interrogate<br />
Pass/Fail Criteria:<br />
<br />
the cw interrogate will be displayed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_cw_int.sh</step>
</case>

<case name="oFn_GS_CW_deactive" manual="true" timeout="90" type="Functional" insignificant="false" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
cw deactive<br />
Run Instructions:<br />
1 Input #43#<br />
or ./test-ss-gsm-string ss-cw-deactive<br />
Pass/Fail Criteria:<br />
<br />
the cw deactive will be displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CW_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
cw active<br />
Run Instructions:<br />
1 Input *43#<br />
or ./test-ss-gsm-string ss-cw-active<br />
Pass/Fail Criteria:<br />
<br />
the cw active will be displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CLIR_active" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
clir active<br />
Run Instructions:<br />
1 Input *31#<br />
or ./test-ss-gsm-string ss-clir-active<br />
Pass/Fail Criteria:<br />
the clir active status should be displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CLIR_deactive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
clir deactive<br />
Run Instructions:<br />
1 Input #31#<br />
or ./test-ss-gsm-string ss-clir-deactive<br />
Pass/Fail Criteria:<br />
the clir deactive status should be displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_GS_CLIR_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
clir interrogate<br />
Run Instructions:<br />
1 Input *#31#<br />
or ./test-ss-gsm-string ss-ld-interrogate 31<br />
Pass/Fail Criteria:<br />
the clir interrogate status should be displayed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_clir_int.sh</step>
</case>

<case name="oFn_GS_COLP_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
colp interrogate<br />
Run Instructions:<br />
<br />
1 Input *#76#<br />
or ./test-ss-gsm-string ss-ld-interrogate 76<br />
Pass/Fail Criteria:<br />
the status of colp should be displayed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_colp_int.sh</step>
</case>

<case name="oFn_GS_CLIP_interrogat" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
clip interrogate<br />
Run Instructions:<br />
1 Input *#30#<br />
or ./test-ss-gsm-string ss-ld-interrogate 30<br />
Pass/Fail Criteria:<br />
the clip interrogate status should be displayed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_gsm_clip_int.sh</step>
</case>

<case name="oFn_CB_invalid_string" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
invalid # CB string<br />
Run Instructions:<br />
Invalid CB request by MMI string *330*1234#<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_cw_invalid_string" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
invalid # CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43*1234*4#<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_cw_invalid_sic" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
invalid CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43#123456<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_cb_invalid_sic" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
invalid * CB string<br />
Run Instructions:<br />
Invalid CB request by MMI string *330*1234*<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_cw_invalid_sib" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
invalid *# CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43*1234*4*#<br />
Pass/Fail Criteria:<br />
you will get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_cw_invalid_ending_string" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
invalid * CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43#123456*<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="aoc" description="&lt;p&gt;Advanced of charge&lt;/p&gt; 
">

<case name="oFn_aoc_get_CM" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
AOC check call meter<br />
Run Instructions:<br />
1, Check call meter value <br />
./test-advice-of-charge properties<br />
2, check the output of script<br />
Pass/Fail Criteria:<br />
there is Call Meter value</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_get_aoc_cm.sh</step>
</case>

<case name="oFn_aoc_get_ACM" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
AOC: check Accumulated call meter value (ACM)<br />
Run Instructions:<br />
1, Check Accumulated call meter value <br />
./test-advice-of-charge properties<br />
2, check the output of script<br />
Pass/Fail Criteria:<br />
there is the value information of ACM,PPU, Currency&nbsp;etc</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_get_aoc_properties.sh</step>
</case>

<case name="oFn_aoc_set_ACM_maximum" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
AOC set AccumulatedCallMeterMaximum<br />
Run Instructions:<br />
1, Set AccumulatedCallMeterMaximum value by UI<br />
or ./test-advice-of-charge set AccumulatedCallMeterMaximum [value] 31337<br />
2, Check the value is changed<br />
test-monitor-telephony<br />
Pass/Fail Criteria:<br />
the value is changed to first one</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_aoc_acmm.sh</step>
</case>

<case name="oFn_aoc_set_currency" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
AOC set Currency<br />
Run Instructions:<br />
1, Set Currency value by UI<br />
or ./test-advice-of-charge set Currency [TUK] 31337<br />
2, Check the value is changed<br />
test-monitor-telephony<br />
Pass/Fail Criteria:<br />
the value is changed to TUK</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_aoc_currency.sh</step>
</case>

<case name="oFn_aoc_set_PricePerUnit" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
AOC set PPU<br />
Run Instructions:<br />
1, Set PricePerUnit value by UI<br />
or ./test-advice-of-charge PricePerUnit [value] 31337<br />
2, Check the value is changed<br />
test-monitor-telephony<br />
Pass/Fail Criteria:<br />
the value is changed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_aoc_ppu.sh</step>
</case>

<case name="oFn_aoc_reset" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
AOC Reset<br />
Run Instructions:<br />
1, Reset all value of AOC by UI<br />
or ./test-advice-of-charge reset 31337<br />
2, Check the script report<br />
Pass/Fail Criteria:<br />
No error report</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_aoc_reset.sh</step>
</case>
</set>
<set name="ussd" description="&lt;p&gt;unstructure supplementary service data&lt;/p&gt; 
">

<case name="oFn_ussd_Recv_GSM" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Receive a USSD Notification from network with GSM character set<br />
Run Instructions:<br />
1,Set character set to &quot;gsm&quot; <br />
run<br />
#./test-monitor-telephony <br />
to get message<br />
2, network send a ussd notification to handset <br />
<br />
Pass/Fail Criteria:<br />
This notification can be displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_Recv_UCS2" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Receive a USSD Notification from network with UCS2 character set<br />
Run Instructions:<br />
1,Set character set to &quot;UCS2&quot; <br />
run<br />
#./test-monitor-telephony <br />
to get message<br />
2, network send a ussd notification to handset <br />
<br />
Pass/Fail Criteria:<br />
This notification can be displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_Recv_IRA" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Receive a USSD Notification from network with IRA character set<br />
Run Instructions:<br />
1,edit /usr/share/phonesime/default.xml file<br />
Set character set to &quot;IRA&quot; <br />
2, run<br />
#./test-monitor-telephony <br />
to get message <br />
3, network send a ussd notification to handset <br />
<br />
Pass/Fail Criteria:<br />
This notification can be displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_cancel" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
User cancel a network USSD request<br />
Run Instructions:<br />
<br />
1, network send a ussd quest to handset and request respond<br />
can use phonesim to send the ussd, enter ussd tag, <br />
input message, click send button <br />
2, user cancel it<br />
./test-ussd cancel<br />
<br />
Pass/Fail Criteria:<br />
there was AT+CUSD=2 in phonesim at log</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_receive" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Receive a USSD Notification from network<br />
Run Instructions:<br />
<br />
1,# ./test-monitor-telephony<br />
network send a ussd notification to handset<br />
that is : open phonesim, enter ussd tag, input text, click send button<br />
2, receive this notification<br />
Pass/Fail Criteria:<br />
The ussd notification will be displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_respond" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Respond a USSD request from network<br />
Run Instructions:<br />
<br />
1, network send a ussd quest to handset and request respond<br />
2, respond this request<br />
./test-ussd respond c<br />
Pass/Fail Criteria:<br />
<br />
The ussd response's will be displayed correctly in phonesim ussd application: Eg, &quot;c&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_send" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Send USSD request to network<br />
Run Instructions:<br />
<br />
1, ./test-ussd send *#225#<br />
Pass/Fail Criteria:<br />
you will see: &quot;Thanks you...&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_IdleStatus" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
check ussd idle status<br />
Run Instructions:<br />
1,run<br />
#./test-monitor-telephony <br />
to get message<br />
send ussd notification from network<br />
2, check the ussd status <br />
./test-ussd properties <br />
<br />
Pass/Fail Criteria:<br />
the status is idle status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ussd_UserResponse_status" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check ussd user-response status<br />
Run Instructions:<br />
<br />
1,run<br />
#./test-monitor-telephony <br />
to get message<br />
send ussd request and ask user response from network <br />
2, check the ussd status <br />
./test-ussd properties<br />
Pass/Fail Criteria:<br />
<br />
the status is user-response status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="voicemail" description=" 
">

<case name="oFn_VM_MWI" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail waiting indication<br />
Run Instructions:<br />
<br />
1, Get voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail waiting indication information will be showed correctly: true or false</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_voicemail_wait_ind.sh</step>
</case>

<case name="oFn_VM_MWI_cphs" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get cphs voicemail waiting indication<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
&nbsp;&nbsp;&nbsp;&nbsp; pathtosrc/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part <br />
3,./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
will get cphs voicemail waiting indicator, e.g.: true</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_VM_get_MsgCount" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail message count number<br />
Run Instructions:<br />
<br />
1, Get voice mail message count number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail message count number will be showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_voicemail_msg_count.sh</step>
</case>

<case name="oFn_VM_get_MsgCount_cphs" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get cphs voicemail count information<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
&nbsp;&nbsp;&nbsp;&nbsp; pathtosrc/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part <br />
3,[root@xx] ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
will get cphs voicemail waiting indicator, e.g.: 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_VM_get_number" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail number<br />
Run Instructions:<br />
<br />
1, Get voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voice mail number information will be showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_voicemail_number.sh</step>
</case>

<case name="oFn_VM_set_number" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
set voicemail number<br />
Run Instructions:<br />
<br />
1, set voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting set [number]<br />
2, get voice mail number<br />
./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail number can be set correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_voicemail_set_number.sh</step>
</case>

<case name="oFn_VM_get_number_cphs" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get cphs voicemail number<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
pathtosrc/default.xml eg:<br />
/usr/share/phonesimm/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part<br />
3,get voice mail number<br />
./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
will get cphs voicemail number, e.g.: 6789</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_VM_set_number_cphs" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set cphs voicemail number<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
&nbsp;&nbsp;&nbsp;&nbsp; pathtosrc/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part <br />
3,set voice mail number<br />
[root@xx]# ./test-message-waiting set [number]<br />
Pass/Fail Criteria:<br />
<br />
will set cphs voicemail mail number</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="gprs" description="&lt;p&gt;1) you need test it on real network so plug in modem&lt;/p&gt;
&lt;p&gt;2) create context first : ./test-gprs createcontext&lt;/p&gt;
&lt;p&gt;3)active context: ./test-gprs activecontext&lt;/p&gt;
&lt;p&gt;you can use list-contexts to check the detail properties for each step&lt;/p&gt; 
">

<case name="oFn_gprs_attach" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
attach gprs network twice<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, detach gprs network<br />
# ./test-gprs detach<br />
3, attach to gprs network<br />
# ./test-gprs attach<br />
4, check network status<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the attach status = 1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_detach" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Detach the modem from network<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, detaches the modem from network <br />
[root@xx]# ./test-gprs detach<br />
3, get attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the attached status = 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_create_context" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Create a context with the name GPRS<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create a context<br />
[root@xx]# ./test-gprs createcontext <br />
3,check the name of context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is context name information. Eg: &quot;GPRS&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_rm_context" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Remove gprs context<br />
Run Instructions:<br />
<br />
1, create a context <br />
[root@xx]# ./test-gprs createcontext<br />
2, remove this context<br />
[root@xx]# ./test-gprs removecontext<br />
3,check this context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
No context&nbsp;was showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_list_context" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
List gprs context<br />
Run Instructions:<br />
1, create a context <br />
[root@xx]# ./test-gprs createcontext<br />
2, list this context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
There are APN, type, name, etc.&nbsp;such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_active_context" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
active context<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create a context and active it<br />
#./test-gprs activecontext <br />
3, check the status<br />
#./listcontext<br />
Pass/Fail Criteria:<br />
<br />
this context status is Active=1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_deactive_context" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Deactivate gprs context<br />
Run Instructions:<br />
<br />
1, create a context<br />
[root@xx]# ./test-gprs createcontext<br />
2, deactivate the context<br />
[root@xx]# ./test-gprs deactivatecontext<br />
3,check this context<br />
[root@xx]# ./list-context<br />
Pass/Fail Criteria:<br />
the active status =0&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_deactive_AllContexts" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Deactivate all contexts<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context and active it<br />
3, deactivate the context <br />
./test-gprs deactivateall<br />
4, get context status<br />
./list-context<br />
Pass/Fail Criteria:<br />
<br />
the active status = 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_get_AttachedStatus" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get gprs attached status<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not attach, have to poweron modem and attach it manually <br />
2, check gprs attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is gprs attached information: Eg: true or false</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_PrimaryContext" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs primary context information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not attach, have to poweron modem and attach it manually <br />
2, check gprs attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is primary context information: Eg: /modemname/primarycontext1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_RoamAllowedInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs roaming allowed information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the roaming allowed information<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is the roaming allowed information: true or false</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_PowerInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs power information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the power information<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is the power information: 1 or 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_network" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network status<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network status information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
network information will be showed, e.g.  registered, unknown</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_LAC" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network LAC information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network LAC information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the network LAC information will be showed if network supports it</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_APN" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get APN name<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context<br />
3, set active context <br />
[root@xx]# ./test-gprs activecontext<br />
4, Get APN information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
APN information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_CellId" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network Cell ID information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network Cell ID information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the network Cell ID information will be showed if network supports it</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_NetTechInfo" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network Technology information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network Technology information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the network Technology information will be showed if network supports it, E.g. GPRS, UTRAN, GSM</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_type" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get Type<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context then Get Type<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is type information : Internet, MMS, WAP by listing context.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_interface" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get interface of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context then Get interface<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is the interface information, such as usb0, ppp0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_ip" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get IP of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context<br />
3. run # ifconfig <br />
4, dhclient [interface] eg: usb0<br />
# dhclient usb0 <br />
Pass/Fail Criteria:<br />
1, there is interface information in step3<br />
2, there is the IP address information in step4</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_gateway" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get gateway of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context <br />
3, Get the IP address<br />
run # ifconfig<br />
4,Get gateway<br />
run # route<br />
Pass/Fail Criteria:<br />
<br />
there is gateway information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_netmask" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get netmask of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2,  create and active a context <br />
3, get ip address<br />
4, Get netmask<br />
type ifconfig<br />
Pass/Fail Criteria:<br />
<br />
there is netmask information: eg, 255,255,255.0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_get_method" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get Method of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context then Get method<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is method information e.g. &quot;static or dhcp &quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_set_APN" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set APN<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set APN <br />
./test-gprs setapn [apn]<br />
see apn information<br />
3, ./list-context<br />
Pass/Fail Criteria:<br />
<br />
APN information will be showed by listing context</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_set_pwd" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set password<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set the password <br />
[root@xx]# ./test-gprs setpassword[pwd]<br />
3, see password information<br />
[root@xx]# ./lsit-contexts</p>
<p>Pass/Fail Criteria:<br />
<br />
password information will be showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_set_name" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set name<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2,create a context then set context name <br />
[root@xx]# ./test-gprs setname [name]<br />
3 check name information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
new name information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_set_username" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set username<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set username <br />
[root@xx]# ./test-gprs setusername [name]<br />
3. check username information<br />
[root@xx]# ./list-context<br />
Pass/Fail Criteria:<br />
<br />
username information will be showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_set_type" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set type<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, set type <br />
[root@xx]# ./test-gprs settype [type]<br />
3. check type information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
type information will be internet</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_gprs_set_RoamAllowed" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set roamingallowed<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto  attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, set roaming allowed <br />
# ./test-gprs setroamingallowed<br />
3, check the setting<br />
# ./list-contexts<br />
Pass/Fail Criteria:<br />
<br />
romaingallowed is true</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="hfp" description=" 
">

<case name="oFn_hfp_MT_reject" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Reject incoming call<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone <br />
4, set up an incoming call<br />
5, reject this incoming call<br />
./test-simplecall hangup<br />
Pass/Fail Criteria:<br />
<br />
this incoming call can be rejected</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_SimpCall_terminate" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Terminate a call<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, set up an outgoing call<br />
./test-simplecall dial [number]<br />
5, Terminate this outgoing call<br />
./test-simplecall hangup<br />
Pass/Fail Criteria:<br />
<br />
this outgoing call can be terminated</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_MO" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Dial an outgoing call<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, Dial an outgoing call<br />
./test-simplecall dial [number]<br />
5, Accepted this call at remote side<br />
6, Check this ongoing call<br />
./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can make an outgoing call</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_MT" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Accept an incoming call<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, make an incoming call<br />
5, Accepted this incoming call<br />
6, Check this ongoing call<br />
./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can make an incoming call</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_hold" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Hold/retrieve  a call<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, Dial an outgoing call and accept at remote side<br />
./test-simple-call dial number<br />
5, Hold/Retrieve this call<br />
./test-simple-call hold<br />
6, Check the result<br />
./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
<br />
user can Hold / Retrieve the call</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_release_accept" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Release first call and accept second one in multiple call<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
5,set up an incoming call from remote side   <br />
6, release the first one and accept the incoming call<br />
./test-multi-voicecall releaseandanswer<br />
Pass/Fail Criteria:<br />
<br />
user can release first call and accept second one in multiple cal</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_hangup" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Hangup one call in multiple call<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
ofono -n -d '*'<br />
3, connection from phone<br />
4, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
5. put it in hold status<br />
./test-simple-call hold<br />
6,set up an incoming call from remote side<br />
7,reject this incoming call<br />
./test-simple-call haungup 1<br />
Pass/Fail Criteria:<br />
<br />
user can hangup one call in multiple calls</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_swap" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Swap two calls<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone<br />
4, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
5. put it in hold status<br />
./test-simple-call hold<br />
6, dial second call and accept it at remote side<br />
7, swap the two calls<br />
./test-simple-call hold/retrieve<br />
Pass/Fail Criteria:<br />
<br />
user could swap two calls</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_MultiCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Create a Multi-party call<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
5. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
6, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
Pass/Fail Criteria:<br />
<br />
The Multiparty call can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_PrivateChat" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Private chat in Multi-party call<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone <br />
4, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
5. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
6, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
7,private chat with one party<br />
Pass/Fail Criteria:<br />
1. user can setup multiparty call<br />
2. user can private chat</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_HangupAll" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Hangup Multi-party call<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
5. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
6, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
7,dial another outgoing call again<br />
8, hangup this multiparty call<br />
./test-mult-voicecall hangupall<br />
Pass/Fail Criteria:<br />
1. user can setup multiparty call<br />
2. user can make the third outgoing call successfylly<br />
3. user can hangup multiparty call</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_MO_SendDtmf" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Send DTMF during a call<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod  -n -d '*'<br />
3, connection from phone <br />
4, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
5. send DTMF<br />
./test-simple-call senddtmf 4<br />
Pass/Fail Criteria:<br />
<br />
1. dtmf can be sent during a call<br />
note, user can hear the dtmf tone in real network</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_set_SpkVol" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Adjust speaker volume<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone<br />
4, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
5, Change the speaker volume<br />
./test-volume set SpeakerVolume [value]<br />
Pass/Fail Criteria:<br />
<br />
speaker volume can be changed successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_set_MicVol" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Adjust micphone volume<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone<br />
4, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
5, Change the Micphone volume<br />
Pass/Fail Criteria:<br />
micphone volume can be changed successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_CallStatus" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Monitor call status<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone<br />
4, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
5, check this call status<br />
6, hold this call<br />
7, check this call status<br />
8, terminate this call<br />
9, check this call status<br />
Pass/Fail Criteria:<br />
this call is in correct status after step4, 6 and 8</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_network_info" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get Network status information<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone<br />
4, check phone status. E.g. signal, network name information etc <br />
<br />
Pass/Fail Criteria:<br />
phone status should be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_MO_voice" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Check voice for outgoing call<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone<br />
4, make an outgoing call <br />
5, accept this call at remote side <br />
6. terminate the call after talking for 1 minute<br />
Pass/Fail Criteria:<br />
user can heard the sound on both sides</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_MT_CheckVoice" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Check voice for incoming call<br />
Run Instructions:<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone<br />
4, accept an incoming call<br />
5. terminate the call after talking for 1 minute<br />
Pass/Fail Criteria:<br />
user can heard the sound on both sides</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_setup_connection" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Setup Bluetooth HFP connection<br />
Run Instructions:<br />
<br />
1, Set up Bluetooth connection between PC and phone<br />
2,start ofonod<br />
[root@xx]# ofonod -n -d '*'<br />
3, connection from phone <br />
4, check the log of ofono<br />
Pass/Fail Criteria:<br />
1,user will see  Service level connection established information in ofonod log</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_disconnect_modem" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
power off modem in hfp<br />
Run Instructions:<br />
1,creat 1 BT connection between Moblie phone and PC <br />
2 power off modem<br />
./test-modem poweroff<br />
3, check this modem status<br />
./test-modem properties<br />
Pass/Fail Criteria:<br />
the power status is false in hfp modem</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_enable_call_id" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
input disabled parameter in voice call API<br />
Run Instructions:<br />
1,creat 1 BT connection between Moblie phone and PC <br />
2 Modify the voicecall scritp like<br />
vcmanager.dial(sys.argv[2],&quot;disabled&quot;)<br />
3, Dial a outgoing call again<br />
4, check this outgoing call status<br />
Pass/Fail Criteria:<br />
this outgoing call is ok</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_hfp_add_connection" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Enable one bt connection during a call<br />
Run Instructions:<br />
1,creat 1 BT connection between Moblie phone and PC <br />
2, dial a outgoing call<br />
3, create second bt connection with another phone<br />
4, power on second modem<br />
./test-modem poweron 1<br />
5, check modems status<br />
Pass/Fail Criteria:<br />
1, this outgoing call is ok<br />
2, two modem all powered status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="ppp" description="&lt;p&gt;PPP&amp;nbsp;&amp;nbsp;application test case&lt;/p&gt; 
">

<case name="oFn_ppp_AccessWeb_GDialer" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test access web page</p>
<p>Run Instructions:</p>
<p>1. connect PC with&nbsp;Modem</p>
<p>plug in modem to pc, power on modem, run test-gprs properties to get its status</p>
<p>2. Go to /ofono/gatchat such as: # cd ./ofono/getchat</p>
<p>3.&nbsp; run <br />
# ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp;then modem connect to network</p>
<p><font size="2">3. run command <span lang="EN-US"><br />
# route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">4. <span lang="EN-US">get servername from test-gprs part, edit /etc/resolve.conf to add <span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>different modem may have different nameserver,so you have to change the servername to fit your modem.<br />
how to get server name , you have better reference to test-gprs part</p>
<p>3. open browser to accss <a href="http://www.google.com">www.google.com</a></p>
<p>Pass/Fail Criteria:</p>
<p>The <a href="http://www.google.com">www.google.com</a>&nbsp;web pag is displayed&nbsp;correctly</p>
<p>&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_disconnection_GDialer" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>check disconnect the PPP cnnection</p>
<p>Run Instructions:</p>
<p>1. connect PC with <span style="font-family: 'Verdana','sans-serif'; font-size: 10pt" lang="EN-US">Modem</span></p>
<p>2. Go to /ofono/gatchat</p>
<p>3. run <br />
# ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp;<br />
then modem connect to network</p>
<p><font size="2">4. run command <span lang="EN-US"><br />
[root@xx]# route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6. open browser to access <a href="http://www.google.com/"><font color="#005599">www.google.com</font></a></p>
<p>7. terminate the ./gsmdialer</p>
<p>8. open browser to access <font color="#005599"><a href="http://www.sina.com.cn">www.sina.com.cn</a></font></p>
<p>9. can not acess the webpage</p>
<p>Pass/Fail Criteria:</p>
<p>The network connection is down</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_ftpUpload_GDialer" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP upload</p>
<p>Run Instructions:</p>
<p>1. Connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp; ls /dev/ttyUSB* to get ttyUSB number,if it is ttyUSB2 and ttyUSB0 in /dev/ then run # ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp; then modem connect to network</p>
<p><font size="2">4. run command <span lang="EN-US"># route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;open FTP tool filezilla</p>
<p>7.&nbsp;upload a 1M file to the FTP server ( the server is <span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; color: rgb(31,73,125); font-size: 10.5pt" lang="EN-US"><a href="ftp://ftp.intel.com">ftp.intel.com</a><font size="+0">)</font></span></p>
<p>&nbsp;</p>
<p>Pass/Fail Criteria:</p>
<p>The file can be uploaded successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_ftpDownload_GDialer" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP download</p>
<p>Run Instructions:</p>
<p>1. Connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;run ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp;then modem connect to network</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;open FTP tool filezilla to connect FTP server (<a href="ftp://ftp.kernel.org">ftp.kernel.org</a>)</p>
<p>7&nbsp;download a 1M file</p>
<p>Pass/Fail Criteria:</p>
<p>The FTP download is successful</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_WebSurf_MakeCall" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test&nbsp;make call&nbsp;after PPP connection is created</p>
<p>Run Instructions:</p>
<p>1.&nbsp;Connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;run ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp;then modem connect to network</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;open browser to launch <a href="http://www.google.com">www.google.com</a></p>
<p>7.&nbsp;Dial &quot;10010&quot; from the phone</p>
<p>Pass/Fail Criteria:</p>
<p>&nbsp;We can make call and view webpage at the same time</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_ModemDisconn" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test modeom disconnect</p>
<p>Run Instructions:</p>
<p>1. connect PC with Modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;run ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp;then modem connect to network</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;press ping <a href="http://www.google.com">www.google.com</a> in command screen wo check the network is connected successfully</p>
<p>7.&nbsp;disconnect Modem with PC</p>
<p>8. Check the&nbsp;information&nbsp;in the&nbsp;terminal</p>
<p>Pass/Fail Criteria:</p>
<p>There is message &quot; the network is unreachable&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_parammodem001" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test Wrong modem parameter ( The modem control port and Modem port&nbsp; does not exist)</p>
<p>Run Instructions:</p>
<p>1) Connect PC with Modeom device</p>
<p>2) run <br />
# ./gsmdial -n /dev/00 -m /dev/11 -c 1 -a cmnet -l</p>
<p>/dev/00 is the wrong device number, so you should get a wrong of fail report</p>
<p>&nbsp;</p>
<p>&nbsp;Pass/Fail Criteria:</p>
<p>There is wrong inforamtion hint about the control and modem</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_parammodem002" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test Wrong modem parameter ( The modem control port and Modem port exists)</p>
<p>Run Instructions:</p>
<p>1) Connect PC with Modem device</p>
<p>2) run ./gsmdial -n /dev/ttyUSB3 -m /dev/ttyUSB4 -c 1 -a cmnet -l</p>
<p>Pass/Fail Criteria:</p>
<p>There is wrong inforamtion hint about the control and modem</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_parammodem003" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test PPP CID &nbsp;parameter</p>
<p>Run Instructions:</p>
<p>1. connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;run ./gsmdial -n /dev/ttyUSB2 -m /dev/tty USB0 -c 2&nbsp; -a cmnet -l</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;Ping <a href="http://www.google.com">www.google.com</a></p>
<p>Pass/Fail Criteria:</p>
<p>It is successful to ping the website</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_parammodem004" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test PPP&nbsp;APN parameter</p>
<p>Run Instructions:</p>
<p>1 connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;run ./gsmdial -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c&nbsp;1 -a cmwap -l</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;ping <a href="http://www.google.com">www.google.com</a> to check the modem is connect to network</p>
<p>Pass/Fail Criteria:</p>
<p>The network connection is successful</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_parammodem005" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test PPP username&amp;password parameter</p>
<p>Run Instructions:</p>
<p>1. connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;input ./gsmdial -n /dev/ttyUSB2&nbsp; -m /dev/ttyUSB0 -c 1 -a cmnet -l -u 12345 -w 12345</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>2) input ./gsmdial -n /dev/ttyUSB2&nbsp; -m /dev/ttyUSB0 -c 1 -a cmnet -l -u 12345 -w 12345</p>
<p>3) type ping <a href="http://www.google.com">www.google.com</a></p>
<p>Pass/Fail Criteria:</p>
<p>The modem is connected to network. The username and password will not be checked in PPP server</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_ftp_download_BigFile" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP Download big file 40M size file</p>
<p>Run Instructions:</p>
<p>1. Connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;run ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp;then modem connect to network</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;open FTP tool filezilla</p>
<p>7.&nbsp;download a 40M file&nbsp;from the FTP server ( the server is <span style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt" lang="EN-US"><font color="#005599"><a href="ftp://ftp.kernel.org">ftp.kernel.org</a></font><font size="+0">)</font></span></p>
<p>Pass/Fail Criteria:</p>
<p>file can be download sucessfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_connection_stability" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test connection stability</p>
<p>Run Instructions:</p>
<p>1. Connect PC with modem</p>
<p>2. Go to /ofono/gatchat</p>
<p>3.&nbsp;run ./gsmdialer -n /dev/ttyUSB2 -m /dev/ttyUSB0 -c 1 -a cmnet -l&nbsp;&nbsp;then modem connect to network</p>
<p><font size="2">4. run command <span lang="EN-US">route add default dev ppp0</span></font></p>
<p><span lang="EN-US"><font size="2">5. <span lang="EN-US">edit /etc/resolve.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial"><font size="2">nameserver 211.136.112.50 and</font> <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font size="2">nameserver 211.136.20.203</font></span></font></span></span></font></span></p>
<p>6.&nbsp;open FTP tool filezilla</p>
<p>7.&nbsp;upload&nbsp;serval &nbsp;files&nbsp;to &nbsp;the FTP server ( the server is <span style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt" lang="EN-US"><font color="#005599"><a href="ftp://ftp.intel.com">ftp.intel.com</a></font><font size="+0">)</font></span></p>
<p><span style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt" lang="EN-US"><font color="#000000" size="+0">8. open brower to view webpage</font></span></p>
<p><span style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt" lang="EN-US"><font color="#000000" size="+0">9. Keep the GPRS data trasnfer for about 1 hour to check&nbsp; the connection stability</font></span></p>
<p>Pass/Fail Criteria:</p>
<p>The connection is stable</p>]]></description>
</case>

<case name="oFn_ppp_connecion" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Use ofono PPP module to test PPP connection</p>
<p>Run Instructions:</p>
<p>1.Plug in HuaWei 1152 modem ( Ofono PPP support huawei 1152 modem)</p>
<p>2. run ofono -nd &quot;*&quot; to check the ofono has got the modem information</p>
<p>3. under ./ofono/test to run ./list-modem</p>
<p>4.list modem [/1234567890ABCDEF]</p>
<p>5. run ./enable-modem /1234567890ABCDEF</p>
<p>6.run &nbsp;./create-context cmnet</p>
<p>7. run ./active-context</p>
<p>8. run ./list-context to check the IP address</p>
<p>9. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">10. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">11. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>12. ping <a href="http://www.google.com">www.google.com</a> to check if the network connection is setup</p>
<p>Pass/Fail Criteria:</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><font size="2"><span lang="EN-US"><span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US"><font face="Arial"><span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US">The ppp network connection has setup</span></font></span></span></font></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p>&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_AccessWeb" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test acess webpage&nbsp;when using&nbsp;OFONO PPP module to connect network</p>
<p>Run Instructions:</p>
<p>1.Plug in HuaWei 1152 modem ( Ofono PPP support huawei 1152 modem)</p>
<p>2. run ofono -nd &quot;*&quot; to check the ofono has got the modem information</p>
<p>3. under ./ofono/test to run ./list-modem</p>
<p>4.list modem [/1234567890ABCDEF]</p>
<p>5. run ./enable-modem /1234567890ABCDEF</p>
<p>6.run &nbsp;./create-context cmnet</p>
<p>7. run ./active-context</p>
<p>8. run ./list-context to check the IP address</p>
<p>9. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">10. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">11. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>12. open browser to access <a href="http://www.google.com">www.google.com</a> and <a href="http://www.sina.com">www.sina.com</a> for ten minutes</p>
<p>Pass/Fail Criteria:</p>
<p>user can access webpage when PPP network connection is created</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_modem_plugInOut" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test ofono modem mangment by pluging in and pluging out the modem</p>
<p>Run Instructions:</p>
<p>1) run ./ofonod -nd &quot;*&quot;</p>
<p>2) plug in the Huiawei 1152 modem</p>
<p>3) check the ofonod log and there is message about the modem plug in</p>
<p>4) plug out the modem</p>
<p>5) check the ofonod log and there is message about the modem remove</p>
<p>6) repeate plug in /out for 5 times to check the ofono stablity</p>
<p>Pass/Fail Criteria:</p>
<p>The ofono can find the modem when it plug in and remove it when it plug out</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_ftpUpload" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP upload function when PPP connection is created by ofono</p>
<p>Run Instructions:</p>
<p>1.Plug in HuaWei 1152 modem (Or HuaWei E160G modem, Ofono PPP support huawei 1152 modem and huawei E160G modem)</p>
<p>2. run <br />
# ofono -nd &quot;*&quot; <br />
to check the ofono has got the modem information</p>
<p>3. under ./ofono/test to run # ./list-modem</p>
<p>4.list modem [/1234567890ABCDEF]</p>
<p>5. run # ./enable-modem /1234567890ABCDEF</p>
<p>6.run &nbsp; # ./create-context cmnet</p>
<p>7. run # ./active-context</p>
<p>8. run # ./list-context to check the IP address</p>
<p>9. run # ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">10. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">11. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>12. open Filezilla to connect to <a href="ftp://ftp.intel.com">ftp.intel.com</a>&nbsp;to open</p>
<p>13. upload a 1M file to the ftp server incoming folder</p>
<p>Pass/Fail Criteria:</p>
<p>The file can been uploaded to ftp server</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ppp_ftpDownload" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Test ftp download</p>
<p>Run Instructions:</p>
<p>1.Plug in HuaWei 1152 modem ( Ofono PPP support huawei 1152 modem)</p>
<p>2. run ofono -nd &quot;*&quot; to check the ofono has got the modem information</p>
<p>3. under ./ofono/test to run ./list-modem</p>
<p>4.list modem [/1234567890ABCDEF]</p>
<p>5. run ./enable-modem /1234567890ABCDEF</p>
<p>6.run &nbsp;./create-context cmnet</p>
<p>7. run ./active-context</p>
<p>8. run ./list-context to check the IP address</p>
<p>9. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">10. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">11. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>12. open Filezilla to connect to <a href="ftp://ftp.kernel.org">ftp.kernel.org</a></p>
<p>13. download a &nbsp;file&nbsp;from the ftp server</p>
<p>Pass/Fail Criteria:</p>
<p>The file download successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="radio_setting" description="&lt;p&gt;1, it need specail modem to test this feature&lt;/p&gt;
&lt;p&gt;2, option modem would be a good one&lt;/p&gt;
&lt;p&gt;3,also it dpended on the network for setting,eg: gsm, umts, lte.&lt;/p&gt; 
">

<case name="oFn_radioS_get_properties" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Get radio properties</p>
<p>Run Instructions:1, plug in modem and power on</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, Get current radio properties</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-radio properteis</p>
<p>Pass/Fail Criteria: user can find raido properties and the value will be one of gsm, umts, lte and any&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_radioS_set_gsm" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Set gsm radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set gsm properties</p>
<p>./test-radio set gsm</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is gsm</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_radioS_set_umts" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Set&nbsp;umts radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set&nbsp;umts properties</p>
<p>./test-radio set umts</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is umts</p>]]></description>
</case>

<case name="oFn_radioS_set_any" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:Set any radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set&nbsp;any radio&nbsp;properties</p>
<p>./test-radio set any</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is any</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="satk" description=" 
">
<set name="display_text" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command is used to display text on screen. A high priority is available, to replace anything else on screen (except in case of an emergency call, call presentation or call establishment). The text can be cleared by user or after the expiration of a time-out value (no answer from user). This timer value can be specified in the pro active SIM command&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="select_item" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command makes it possible for the SIM to send a list of items to be displayed by ME and&amp;nbsp;ask the user to select one of these items. A list item is defined by a specific Id number and an associated text to be displayed.&lt;/span&gt;&lt;/p&gt; 
">

<case name="oFn_stk_item_alpha" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<span lang="EN-US" style="font-size: 12pt; font-family: &quot;Times New Roman&quot;">Select Item command with an AlphaID (text used a list title)</span></p>
<p>Run Instructions:1, lanuch phonesim</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, go to sim application then click the start button</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, launch ./test-stk-menu script</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4, enter 5</p>
<p>Pass/Fail Criteria: there were 3 icon item: basic icon, color icon, bad icon</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_stk_item_empty_id" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p><font face="Times New Roman"><font size="2">Purpose:<span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">Select Item command with an empty AlphaID (text used a list title)</span></font></font></p>
<p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">Edit simapplication.cpp file:</span></font></font></p>
<p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">Edit sendIconSEMenu()</span></font></font></p>
<p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">change the code as cmd.setTitle( &quot;&quot;);</span></font></font></p>
<p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">compile and install again: make, make install</span></font></font></p>
<p><font face="Times New Roman" size="2">Run Instructions:1, lanuch phonesim</font></p>
<p><font face="Times New Roman" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, go to sim application then click the start button</font></p>
<p><font face="Times New Roman" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, launch ./test-stk-menu script</font></p>
<p><font face="Times New Roman" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4, enter 6</font></p>
<p><font face="Times New Roman" size="2">Pass/Fail Criteria: the Item title is empty and there were 3 icon item: basic icon, color icon, bad icon</font></p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_stk_item_default_id" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体">Description <o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体">Purpose:Select Item command with an default item id</font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体">Edit simapplication.cpp file:<o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体">Edit sendIconSEMenu()<o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt">&nbsp;</p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">Add cmd.setDefaultItem (2);</font></o:p><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体">compile and install again: make, make install<o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体">Run Instructions:1, lanuch phonesim<o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>2, go to sim application then click the start button<o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>3, launch ./test-stk-menu script<o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>4, enter 6<o:p></o:p></font></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><o:p><font face="宋体">&nbsp;</font></o:p></span></p>
<p class="MsoPlainText" style="margin: 0cm 0cm 0pt"><span lang="EN-US" style="color: black"><font face="宋体">Pass/Fail Criteria:&nbsp;the default item id is 1&nbsp;and there were 3 icon item: basic icon, color icon, bad icon<o:p></o:p></font></span></p>
<p>&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_stk_item_invalid_default_id" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>
<table class="simple">
    <tbody>
        <tr>
            <td class="bold" colspan="2">Description</td>
        </tr>
        <tr>
            <td colspan="2">
            <p><font face="Times New Roman"><font size="2">Purpose:<span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">Select Item command with an empty AlphaID (text used a list title)</span></font></font></p>
            <p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">Edit simapplication.cpp file:</span></font></font></p>
            <p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">Edit sendIconSEMenu()</span></font></font></p>
            <p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">add cmd.setDefaultItem( 6);</span></font></font></p>
            <p>&nbsp;</p>
            <p><font face="Times New Roman"><font size="2"><span lang="EN-US" style="font-size: 12pt; font-family: 'Times New Roman'">compile and install again: make, make install</span></font></font></p>
            <p><font face="Times New Roman" size="2">Run Instructions:1, lanuch phonesim</font></p>
            <p><font face="Times New Roman" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, go to sim application then click the start button</font></p>
            <p><font face="Times New Roman" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, launch ./test-stk-menu script</font></p>
            <p><font face="Times New Roman" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4, enter 6</font></p>
            <p><font face="Times New Roman" size="2">Pass/Fail Criteria: <span lang="EN-US" style="font-size: 12pt; font-family: &quot;Times New Roman&quot;">The default item is ignored, the first item of the list is selected in UI</span></font></p>
            </td>
        </tr>
    </tbody>
</table>
</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="launguage_notification" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command sends to the ME the current language used in the SIM devices for displaying text. It may be used in ME to avoid mixed of language for example in case of Display Text commands&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="tone" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;&lt;font face=&quot;Arial&quot; size=&quot;2&quot;&gt;Play of a standard supervisory tone Required with an &amp;ldquo;Alpha identifier&amp;rdquo; provided and with a &amp;ldquo;Duration&amp;rdquo; longer enough for the display&lt;/font&gt;&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="send_dtmf" description="&lt;p&gt;&lt;font size=&quot;2&quot;&gt;&lt;font face=&quot;Arial&quot;&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command&lt;span style=&quot;mso-spacerun: yes&quot;&gt;&amp;nbsp; &lt;/span&gt;Requireds the ME to send a DTMF string after a call has been successfully established, either by the proactive command SET UP CALL or by the user. It is independent of sending DTMF within the set up call.&lt;/span&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Swiss 721&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA; mso-bidi-font-family: 'Times New Roman'&quot;&gt; The DTMF digits must not be played locally to the user by ME.&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt; 
">
</set>
<set name="get_input" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;&lt;font face=&quot;Arial&quot;&gt;&lt;font size=&quot;2&quot;&gt;This command Requireds the ME to display text and/or an icon,&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;The characters entered by user can be masked (then a star * character can be displayed instead) according to the &lt;font face=&quot;Arial&quot; size=&quot;2&quot;&gt;command qualifier byte (see the following command detail byte specification). The response length can be any value between 0x00 and 0xFF&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="get_inkey" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Swiss 721&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA; mso-bidi-font-family: 'Times New Roman'&quot;&gt;&lt;font face=&quot;Times New Roman&quot;&gt;&lt;font face=&quot;Arial&quot; size=&quot;2&quot;&gt;This command sends text to be displayed and Requireds a single character answer in return. It is intended to allow a dialogue between the SIM and the user, particularly for selecting an option from the menu,&amp;nbsp;the character entered is not displayed (a * character can however be echoed on screen), and cannot be changed, the character is directly&lt;/font&gt; &lt;/font&gt;&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="send_sms" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command Requireds the terminal equipment to send a Short Message.&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="send_ss" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command makes it possible for the SIM to Required ME to send a SS string.&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="send_ussd" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command makes it possible for the SIM to Required ME to send a ussd string.&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="setup_menu" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command makes it possible for the SIM to Required ME to set up a menu item&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="launch_browser" description="&lt;p&gt;&lt;span lang=&quot;EN-US&quot; style=&quot;font-size: 12pt; font-family: &amp;quot;Times New Roman&amp;quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: #0400; mso-bidi-language: AR-SA&quot;&gt;This command makes it possible for the SIM to Required ME to launch browser&lt;/span&gt;&lt;/p&gt; 
">
</set>
<set name="timer" description=" 
">
</set>
<set name="Idle_text" description=" 
">
</set>
<set name="event_list" description=" 
">
</set>
<set name="menu_selection" description=" 
">
</set>
<set name="refresh" description=" 
">
</set>
<set name="location_update" description=" 
">
</set>
</set>
<set name="modem" description=" 
">

<case name="oFn_modem_model" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check model information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there should be the model information of modem</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_model.sh</step>
</case>

<case name="oFn_modem_enable_2modem" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Enable two modem<br />
Run Instructions:<br />
<br />
1, plugin modem <br />
2, modify /etc/ofono/modem.conf<br />
file to enable phonesim<br />
uncomment phonesim line<br />
3, enable modem<br />
./test-modem poweron<br />
4, launch phonesim <br />
Pass/Fail Criteria:<br />
<br />
you will see two modem log information in ofonod, you should see phonesim application also</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_modem_enable_phonesim" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Enable phonesim modem<br />
Run Instructions:<br />
<br />
1, launch phonesim<br />
pathto/phonesim -p 12345 -gui /usr/share/phonesim/default.xml.<br />
2, modify /etc/ofono/modem.conf<br />
file to enable phonesim<br />
uncomment phonesim line<br />
3, type [root@xx] ofonod -nd '*' <br />
4, power modem<br />
./test-modem poweron<br />
Pass/Fail Criteria:<br />
<br />
you will see phonesim application</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_modem_serial" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
check modem serial information<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
modem serial information will be showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_serial.sh</step>
</case>

<case name="oFn_modem_PowerStatus" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Check power status information of Modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
2, check power status<br />
[root@xx]# ./test-modem properties<br />
<br />
Pass/Fail Criteria:<br />
there is power status: true or false</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_power.sh</step>
</case>

<case name="oFn_modem_poweron" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
power on modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
<br />
Pass/Fail Criteria:<br />
power on can work correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_poweron.sh</step>
</case>

<case name="oFn_modem_poweroff" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
power off modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
2, power off modem<br />
[root@xx]# ./test-modem poweroff<br />
3,poweron modem again<br />
[root@xx]# ./test-modem poweron<br />
Pass/Fail Criteria:<br />
poweron/off can work correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_poweroff.sh</step>
</case>

<case name="oFn_modem_manufacturer" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check manufacturer information of modem<br />
Run Instructions:<br />
<br />
1, plug in the modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ././test-modem properties<br />
3, check the output of script<br />
Pass/Fail Criteria:<br />
<br />
there will be manufacture information of modem in your output</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_manufacture.sh</step>
</case>

<case name="oFn_modem_interface" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check interface information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there is the interface information of modem</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_interface.sh</step>
</case>

<case name="oFn_modem_revision" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check revision information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there should be the revision information of modem</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_revision.sh</step>
</case>

<case name="oFn_modem_OnlineStatus" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose: Get online status</p>
<p>Run Instructions:</p>
<p>1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
modem&nbsp;online status&nbsp;will be showed correctly</p>
<p>Pass/Fail Criteria:</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_modem_online.sh</step>
</case>

<case name="oFn_modem_plug_unplug" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
plugin/plug out Modem<br />
Run Instructions:<br />
<br />
1, plug in modem <br />
2. plug out modem<br />
3. repeat steps1-2 for several times<br />
4, check the ofono log<br />
Pass/Fail Criteria:<br />
<br />
no abnormal message in ofono log when plugin/out modem</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="modem_emulator" description="&lt;p&gt;precondition:&lt;/p&gt;
&lt;p&gt;1, launch test server which will simulate the atserver.&amp;nbsp; You will get the serial port information like /dev/pts/5&lt;/p&gt;
&lt;p&gt;2, modify the minicom configration:&amp;nbsp; set serail port as /dev/pts/5&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
">

<case name="oFn_ModemEmu_QueryS3" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S3<br />
Run Instructions:<br />
<br />
1, In minicom terminal window, enter: AT <br />
if return OK , run below steps <br />
enter: atS3 ?<br />
2, check the default value<br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, 13</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryS3s" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S3 scope<br />
Run Instructions:<br />
<br />
1,  In minicom terminal window, enter: AT <br />
if return OK , run below steps <br />
Enter atS3=?<br />
2, wait the response <br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, S3: (0-127)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_SetS3" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set S3<br />
Run Instructions:<br />
<br />
1, Enter atS3=32</p>
<p>so you need&nbsp;type space key after input at command<br />
2,Enter atS3=13 [space]<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, can input the at command normally</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryS4" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S4<br />
Run Instructions:<br />
<br />
1, In minicom terminal window, enter: AT <br />
If return OK, then run below steps<br />
Enter atS4 ? <br />
2, check the default value<br />
<br />
Pass/Fail Criteria:<br />
1, &quot;ATS4 ?&quot; command will return: OK<br />
2, 10</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryS4s" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S4 scope<br />
Run Instructions:<br />
<br />
1, Enter atS4=?<br />
2, wait the response <br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, S4: (0-127)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_SetS4" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set S4<br />
Run Instructions:<br />
<br />
1, Enter atS4=33<br />
2,Enter atS4=10 [space]<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, will show !&nbsp; <br />
2, step2 will show OK</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryS5" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S5<br />
Run Instructions:<br />
<br />
1, Enter atS5 ?<br />
2, check the default value<br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, 8</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryS5s" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S5 scope<br />
Run Instructions:<br />
<br />
1, Enter atS5=?<br />
2, wait the response <br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, S5: (0-127)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_SetS5" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set S5<br />
Run Instructions:<br />
<br />
1, Enter atS5=33<br />
2,Enter atS5=10<br />
3, check respose<br />
<br />
Pass/Fail Criteria:</p>
<p>There is response to tell user the setting is successful</p>
<p>&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryE" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query E<br />
Run Instructions:<br />
<br />
1, Enter atE=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, E: (0-1)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_SetE0" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set E0<br />
Run Instructions:<br />
<br />
1, Enter atE0<br />
2, Enter at<br />
3, check respose<br />
4, Enter atE1<br />
5,Enter at<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, can not see user input after step2<br />
3, will see usr input at command</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_Query&amp;D" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;D<br />
Run Instructions:<br />
<br />
1, Enter at&amp;D=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, &amp;D:(0-2)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_Query&amp;D0" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;D0<br />
Run Instructions:<br />
<br />
1, Enter at&amp;D0<br />
2, Enter at&amp;D2<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1,  OK</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_Query&amp;C" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;C<br />
Run Instructions:<br />
<br />
1, Enter at&amp;C=?<br />
1, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, &amp;C: (0-1)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_Query&amp;C1" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;C1<br />
Run Instructions:<br />
<br />
1, Enter at&amp;C0<br />
2, Enter at&amp;C1<br />
3, Enter at&amp;C2<br />
4, check respose<br />
<br />
Pass/Fail Criteria:<br />
1,  OK in step 1,2<br />
2, ERROR in step 3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryX" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query X<br />
Run Instructions:<br />
<br />
1, Enter atX=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, X: (1-4)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryX1" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query X1<br />
Run Instructions:<br />
<br />
1, Enter atX1<br />
2, Enter atX2<br />
3, Enter atX3<br />
4, Enter atX4<br />
5,Enter atX5<br />
6, check respose<br />
<br />
Pass/Fail Criteria:<br />
1,  OK in step 1-4<br />
2, ERROR in step 5</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryV" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query V<br />
Run Instructions:<br />
<br />
1, Enter atV=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, V:(0-1)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryV0" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query V0<br />
Run Instructions:<br />
<br />
1, Enter atV0<br />
2, Enter atV1<br />
3, Enter atV2<br />
4, check respose<br />
<br />
Pass/Fail Criteria:<br />
1,  0 in step 1<br />
2, OK in step2<br />
3, ERROR in step3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_QueryV1" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Query V1<br />
Run Instructions:<br />
<br />
1, Enter atV0<br />
2, Enter atV2<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1,&nbsp;0 <br />
2, 4 in step2</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_ConcatenatingCmd" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Concatenating commands<br />
Run Instructions:<br />
1, Enter at+CFUN=1<br />
2, Enter at+CGREG? <br />
Enter at+CFUN?<br />
3,check respose<br />
<br />
Pass/Fail Criteria:<br />
There are two response:<br />
+CGREG: 0,4<br />
+CFUN: 4</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_neg_s3" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check&nbsp;other value of S3 <br />
Run Instructions:<br />
<br />
1, Enter atS3=32</p>
<p>so you need&nbsp;type space key after input at command<br />
2,Enter&nbsp;[space]<br />
3, check respose<br />
4, repeat 2,3&nbsp; three times</p>
<p>5, Enter at [space]</p>
<p><br />
Pass/Fail Criteria:<br />
1,&nbsp;it will response OK at step 5&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_neg_nat" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:check non at command</p>
<p>Run Instructions:</p>
<p>1, Enter non at command eg: bcde</p>
<p>2, check response</p>
<p>Pass/Fail Criteria:Basically it should return Error or no any response</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_ModemEmu_neg_s5" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:check s5 command functional</p>
<p>Run Instructions:1, Enter atS5?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, Enter at</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, press backspace to remove the input</p>
<p>Pass/Fail Criteria:user can erase the the input&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="ss_setting" description=" 
">

<case name="oFn_SS_set_CF_timeout" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CF Voice call timeout<br />
Run Instructions:<br />
1, Set timeout value of voice call by UI<br />
or[root@xx]# ./test-ss-setting timeout 30<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The CF value is set</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cf_timeout.sh</step>
</case>

<case name="oFn_SS_CB_disable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CB disable all<br />
Run Instructions:<br />
1, Set disable all CB value by UI<br />
or [root@xx]# ./test-call-barring disableall 3579<br />
2, Check the output of script<br />
Pass/Fail Criteria:<br />
No error report</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_disall.sh</step>
</case>

<case name="oFn_SS_HideCallerID_disable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
set HideCallerId disabled<br />
Run Instructions:<br />
1, enable HideCallerId<br />
[root@xx]# ./test-ss-setting HideCallerId disabled<br />
2, Check whether the value is disabled<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
HideCallerId is disabled successfully</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cs_dis_callid.sh</step>
</case>

<case name="oFn_SS_HideCallerID_enalbe" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CS caller ID<br />
Run Instructions:<br />
1, Set caller ID by UI<br />
or [root@xx]# ./test-ss-setting HideCallerId enabled/disabled<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The hidecallerid are enabled/disabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_enable_callid.sh</step>
</case>

<case name="oFn_SS_set_CFNRc" manual="false" timeout="90" type="Functional" insignificant="false" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice not reachable<br />
Run Instructions:<br />
1, Set voice not reachable call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceNotReachable [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cf_not_reach.sh</step>
</case>

<case name="oFn_SS_set_CFU" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice unconditional<br />
Run Instructions:<br />
1, Set voice unconditional call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceUnconditional [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cf_uncon.sh</step>
</case>

<case name="oFn_SS_set_CFNRy" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice no reply<br />
Run Instructions:<br />
1, Set voice no reply call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceNoReply [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cf_noreply.sh</step>
</case>

<case name="oFn_SS_set_CFB" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice busy<br />
Run Instructions:<br />
1, Set voice busy call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceBusy [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cf_busy.sh</step>
</case>

<case name="oFn_SS_CW_enable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CW voice call<br />
Run Instructions:<br />
1, Set call waiting for voice call CB value by UI<br />
or [root@xx]# ./test-ss-setting VoiceCallWaiting enabled/disabled<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The voice call waiting value are enabled/disabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cw_enable.sh</step>
</case>

<case name="oFn_SS_CW_disable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
CW VoiceCallWaiting disabled<br />
Run Instructions:<br />
1, Set call waiting for voice call CB value <br />
[root@xx]# ./test-ss-setting VoiceCallWaiting disabled<br />
2, Check whether the value is set<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
VoiceCallWaiting is disabled successfully</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cw_disable.sh</step>
</case>

<case name="oFn_SS_BAIC_enable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceIncoming<br />
Run Instructions:<br />
1, Set VoiceIncoming CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceIncoming always 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice incoming call value are enabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_incoming.sh</step>
</case>

<case name="oFn_SS_BAIC_disable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceIncoming disable<br />
Run Instructions:<br />
1, Set VoiceIncoming CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceIncoming disable 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice incoming call value are disabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_dis_inc.sh</step>
</case>

<case name="oFn_SS_BAIC_roam_enable" manual="false" timeout="90" type="Functional" insignificant="false" level="Component">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceIncoming when romaing<br />
Run Instructions:<br />
1, Set VoiceIncoming CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceIncoming whenromaing 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All when roaming Voice incoming call value are enabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_in_roaming.sh</step>
</case>

<case name="oFn_SS_BOIC_enable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing international<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing international 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice international outgoing call value are enabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_out_in.sh</step>
</case>

<case name="oFn_SS_BOIC_exHC_enable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing internationalnothome<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing internationalnothome 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice international no home outgoing call value are enabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_out_nh.sh</step>
</case>

<case name="oFn_SS_BAOC_enable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing all<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing all 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice outgoing call value are enabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_out.sh</step>
</case>

<case name="oFn_SS_BAOC_disable" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing disabled<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing disable 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice outgoing call value are disabled</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_set_cb_dis_out.sh</step>
</case>
</set>
<set name="sim_file" description=" 
">

<case name="oFn_sim_get_phonebook" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
get phonebook of ME<br />
Run Instructions:<br />
<br />
1, change phonebook in /usr/share/phonesim/default.xml file<br />
: &lt;phonebook name=&quot;ME&quot; size=&quot;150&quot;&gt;<br />
3, read the phonebook<br />
./test-phonebook .<br />
Pass/Fail Criteria:<br />
<br />
all the record can be read correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_phonebook_ucs2" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
UCS2 character set in phonebook<br />
Run Instructions:<br />
1, set character set as UCS2: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;UCS2&quot;<br />
2, create a record with UCS2 char in name of this record<br />
3, read phonebook<br />
Pass/Fail Criteria:<br />
the record should be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_phonebook_gsm" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
GSM character set in Phonebook<br />
Run Instructions:<br />
1, set character set as GSM: modify the phonesim data file /usr/share/phonesim/default.xml: set name=&quot;SCS&quot; value=&quot;GSM&quot;<br />
2,create a record with GSM char in name of record<br />
3, read phonebook<br />
Pass/Fail Criteria:<br />
the record should be read and with Vcard3.1 format</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_get_LanguageList" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get language list<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2, get supported language list <br />
./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
there was Preferredlanguages list: eg: en, de, it..</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_get_lag.sh</step>
</case>

<case name="oFn_sim_usim_MO" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
USIM/outgoing call<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2,  setup a outgoing call  <br />
./test-simple-voicecall dial [number]<br />
Pass/Fail Criteria:<br />
this outgoingcall can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_usim_Sendsms" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
USIM/sms<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2,  send a message  <br />
./test-sms send [number] [content]<br />
Pass/Fail Criteria:<br />
this message can be received at peer side</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_read_usim_records" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
USIM/phonebook<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2,  read sim card phonebook  <br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
all records can be read successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_get_card_id" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get card ID<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card ID information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
there is CardIdentifier information, eg: CardIdentifier=89492220744451242066</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_get_card_id.sh</step>
</case>

<case name="oFn_sim_get_mcc" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get MCC code<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card MCC information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is MCC information, eg: MCC=460</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_get_mcc.sh</step>
</case>

<case name="oFn_sim_get_mnc" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get MNC code<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card MNC information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is MNC information, eg: MNC=01</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_get_mnc.sh</step>
</case>

<case name="oFn_sim_get_ExistInfo" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get sim exist information<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card exist information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is the information, eg: present=1</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_exist.sh</step>
</case>

<case name="oFo_sim_get_pin_status" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get Pin code status<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get Pin code information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is pin code status information, eg: PinRequired = none</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_get_pin_status.sh</step>
</case>

<case name="oFn_sim_enter_pin" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Input pin code<br />
Run Instructions:<br />
1. change the pin code configuration first (modify the pin value= SIM PIN of default.xml)<br />
2, enter pin code<br />
./test-sim enterpin 2468<br />
3 check the phonesim log<br />
.<br />
Pass/Fail Criteria:<br />
user can input pin code</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_enter_pin.sh</step>
</case>

<case name="oFn_sim_change_pin" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
sim lock: changing pin code<br />
Run Instructions:<br />
1, change pin code<br />
./test-sim changepin 2468 1234 .<br />
Pass/Fail Criteria:<br />
pin code can be changed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_change_pin.sh</step>
</case>

<case name="oFn_sim_reset_pin" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
reset pin<br />
Run Instructions:<br />
1. change the pin code configuration first (modify the pinname value= SIM PUK of default.xml)<br />
2, enter pin code<br />
./test-sim resetpin 13243546 2468 .<br />
Pass/Fail Criteria:<br />
user can reset pin</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_reset_pin.sh</step>
</case>

<case name="oFn_sim_phonebook_SpecialChar" manual="true" timeout="90" type="Functional" insignificant="false" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
special char in sim Phonebook<br />
Run Instructions:<br />
(real network)<br />
1,create a record in sim phonesim (with special char eg:&quot;*&quot;,&quot;B&quot;,&quot;#&quot; in number of record)<br />
Pass/Fail Criteria:<br />
the record can be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_lock_pin" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
enable pin<br />
Run Instructions:<br />
1, lock pin code<br />
./test-sim lockpin pin(1234)<br />
Pass/Fail Criteria:<br />
user can lock pin code</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_lock_pin.sh</step>
</case>

<case name="oFn_sim_phonebook_LongChar" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
long char in sim Phonebook<br />
Run Instructions:<br />
(real network)<br />
1, create a record in sim phonebook (more than 75 chars in name field)<br />
Pass/Fail Criteria:<br />
the record can be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_unlock_pin" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
disable pin code<br />
Run Instructions:<br />
1, unlock pin code<br />
./test-sim unlockpin pin(1234)<br />
Pass/Fail Criteria:<br />
user can unlock pin code</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_unlock_pin.sh</step>
</case>

<case name="oFn_sim_read_msisdn" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get msisdn number<br />
Run Instructions:<br />
1, read imsi number in sim card<br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
<br />
SubscriberNumbers information can be read correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_read_msisdn.sh</step>
</case>

<case name="oFn_sim_set_msisdn" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Set msisdn number<br />
Run Instructions:<br />
1, set msisdn number<br />
./test-sim set [number]<br />
Pass/Fail Criteria:<br />
1. msisdn number can be set correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_set_msisdn.sh</step>
</case>

<case name="oFn_sim_update_msisdn" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
get updated msisdn number<br />
Run Instructions:<br />
1, launch monitor<br />
./test-monitor-telephony<br />
2, set msisdn number<br />
./test-sim set [number]<br />
3, read updated msisdn number<br />
./test-sim properties<br />
.<br />
Pass/Fail Criteria:<br />
<br />
SubscriberNumbers number updated can be read correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_get_update_msisdn.sh</step>
</case>

<case name="oFn_sim_read_imsi" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
get imsi number<br />
Run Instructions:<br />
1, read imsi number in sim card<br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
<br />
SubscriberIdentity information can be read correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_read_imsi.sh</step>
</case>

<case name="oFn_sim_get_sdn" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Get SDN number of sim file<br />
Run Instructions:<br />
1, Get SDN number <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
Will see all sdn information: e.g. name is Polic and number is 997</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_get_sdn.sh</step>
</case>

<case name="oFn_sim_read_UCS2_Record" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
get UCS2 record of sim card phonebook<br />
Run Instructions:<br />
<br />
1. create a record with Chinese name in SIM card phonebook<br />
2. read the record <br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
this record can be read and showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_read_ucs2.sh</step>
</case>

<case name="oFn_sim_record_withSameName" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
two records with same name in sim phonebook<br />
Run Instructions:<br />
1. create two records with same name in sim phonesim<br />
2, read these two records with same name <br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
the two record with same name can be read, eg: two records with name Chuck Woodbury</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_sim_read_all_records" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Read sim card phonebook<br />
Run Instructions:<br />
<br />
1, read all phonebook record from SIM card<br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
All record can be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_sim_read_pb.sh</step>
</case>

<case name="oFn_sim_SDN_WrongFormat" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
wrong format of sdn<br />
Run Instructions:<br />
(with simulator)<br />
1,Put sdn with wrong format in default.xml of phonesim,&nbsp;eg:&nbsp;</p>
<p>Edit Efsdn file and add &quot; 2E 43 72 65 64 69 74 20 6C 65 66 74 FF FF<br />
&nbsp;&nbsp;&nbsp; 04 FF 1A 52 FB FF FF FF FF FF FF FF FF FF<br />
&quot;&nbsp;<br />
2, reboot phonesim<br />
3, run ./test-sim properties<br />
Pass/Fail Criteria:<br />
should not find your input information in the output of script</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="networking" description="&lt;p&gt;oFono cases for networking feature&lt;/p&gt; 
">

<case name="oFn_NW_scan" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Scan network<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, scan available [root@xx]# ./test-network scan<br />
Pass/Fail Criteria:<br />
all available network will be showed</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_scan.sh</step>
</case>

<case name="oFn_NW_mode" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Check the mode of network<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the mode of network<br />
[root@xx]# ./test-network networkinfo<br />
Pass/Fail Criteria:<br />
the mode information of network will be showed, e.g. auto, off, manual</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_mode.sh</step>
</case>

<case name="oFn_NW_NetworkStatus" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Check the status of network<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the status of network<br />
[root@xx]# ./test-network networinfo<br />
Pass/Fail Criteria:<br />
network status information will be showed, e.g. &quot;registered&quot;</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_status.sh</step>
</case>

<case name="oFn_NW_OperatorStatus" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Check the status of operator<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the status information of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
status information of operator will be showed, e.g. current, available, forbidden</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_op_status.sh</step>
</case>

<case name="oFn_NW_register" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Register the default network<br />
Run Instructions:<br />
1, power on modem <br />
2, registered to default network<br />
[root@xx]# ./test-network register<br />
Pass/Fail Criteria:<br />
it will register the modem to default network</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_register.sh</step>
</case>

<case name="oFn_NW_deregister" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Deregister  from network<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, deregister the modem from the default network<br />
[root@xx]# ./test-network unregister<br />
Pass/Fail Criteria:<br />
there is the at command infor in phonesim AT log: AT+COPS=2</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="oFn_NW_register_ChosenOperator" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
Register device to chosen operator's network<br />
Run Instructions:<br />
<br />
1, select avaliable network<br />
[root@xx]# ./test-network networkinfo<br />
2, select one avaliable operator<br />
3, register to the chosen operator<br />
[root@xx]# ./test-network register [operator path]<br />
Pass/Fail Criteria:<br />
modem will register to the chosen operator</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_reg_chosen_op.sh</step>
</case>

<case name="oFn_NW_mcc_mnc" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check MCC and MNC<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the MCC,MNC information<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
3 digital MCC code and 2 MNC code information will be showed correctly</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_mcc_mnc.sh</step>
</case>

<case name="oFn_NW_OperatorName" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check the name of operator<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the name of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
name of operator will be showed if it supported, e.g. T-Moblin etc.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_op_name.sh</step>
</case>

<case name="oFn_NW_OperatorTechnology" manual="false" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check Operator technology information<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the technology information of network<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
technology information of network will be showed, e.g. GSM, UMTS etc.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_net_op_tech.sh</step>
</case>

<case name="oFn_NW_change_RSSI" manual="true" timeout="90" type="Functional" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check RSSI of network<br />
Run Instructions:<br />
<br />
1, adjust the signal strength value in phonesim<br />
2, check the changed RSSI value<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
RSSI value should be changed after step1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
</suite>
</testdefinition>