<?xml version="1.0" encoding="UTF-8"?>
<testdefinition version="1.0">
<description></description>
<suite name="mcts-ofono-tests">
<set name="Basic Feature Test" description="&lt;p&gt;Test set which is designed based on features in featurezilla, and is used to verify features&lt;/p&gt;">

<case name="Phonesim_oFn_sms_RecvSeveralCB" manual="true" timeout="90" requirement="4380" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive several cell broadcast messages</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 23.041 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Receive several cell broadcast messages</p>
<p>Pass/Fail criteria: <br />
All cell broadcast messages should be received successfully</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="PhoneSim_oFn_sms_MultiPages_Combination" manual="true" timeout="90" requirement="4606" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify Mutli-pages Cell Broadcast Message (CB) is not concatained if pages has been received in different cells</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phone Sim. Phone radio is ON.<br />
Geographical scope for CBS is &quot;cell-wide&quot;</p>
<p>Run instructions:<br />
1. Send to the device a multi-pages CB<br />
2. Change several time of cells during the reception of the CB</p>
<p>Pass/Fail criteria:<br />
CB should not be concatained</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_sms_RecvMultiPagesCB" manual="true" timeout="90" requirement="4380" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a multi-pages cell broadcast message</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 23.038 &amp; 23.041 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Receive one multi-pages cell broadcast message (CBS with more than 186 characters)</p>
<p>Pass/Fail criteria: <br />
Cell broadcast multi-pages (3) message should be received successfully</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_sms_RecvCBMsg" manual="true" timeout="90" requirement="4380" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a cell broadcast message</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 23.041 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Receive one cell broadcast message</p>
<p>Pass/Fail criteria: <br />
Cell broadcast message should be received successfully</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_sms_RecvCBMsg_7bits" manual="true" timeout="90" requirement="4380" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a cell broadcast message witch data coding scheme is 7-bit</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 23.041 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Receive one cell broadcast message witch data coding scheme is 7-bit</p>
<p>Pass/Fail criteria: <br />
Cell broadcast message should be received and displayed successfully</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_sms_RecvCBMsg_8bits" manual="true" timeout="90" requirement="4380" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a cell broadcast message witch data coding scheme is 8-bit</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 23.041 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Receive one cell broadcast message witch data coding scheme is 8-bit</p>
<p>Pass/Fail criteria: <br />
Cell broadcast message should be received and displayed successfully</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_sms_RecvCBMsg_UCS2" manual="true" timeout="90" requirement="4603" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a cell broadcast message witch data coding scheme is UCS2</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 23.041 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Receive one cell broadcast message witch data coding scheme is UCS2</p>
<p>Pass/Fail criteria: <br />
Cell broadcast message should be received and displayed successfully</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="PhoneSim_oFn_sms_InterruptedMultiPages" manual="true" timeout="90" requirement="4607" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify Mutli-pages Cell Broadcast Message (CB) can be concatained even if its reception has been interrupted with another multi-pages CB</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phone Sim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send to the device two different multi-pages CB at the same</p>
<p>Pass/Fail criteria:<br />
2 CB should be received</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="PhoneSim_oFn_sms_RecvMsg_DiffCells" manual="true" timeout="90" requirement="4605" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify Cell Broadcast Message (CB) is concatained in one message even if its pages have been received in different cells</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send to the device a multi-pages CB<br />
2. Change several time of cells during the reception of the CB</p>
<p>Pass/Fail criteria:<br />
CB should be received in one message when the last page is received</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_BDN" manual="true" timeout="90" requirement="4471" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial an emergency call when barring all outgoing call is enabled</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card).&nbsp; Phone radio is ON.<br />
Barring of all outgoing call is enabled.</p>
<p>Run instructions:<br />
1. Dial a standard phone number (Unable to dial it because barring all outgoing call is enabled)<br />
2. Dial an emergency call (e.g. 112)</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_PINAsked" manual="true" timeout="90" requirement="4471" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial an emergency call when PIN Code is asked</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is inserted in the device, PIN Code is activated</p>
<p>Run instructions:<br />
1. Turn ON the phone radio (PIN Code is asked)<br />
2. Dial emergency call (e.g. 112)</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_PINblocked" manual="true" timeout="90" requirement="4471" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial an emergency call when PIN Code is blocked</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is inserted in the device, 3 wrong PIN Code have been entered</p>
<p>Run instructions:<br />
1. Turn ON the phone radio (PUK Code is asked)<br />
2. Dial emergency call (e.g. 112)</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_PUKblocked" manual="true" timeout="90" requirement="4471" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial an emergency call when PUK Code is blocked</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is inserted in the device, 10 wrong PUK Code have been entered</p>
<p>Run instructions:<br />
1. Turn ON the phone radio (PUK Code is blocked)<br />
2. Dial emergency call (e.g. 112)</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_deviceLocked" manual="true" timeout="90" requirement="4471" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial an emergency call when device is locked</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is inserted in the device, device is locked</p>
<p>Run instructions:<br />
1. Turn ON the device (Device code is asked)<br />
2. Dial emergency call (e.g. 112)</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_FDNActivated" manual="true" timeout="90" requirement="4471" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial an emergency call when Fixed Dialing Number (FDN) service ia enabled</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is inserted in the device, FDN is enabled. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial emergency call (e.g. 112)</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_ForbNetwork" manual="true" timeout="90" requirement="4471" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial an emergency call when device is registered to a forbidden network</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is inserted in the device, device is registered to a forbidden network (e.g. Orange SIM Card is currently registered to SFR network). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial emergency call (e.g. 112)</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_sosNum_withoutEfecc" manual="true" timeout="90" requirement="7949" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check emergency numbers list when SIM has no Elementary File - Emergency Call Code (EFECC) or has no emergency numbers in its EFECC</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card which has no EFECC file or has no emergency numbers in its EFECC file is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Check emergency numbers list</p>
<p>Pass/Fail criteria: <br />
Only default Emergency numbers should be provided: 112, 911</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_sosNum_withoutEfecc_DialEmergCall" manual="true" timeout="90" requirement="7949" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial emergency call when SIM has no Elementary File - Emergency Call Code (EFECC) or has no emergency numbers in its EFECC</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card which has no EFECC file or has no emergency numbers in its EFECC file is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial emergency call</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_with_simcard" manual="false" timeout="90" requirement="7949" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial emergency call when SIM is inserted in the device</p>
<p>Method: N/A</p>
<p>References:&nbsp;3GPP 22.101 Spec.</p>
<p>Pre/Post-conditions: Sim card is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial emergency call*</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Check 112, 911 and all numbers stored in FEecc file of inserted SIM Card are recognized as emergency number.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_call_sos.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_EmergCall_without_simcard" manual="true" timeout="90" requirement="7950" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial emergency call when SIM is not inserted in the device</p>
<p>Method: N/A</p>
<p>References:&nbsp;3GPP 22.101 Spec.</p>
<p>Pre/Post-conditions: No Sim card is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial emergency call*</p>
<p>Pass/Fail criteria: <br />
Emergency call should be dialed</p>
<p>Check 112, 911, 119, 118, 999, 110, 08 and 000 are recognized as emergency number.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_call_sos.sh</p>
<p>Change history (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_get_sosNum_SIM" manual="true" timeout="90" requirement="7949" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check emergency numbers of the SIM card</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Check emergency numbers of the SIM</p>
<p>Pass/Fail criteria: <br />
Emergency numbers of the SIM should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_EmergCall_get_sosNum_Modem" manual="false" timeout="90" requirement="7950" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check emergency numbers of the modem</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Sim card is not inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Check emergency numbers of the modem</p>
<p>Pass/Fail criteria: <br />
Emergency numbers of the modem should be provided: 112, 911, 119, 118, 999, 110, 08, 000</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_emergency_list.sh (to be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_aoc_get_Currency" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Retrieve currency value set in Advice of Charge settings</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Get currency value</p>
<p>Pass/Fail criteria: Currency value should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_get_PricePerUnit" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Retrieve price per unit value set in Advice of Charge settings</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Get price per unit value</p>
<p>Pass/Fail criteria: Price per unit value should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_get_CM" manual="false" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Retrieve call meter value of Advice of Charge service</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Get call meter value</p>
<p>Pass/Fail criteria: Call meter value should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_get_aoc_cm.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-ofono-tests/ofono_get_aoc_cm.sh</step>
</case>

<case name="RealNetwork_oFn_aoc_get_ACM" manual="false" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Retrieve accumulated call meter value of Advice of Charge service</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Get call meter value</p>
<p>Pass/Fail criteria: Accumulated call meter value should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_get_aoc_properties.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_aoc_get_ACM_maximum" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Retrieve maximum accumulated call meter value set in Advice of Charge settings</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Get Maximum Accumulated Call Meter value</p>
<p>Pass/Fail criteria: Maximum Accumulated Call Meter value should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_set_ACM_maximum" manual="false" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Set accumulated call meter maximum value of Advice of Charge service</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Set accumulated call meter maximum value<br />
2. Enter PIN2 code<br />
3. Check accumulated call meter maximum value</p>
<p>Pass/Fail criteria: Accumulated call meter maximum value should have been updated by value entered at step 1</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_aoc_acmm.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_aoc_set_currency" manual="false" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Set currency of Advice of Charge service</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Set currency<br />
2. Enter PIN2 code<br />
3. Check currency</p>
<p>Pass/Fail criteria: Currency should have been updated by setting entered at step 1</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_aoc_currency.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_aoc_set_PricePerUnit" manual="false" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Set price per unit of Advice of Charge service</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Set price per unit<br />
2. Enter PIN2 code<br />
3. Check price per unit</p>
<p>Pass/Fail criteria: Price per unit should have been updated by setting entered at step 1</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_aoc_ppu.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_aoc_reset" manual="false" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Reset call meter and accumulated call meter values of Advice of Charge service</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Reset Advice of Charge values<br />
2. Enter PIN2 code<br />
3. Check Advice of Charge values</p>
<p>Pass/Fail criteria: Call meter and accumulated call meter values should have been reset</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_aoc_reset.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_aoc_dial_EmCall" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify emergency calls do not update the Advice of Charge values (because this call is free)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial an emergency call<br />
2. Wait for the call is accepted<br />
3. Several seconds after step 2, release the call</p>
<p>Pass/Fail criteria: Call meter and Accumulated call meter should not be updated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_dial_Voicemail" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify voicemail calls do not update the Advice of Charge values (because this call is free)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial your voicemail center<br />
2. Wait for the call is accepted<br />
3. Several seconds after step 2, release the call</p>
<p>Pass/Fail criteria: Call meter and Accumulated call meter should not be updated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_dial_call" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify dialing a normal call updates the Advice of Charge values</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card)<br />
3rd party phone is available (Phone A). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial Phone A<br />
2. Phone A: Accept the call<br />
3. Several seconds after step 2, release the call</p>
<p>Pass/Fail criteria: Call meter and Accumulated call meter should be updated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_rcv_call" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify receiving a call does not update the Advice of Charge values</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card)<br />
3rd party phone is available (Phone A). Phone radio is ON</p>
<p>Run instructions:<br />
1. Phone A: Call the device<br />
2. Device: Accept the call<br />
3. Several seconds after step 2, release the call</p>
<p>Pass/Fail criteria: Call meter and Accumulated call meter should not be updated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_dial_roam_call" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify dialing a call in roaming updates the Advice of Charge values</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card)<br />
Network is registered in roaming mode. Phone radio is ON<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Call phone A<br />
2. Phone A: Accept the call<br />
3. Several seconds after step 2, release the call</p>
<p>Pass/Fail criteria: Call meter and Accumulated call meter should be updated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_aoc_rcv_roam_call" manual="true" timeout="90" requirement="4415" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify receiving a call in roaming updates the Advice of Charge values</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.024 spec.</p>
<p>Pre/Post-conditions: SIM which supports Advice of Charge services is inserted (e.g.: O2 UK SIM Card)<br />
Network is registered in roaming mode. Phone radio is ON<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: Call the device<br />
2. Device: Accept the call<br />
3. Several seconds after step 2, release the call</p>
<p>Pass/Fail criteria: Call meter and Accumulated call meter should be updated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_nor_pri" manual="true" timeout="90" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose: <span style="font-family: &quot;Times New Roman&quot;; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp; </span>characters with normal priority</font></span></p>
<p>Run Instructions:1, run ./test-stk script</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, select 0 (news) item</p>
<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, check the correct display</p>
<p>Pass/Fail Criteria: there is the text&quot; Police today arrested a man on suspicion of making phone.....&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_high_pri" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Purpose: <span style="font-family: 'Times New Roman'; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp; </span>characters with high priority</font></span></p>
<p>Run Instructions:1, edit simapplication.cpp in phonesim</p>
<p>edit display text command with high priority&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp; 2,&nbsp;modify the function&nbsp;sendDisplayText(): &nbsp;the setClearAfterDelay(true), setHighPriority(true)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3,&nbsp;run ./test-stk-menu script</p>
<p>&nbsp;&nbsp;&nbsp; 4, select 0 (news)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;5, check the ofonod log and you will find the data like &nbsp;D081C68103012101</p>
<p>&nbsp;&nbsp;&nbsp; 6, check the correct display</p>
<p>Pass/Fail Criteria: there is the data in step 5</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the text &quot;Police today arrested a man on suspicion of making phone.....&quot; is displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_no_timer" manual="true" timeout="90" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose: <span style="font-family: 'Times New Roman'; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp; </span>characters without&nbsp;timer</font></span></p>
<p>Run Instructions:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-stk script</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, select 0 (news) item</p>
<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, check the correct display</p>
<p>Pass/Fail Criteria: there is the text&quot; Police today arrested a man on suspicion of making phone.....&quot;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; check the ofonod log and you will find the data like &nbsp;D081C68103012180</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_timer" manual="true" timeout="90" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose: <span style="font-family: 'Times New Roman'; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp; </span>characters with&nbsp;timer</font></span></p>
<p>Run Instructions:</p>
<p>&nbsp;&nbsp; 1, edit simapplication.cpp in phonesim</p>
<p>&nbsp;&nbsp;&nbsp; 2,&nbsp;modify the function&nbsp;sendDisplayText(): &nbsp;the setClearAfterDelay(true), setHighPriority(true)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3,&nbsp;run ./test-stk-menu script</p>
<p>&nbsp;&nbsp;&nbsp; 4, select 0 (news)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;5, check the ofonod log and you will find the data like &nbsp;D081C68103012101</p>
<p>&nbsp;&nbsp;&nbsp; 6, check the correct display</p>
<p>Pass/Fail Criteria: there is the data in step 5</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the text &quot;Police today arrested a man on suspicion of making phone.....&quot; is displayed</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;the display of text is&nbsp;<span lang="EN-US"><font size="2" face="Helvetica"> cleared after expiration of timer.</font></span></p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_7bit" manual="true" timeout="90" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose: <span style="font-family: 'Times New Roman'; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp; 7bit </span>characters</font></span></p>
<p>Run Instructions: By default, phonesim support the 7 bit</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1, launch the ./test-stk script</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, select 0 (news) item</p>
<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, check the correct display</p>
<p>Pass/Fail Criteria: there is the text&quot; Police today arrested a man on suspicion of making phone.....&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_unpacked" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Purpose: <span style="font-family: 'Times New Roman'; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp; 8bit </span>characters</font></span></p>
<p>Run Instructions:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edit display text command with unpackged format, by default it is 8 bit</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; check the correct display</p>
<p>Pass/Fail Criteria: the display of text is correct on the screen</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_incoming" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Purpose: <span style="font-family: 'Times New Roman'; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp;</span>characters</font></span></p>
<p>Run Instructions:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edit display text command with high priority</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setup a ongoing call&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; send this command</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; check the correct display</p>
<p>Pass/Fail Criteria: can not display the text,</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the response is</p>
<p style="text-align: left; text-indent: -158.4pt; margin: 7.1pt 0cm 0pt 158.4pt" class="txtp1" align="left"><span lang="EN-US"><font size="2" face="Helvetica">Terminal response &ldquo;ME unable to process command, screen busy&rdquo;.</font></span></p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_class0" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Purpose: <span style="font-family: 'Times New Roman'; font-size: 12pt" lang="EN-US"><font size="2" face="Arial">Display text Required composed of<span>&nbsp; </span>[0-240]<span>&nbsp; </span>bytes of<span>&nbsp;</span>characters with normal priority</font></span></p>
<p>Run Instructions:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edit display text command with&nbsp;normal priority</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receive a sms class0 message&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; send this command</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; check the correct display</p>
<p>Pass/Fail Criteria: can not display the text,</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; after class0 message dispear, it will display the text&nbsp;</p>
<p style="text-align: left; text-indent: -158.4pt; margin: 7.1pt 0cm 0pt 158.4pt" class="txtp1" align="left"><span lang="EN-US"><font size="2" face="Helvetica">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Terminal response 0x00</font></span></p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_exttext" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the extension text contained in the DISPLAY TEXT proactive UICC command, and returns a successful result in the TERMINAL RESPONSE command send to the UICC.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.3)</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with extension text is available</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with extenstion text</p>
<p>Pass/Fail criteria:<br />
display of the extension text</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_icon" manual="true" timeout="90">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the icons which are referred to in the contents of the DISPLAY TEXT proactive UICC command, and returns a successful result in the TERMINAL RESPONSE command send to the UICC.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.5)</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with icon is available</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with icon</p>
<p>Pass/Fail criteria:<br />
display of basic icon</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_textat" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the text formatted according to text attribute configuration contained in the DISPLAY TEXT proactive UICC command, and returns a successful result in the TERMINAL RESPONSE command send to the UICC.<br />
Text attributes are: Left Alignment, Center Alignment, Right Alignment, Large Font Size, Small Font Size, Bold On, Italic On, Underline On, Strikethrough On, Foreground and Background Colours.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.8)</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with attribute is available</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with icon</p>
<p>Pass/Fail criteria:<br />
text with its attribute is successfuly display</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_sustext" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the text contained in the DISPLAY TEXT proactive UICC command, <br />
returns a successful result in the TERMINAL RESPONSE command send to the UICC and sustain the display beyond sending the TERMINAL response.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.4)</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display with immediat response text is available</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with immediat response.</p>
<p>Pass/Fail criteria:<br />
display text is display even after &quot;terminal response&quot; CSIM answer.<br />
this terminal response is sent immediatly to modem when &quot;sustained text&quot; is request by user.</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_IR_dispdata" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the text contained in the DISPLAY TEXT proactive UICC command, <br />
returns a successful result in the TERMINAL RESPONSE command send to the UICC and sustain the display beyond sending the TERMINAL response.<br />
another display data occurs.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.4) and ETSI TS 102223 p33.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with immediat response is available, and another display data proactive command</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with immediat response<br />
2. another display data occured</p>
<p>Pass/Fail criteria:<br />
subsequent proactive command received containing display data is display in behalf of previous display text.</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_IR_TO" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the text contained in the DISPLAY TEXT proactive UICC command, <br />
returns a successful result in the TERMINAL RESPONSE command send to the UICC and sustain the display beyond sending the TERMINAL response.<br />
the expiration of the variable display timeout occured</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.4) and ETSI TS 102223 p33.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with immediat response is available with setted variable timeout in the duration object.</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with immediat response<br />
2. the expiration of the variable display timeout occured</p>
<p>Pass/Fail criteria:<br />
display text is dismissed</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_IR_MMI" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the text contained in the DISPLAY TEXT proactive UICC command, <br />
returns a successful result in the TERMINAL RESPONSE command send to the UICC and sustain the display beyond sending the TERMINAL response.<br />
a user MMI action occurs.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.4) and ETSI TS 102223 p33.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with immediat response is available.</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with immediat response<br />
2. a user MMI action occurs</p>
<p>Pass/Fail criteria:<br />
display text is dismissed</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_IR_HP" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the text contained in the DISPLAY TEXT proactive UICC command, <br />
returns a successful result in the TERMINAL RESPONSE command send to the UICC and sustain the display beyond sending the TERMINAL response.<br />
a higher priority event occurs.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.4) and ETSI TS 102223 p33.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with immediat response is available. High priority event is ready to occur (end call for ex.)</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with immediat response<br />
2. a higher priority event occurs</p>
<p>Pass/Fail criteria:<br />
display text is dismissed to be replace by high priority event.</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_digitonly" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: For a gik satk prompt which only accept digits chars, 1 digit chars entered by user should be accepted.</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey function. One of them provides a prompt which accept digit chars only.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with GIK feature<br />
2. Enter &quot;1&quot;<br />
3. valid</p>
<p>Pass/Fail criteria: Entered value is accepted</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history:</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_dis_IR_STO" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Description <br />
Purpose: To verify that the ME displays the text contained in the DISPLAY TEXT proactive UICC command, <br />
returns a successful result in the TERMINAL RESPONSE command send to the UICC and sustain the display beyond sending the TERMINAL response.<br />
expiration of the short delay occurs.</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 31.124 spec.(27.22.4.1.4) and ETSI TS 102223 p33.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Display text with immediat response is available with setted command qualifier.</p>
<p>Run instructions:<br />
1. in SATK Menu, select display text with immediat response<br />
2. expiration of the short delay occurs.</p>
<p>Pass/Fail criteria:<br />
display text is dismissed</p>
<p>Test Environment: Handset device, Phonesim</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_8bitGSM" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: for a gik satk prompt which only accept 8 bit GSM chars, 1 8-bits GSM chars entered by user should be accepted.</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey function. One of them provides a prompt which accept 8 bits GSM chars. User should be able to enter 8 bits chars (i.e. &euro;)</p>
<p>Run instructions:<br />
1. Launch SATK Agent with GIK feature which only accept 8 bits GSM chars<br />
2. Enter one 8 bits chars (i.e. &euro;).<br />
3. valid</p>
<p>Pass/Fail criteria: entered value is accepted as a valid char.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_7bitGSM" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: for a gik satk prompt which accept 7-bit GSM chars, 1 7-bits GSM chars entered by user should be accepted.</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey function. One of them provides a prompt which accept 7 bits GSM chars. (i.e. &euro; cannot be accept) user should be able to enter chars (i.e. a b c d e)</p>
<p>Run instructions:<br />
1. Launch SATK Agent with GIK feature which only accept 7 bits GSM chars<br />
2. Enter one 7 bits chars (a, b, c, d, etc)<br />
3. valid</p>
<p>Pass/Fail criteria: entered value is accepted</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_UCS2" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: for a gik satk prompt which accept UCS2 chars, 1 UCS2 chars entered by user should be accepted.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.4.4.2, Expected Sequence 4.1.</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey function. One of them provides a prompt which accept UCS2 chars (i.e. chinese or russian chars). User should be able to enter these chars. SIM should be able to manage these entries (i.e. beeline, CMCC, etc.)</p>
<p>Run instructions:<br />
1. Launch SATK Agent with GIK feature which only accept UCS2 GSM chars<br />
2. Enter one UCS2 chars<br />
3. valid</p>
<p>Pass/Fail criteria: entered value is accepted</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_help" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: for a satk gik prompt, if a help topic is available, it should be display when request by user.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.7.4.2, Expected Sequence 7.1.</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey function. at least one of them provides a help topic.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with GIK feature which contains help topic.<br />
2. request this help</p>
<p>Pass/Fail criteria: help topic is display succesfully</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_bc_Yes" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: binary choice in gik prompt. &quot;Yes&quot; is rised in component when user choose this option.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.5.4.2, Expected Sequence 5.1.</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey function. One of them provides binary choice.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with GIK feature which contains bc.<br />
2. &quot;Yes&quot; option is used</p>
<p>Pass/Fail criteria: &quot;Yes&quot; option is rised to stk component.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_bc_No" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: binary choice in gik prompt. &quot;No&quot; is rised in component when user choose this option.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.5.4.2, Expected Sequence 5.1.</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey functions. one of them provide binary choice.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with GIK feature which contains bc.<br />
2. &quot;No&quot; option is used</p>
<p>Pass/Fail criteria: &quot;No&quot; option is rised to stk component.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_back" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: An satk prompt is up. User makes a &quot;Back&quot; action</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.1.4.2, Expected Sequence 1.3.</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey functions.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with any GIK feature.<br />
2. &quot;Back&quot; action is used</p>
<p>Pass/Fail criteria: a &quot;back&quot; notif should be return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_end" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: An satk prompt is up. User makes an &quot;End&quot; action</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey functions.&nbsp; A defined &quot;End&quot; Key.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with any GIK feature.<br />
2. &quot;End&quot; action is performed</p>
<p>Pass/Fail criteria: an &quot;End&quot; notif should be return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_noUsrResponse" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text contained in the GET INKEY proactive UICC command, and returns a &quot;No response from user&quot; result value in the TERMINAL RESPONSE command send to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.2.4.2, Expected Sequence 2.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.<br />
The ME screen shall be in its normal stand-by display.<br />
ME Manufacturers shall set the &quot;no response from user&quot; period of time as declared in table A.2/2.<br />
The USIM Simulator shall be set to that period of time.</p>
<p><br />
Run instructions:<br />
1. Launch SATK Agent with any GET INKEY prompt.<br />
2. time out is reach</p>
<p>Pass/Fail criteria: a &quot;No user response&quot; notif is send to SATK agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_VariableTO" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text contained in the GET INKEY proactive UICC command, and returns the text string entered in the TERMINAL RESPONSE command sent to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.8.4.2, Expected Sequence 8.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with any GET INKEY prompt.<br />
2. time out is reach</p>
<p>Pass/Fail criteria: a &quot;No user response&quot; notif is send to SATK agent. (?)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_IconDisp" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the Icon contained in the GET INKEY proactive UICC command, and returns the text string entered in the TERMINAL RESPONSE command sent to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.6.4.2, Expected Sequence 6.1A.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INKEY containing a basic icon.</p>
<p>Pass/Fail criteria: icon is succesfully display</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gik_TxtAtrib" manual="true" timeout="90" requirement="4487" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text formatted according to the left alignment text attribute configuration contained in the GET INKEY proactive UICC command, and returns the text string entered in the TERMINAL RESPONSE command sent to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.2.9.1.4.2, Expected Sequence 9.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INKEY prompt containing a text with &quot;left alignement&quot; attribute.</p>
<p>Pass/Fail criteria: text is succesfully displayed and aligned to the left border of UI.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_fix_lng" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: Get Input Required of a fixed length string;minimum length = maximum length = 3</p>
<p>Method: N/A</p>
<p>References: none found</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
A get input SATK prompt exist with fix lenght required field (a mandatory amount of chars is required to valid prompt)</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing an entry with fix amount of chars is displayed.<br />
2. user input the required amount of chars</p>
<p>Pass/Fail criteria: user's data is succesfully return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_digitonly" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: this Get input requires digital chars input only. Positive case: entered digits are succesfully rised to SATK agent.</p>
<p>Method: N/A</p>
<p>References: none found</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
A get input SATK prompt exist withdigits only required field (i.e. phone number, zip code, birth date)</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing a field entry with digits only chars.<br />
2. user input the required chars</p>
<p>Pass/Fail criteria: user's data is succesfully return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_digit_GSM" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text in GSM format contained in the GET INPUT proactive UICC command, and returns the digit text in GSM format text string entered in the TERMINAL RESPONSE command sent to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.3.5.4.2, Expected Sequence 5.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.<br />
The ME screen shall be in its normal stand-by display.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing a field entry with GSM chars.<br />
2. user input the digits required chars</p>
<p>Pass/Fail criteria: user's data is succesfully return to SATK Agent in GSM format.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_7bitGSM" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: this Get input requires digital chars input only. Positive case: entered digits are succesfully rised to SATK agent.</p>
<p>Method: N/A</p>
<p>References: none found</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
A get input SATK prompt exist withdigits only required field (i.e. phone number, zip code, birth date)</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing a field entry with digits only chars.<br />
2. user input the required chars</p>
<p>Pass/Fail criteria: user's data is succesfully return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_8bitGSM" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text contained in the GET INPUT proactive UICC command, and returns the text string entered in the TERMINAL RESPONSE command sent to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.3.5.4.2, Expected Sequence 5.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.<br />
The ME screen shall be in its normal stand-by display.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing a field entry with 8-bits only chars.<br />
2. user input the required chars</p>
<p>Pass/Fail criteria: user's data is succesfully return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_UCS2" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text contained in the GET INPUT proactive UICC command, and returns the text string entered in the TERMINAL RESPONSE command sent to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.3.9.4.2, Expected Sequence 9.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.<br />
The ME screen shall be in its normal stand-by display.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing a field entry with UCS2 chars.<br />
2. user input the required chars</p>
<p>Pass/Fail criteria: user's data is succesfully return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_help" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text contained in the GET INPUT proactive UICC command, and returns a 'help information required by the user' result value in the TERMINAL RESPONSE command sent to the UICC if the user has indicated the need to get help information.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.3.7.4.2, Expected Sequence 7.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing a help topic.<br />
2. user request help topic</p>
<p>Pass/Fail criteria: request is succesfully rised to SATK agent. Help topic is succesfully returned to user.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_hide" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text contained in the GET INPUT proactive UICC command, and returns the text string entered in the TERMINAL RESPONSE command sent to the UICC.<br />
entered chars by user are hidden (i.e. passwords, pin, etc.)</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.3.1.4.2, Expected Sequence 1.4.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.<br />
The ME screen shall be in its normal stand-by display.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT prompt containing a field entry for password.<br />
2. user input chars, then valid.</p>
<p>Pass/Fail criteria: entered chars are hidden. user's data is succesfully return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_back" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: An satk prompt is up. User makes a &quot;Back&quot; action</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.3.1.4.2, Expected Sequence 1.6.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with any GIK feature.<br />
2. &quot;Back&quot; action is used</p>
<p>Pass/Fail criteria: a &quot;back&quot; notif should be return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_end" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: An satk prompt is up. User makes an &quot;End&quot; action</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM whith SATK get inkey functions.&nbsp; A defined &quot;End&quot; Key.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with any GIK feature.<br />
2. &quot;End&quot; action is performed</p>
<p>Pass/Fail criteria: an &quot;End&quot; notif should be return to SATK Agent.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_gip_noUsrResponse" manual="true" timeout="90" requirement="4488" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME displays the text contained in the GET INPUT proactive UICC command, and returns a &quot;No response from user&quot; result value in the TERMINAL RESPONSE command send to the UICC.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.3.2.4.2, Expected Sequence 2.1.</p>
<p>Pre/Post-conditions: The ME is connected to the USIM Simulator.<br />
The elementary files are coded as Toolkit default.<br />
Prior to this test the ME shall have been powered on and performed the PROFILE DOWNLOAD procedure.<br />
The ME screen shall be in its normal stand-by display.<br />
ME Manufacturers shall set the &quot;no response from user&quot; period of time as declared in table A.2/3.<br />
The USIM Simulator shall be set to that period of time.</p>
<p>Run instructions:<br />
1. Launch SATK Agent with a GET INPUT whch prompt any UI.<br />
2. user does not enter nothing</p>
<p>Pass/Fail criteria: after setted period of time, SATK agent should recieve a &quot;no response from user&quot; notif.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_dial" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):to be defined</p>
<p>Method: N/A</p>
<p>References: to be defined</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition + add particular setup</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User request tones provided by interface</p>
<p>Pass/Fail criteria:<br />
SATK Agent succesfully recieves requested tones<br />
TE maybe play or not tones depending on how SATK Agent is set.<br />
SATK Agent sends to UICC, the requested tones to play</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_busy" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):to be defined</p>
<p>Method: N/A</p>
<p>References: to be defined</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition + add particular setup</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User set device to recieve notif from network.<br />
3. UICC sends a &quot;busy&quot; status to SATK Agent.</p>
<p>Pass/Fail criteria:<br />
SATK Agent should recieve &quot;Busy&quot; notif<br />
SATK Agent should send &quot;busy&quot; status to TE<br />
Depending on TE settings: &quot;busy&quot; status maybe played.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_beep" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):to be defined</p>
<p>Method: N/A</p>
<p>References: to be defined</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition + add particular setup</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User request beep play tone</p>
<p>Pass/Fail criteria:<br />
SATK Agent sends request to UICC<br />
depending on TZ settings, requested &quot;beep&quot; is played.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_default" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):to be defined</p>
<p>Method: N/A</p>
<p>References: to be defined</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User requests default playtone</p>
<p>Pass/Fail criteria:<br />
SATK Agent should recieve user request.<br />
appropriate notif should be generate from SATK Agent to make play default keytone</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_alphaId" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):to be defined</p>
<p>Method: N/A</p>
<p>References: to be defined</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition + add particular setup</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User request for a PLAY TONE action containing Alpha as Id</p>
<p>Pass/Fail criteria: <br />
SATK Agent should recieve user request.<br />
appropriate notif should be generate from SATK Agent to make play requested Play tone<br />
appropriate playtone should be played</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_alphaIdNull" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory): SATK Agent should be able to handle playtone request with Null Id.</p>
<p>Method: N/A</p>
<p>References: For coding, see ETSI TS 102 384 [26] in subclause 27.22.4.5.1.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User performs a request for a playtone but with a null id</p>
<p>Pass/Fail criteria:<br />
SATK Agent succesfully recieves notif<br />
SATK Agent sends appropriate notif to make run playtone. Default playtone should be play.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_NoAlphaId" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory): playtone request without alpha id is handle succesfully</p>
<p>Method: N/A</p>
<p>References: For coding, see ETSI TS 102 384 [26] in subclause 27.22.4.5.1.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User request a playtone but no alpha identifier is present</p>
<p>Pass/Fail criteria:<br />
SATK Agent succesfully recieves notif.<br />
SATK agent send appropriat command to play playtone. Default Palytone should be play.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_end" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory): User is able to use an &quot;end&quot; button (depending on how system is design, this button is different of the &quot;back&quot; one, it terminates SATK session) during a playtone session. SATK Agent must behave correctly.</p>
<p>Method: N/A</p>
<p>References: For coding, see ETSI TS 102 384 [26] in subclause 27.22.4.5.1.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. a playtone ( a bit long to permit interruption) is played.<br />
3. user perform an &quot;end&quot; action.</p>
<p>Pass/Fail criteria:<br />
SATK Agent recieve the &quot;end notif&quot;. SATK agent sends &quot;end&quot; command to UICC. playtone stops.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_playtone_inCall" manual="true" timeout="90" requirement="4489" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory): able to play PlayTone during a call</p>
<p>Method: N/A</p>
<p>References: to be defined</p>
<p>Pre/Post-conditions: See G&eacute;n&eacute;rale pr&eacute;condition.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. Establish ny active call<br />
3. User performs any play tone</p>
<p>Pass/Fail criteria:<br />
SATK Agent succesfully recieves request<br />
SATK send appropriate notif to play requested playtone. Recipient can ear playtone.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_rfs_sr" manual="true" timeout="90" requirement="4490" type="Functional positive">
	<description><![CDATA[<p>Purpose: To be notified of the changes to the SIM configuration that have occurred as the result of a SIM reset</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
SIM Reset activity is monitored</p>
<p>Run instructions:<br />
1. Do a SIM reset</p>
<p>Pass/Fail criteria:<br />
Refresh notification should occurs</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_rfs_fcn" manual="true" timeout="90" requirement="4490" type="Functional positive">
	<description><![CDATA[<p>Purpose: To be notified of the changes to the SIM configuration that have occurred as the result of a SIM File Change</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
SIM File Change activity is monitored</p>
<p>Run instructions:<br />
1. Do a SIM File Change (one EFs file has been changed)</p>
<p>Pass/Fail criteria:<br />
Refresh notification should occurs</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_rfs_si" manual="true" timeout="90" requirement="4490" type="Functional positive">
	<description><![CDATA[<p>Purpose: To be notified of the changes to the SIM configuration that have occurred as the result of a SIM Initialization</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
SIM File Change activity is monitored</p>
<p>Run instructions:<br />
1. Do a SIM Initialization</p>
<p>Pass/Fail criteria:<br />
Refresh notification should occurs</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_rfs_sifcn" manual="true" timeout="90" requirement="4490" type="Functional positive">
	<description><![CDATA[<p>Purpose: To be notified of the changes to the SIM configuration that have occurred as the result of a SIM Initialization and a SIM File Change</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
SIM Initialization and SIM File Change activities are monitored</p>
<p>Run instructions:<br />
1. Do a SIM File Change (one EFs file has been changed) and a SIM Initialization</p>
<p>Pass/Fail criteria:<br />
Refresh notification should occurs</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_rfs_siFullfcn" manual="true" timeout="90" requirement="4490" type="Functional positive">
	<description><![CDATA[<p>Purpose: To be notified of the changes to the SIM configuration that have occurred as the result of a SIM Initialization and a SIM File Change</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
SIM Initialization and SIM File Change activities are monitored</p>
<p>Run instructions:<br />
1. Do a SIM Full File Change (several EFs files have been changed) and a SIM Initialization</p>
<p>Pass/Fail criteria:<br />
Refresh command should occurs</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_menu_AlphaID" manual="true" timeout="90" requirement="4491" type="Functional positive">
	<description><![CDATA[<p>Purpose: Display a Setup Menu which contains an Alpha ID</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Menu is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch Setup Menu</p>
<p>Pass/Fail criteria:<br />
Alpha Identifier should act as a title for the list of menu items</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_menu_IconID" manual="true" timeout="90" requirement="4491" type="Functional positive">
	<description><![CDATA[<p>Purpose: Display a Setup Menu which contains an Icon ID</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Menu is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch Setup Menu</p>
<p>Pass/Fail criteria:<br />
Icon Identifier should act as a title for the list of menu items</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_menu_help" manual="true" timeout="90" requirement="4491" type="Functional positive">
	<description><![CDATA[<p>Purpose: Display a Setup Menu which contains a help</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Menu is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch Setup Menu<br />
2. Request help</p>
<p>Pass/Fail criteria:<br />
Help should be given</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_menu_next" manual="true" timeout="90" requirement="4491" type="Functional positive">
	<description><![CDATA[<p>Purpose: Select an item in the Setup Menu and go forward</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Menu is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch Setup Menu<br />
2. Select an item from the list<br />
3. Go to the next screen</p>
<p>Pass/Fail criteria:<br />
Next screen should be available according to the item selected at step 2</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_alpha" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Display Select item list which has an alpha identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Select item with an Alpha identifier as items title is displayed</p>
<p>Run instructions:<br />
1. Check the title for the list of items</p>
<p>Pass/Fail criteria:<br />
Alpha identifier should be correctly displayed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_icon" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Display Select item list which has an icon identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Select item with an icon identifier as items title is displayed</p>
<p>Run instructions:<br />
1. Check the title for the list of items</p>
<p>Pass/Fail criteria:<br />
Icon identifier should be correctly displayed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_default_id" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Display Select item list which has a default item pre-selected</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Select item which has a default ID is displayed</p>
<p>Run instructions:<br />
1. Check the list of items</p>
<p>Pass/Fail criteria:<br />
Default item should be pre-selected</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_end" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Terminate the proactive SIM session</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Select item list is displayed</p>
<p>Run instructions:<br />
1. End the proactive SIM session</p>
<p>Pass/Fail criteria:<br />
SIM session should be ended</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_back" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Go back from the select item list</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Select item list is displayed</p>
<p>Run instructions:<br />
1. Go back from the select item list</p>
<p>Pass/Fail criteria:<br />
Previous screen should be displayed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_previous_id" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Display Select item list which has the previous item pre-selected</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.<br />
Select item which has a default ID is displayed</p>
<p>Run instructions:<br />
1. Select an item other than the default one<br />
2. Go back to the select item list</p>
<p>Pass/Fail criteria:<br />
Previous item should be pre-selected</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_noUsrResponse" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify when no response is given by the user, Select item list should be ended</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Select item which has a timeout is displayed</p>
<p>Run instructions:<br />
1. Do nothing until timeout occurs (No user response)</p>
<p>Pass/Fail criteria:<br />
Select item list should be ended</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_item_help" manual="true" timeout="90" requirement="4492" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify help can be given to the user from a Select item list</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.<br />
Select item which has a help available</p>
<p>Run instructions:<br />
1. Request help</p>
<p>Pass/Fail criteria:<br />
Help should be given</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_SendSMS_7bitGSM" manual="true" timeout="90" requirement="4493" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send SMS which contains 7bit characters</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send SMS in 7bit data coding scheme containing several characters</p>
<p>Pass/Fail criteria:<br />
Send SMS containing 7bit characters is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_SendSMS_8bitGSM" manual="true" timeout="90" requirement="4493" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send SMS which contains 8bit characters</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send SMS in 8bit data coding scheme containing several characters</p>
<p>Pass/Fail criteria:<br />
Send SMS containing 8bit characters is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_SendSMS_UCS2" manual="true" timeout="90" requirement="4493" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send SMS which contains UCS2 characters</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send SMS in 16bit data coding scheme containing several characters</p>
<p>Pass/Fail criteria:<br />
Send SMS containing UCS2 characters is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_SendSMS_AlphaID" manual="true" timeout="90" requirement="4493" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send SMS which contains an Alpha identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send SMS which contains an Alpha identifier</p>
<p>Pass/Fail criteria:<br />
Alpha identifier should be used to inform the user that a SMS is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_SendSMS_NullAlphaID" manual="true" timeout="90" requirement="4493" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send SMS which contains a null Alpha identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send SMS which contains a null Alpha identifier</p>
<p>Pass/Fail criteria:<br />
User should not be informed that a SMS is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_SendSMS_NoAlphaID" manual="true" timeout="90" requirement="4493" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send SMS which contains no Alpha identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send SMS which contains no Alpha identifier</p>
<p>Pass/Fail criteria:<br />
User should be informed by the mobile equipment that a SMS is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_ss_AlphaID" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory): Sends SS which contains an alpha identifier</p>
<p>Method: N/A</p>
<p>References: see section 27.22.4.11.1 &quot;Send SS normal&quot; section 1,5 of 3GPP 31124 - 940 document.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User sends SS which contains an alpha identifier</p>
<p>Pass/Fail criteria: <br />
SATK Agentsuccesfully send request<br />
SATK succesfully answer from UICC<br />
Alpha identifier is used to inform the user that a SS is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_ss_icon" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Sends SS which contains a basic icon</p>
<p>Method: N/A</p>
<p>References: see section 27.22.4.11.2 &quot;Send SS (icon upport)&quot; of 3GPP 31124 - 940 document.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User performs an SS code to retrieve a basic icon</p>
<p>Pass/Fail criteria: <br />
SATK Agentsuccesfully send request<br />
SATK succesfully answer from UICC<br />
SATK displays icon.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_ss_NullAlphaID" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Sends SS which contains an null alpha identifier</p>
<p>Method: N/A</p>
<p>References: see section 27.22.4.11.1 &quot;Send SS normal&quot; section 1,6 A&amp;B of 3GPP 31124 - 940 document.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User sends SS which contains a null alpha identifier</p>
<p>Pass/Fail criteria: <br />
SATK Agentsuccesfully send request<br />
SATK succesfully answer from UICC<br />
SATK does not display anything</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_ss_NoAlphaID" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Sends SS which does not contain an alpha identifier</p>
<p>Method: N/A</p>
<p>References: see section 27.22.4.11.1 &quot;Send SS normal&quot; section 1,6 A&amp;B of 3GPP 31124 - 940 document.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User sends SS which contains no alpha identifier</p>
<p>Pass/Fail criteria: <br />
SATK Agent succesfully send request<br />
SATK succesfully answer from UICC<br />
ME displays that SS is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_ussd_AlphaID" manual="true" timeout="90" requirement="4495" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send USSD which contains an Alpha identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send USSD which contains an Alpha identifier</p>
<p>Pass/Fail criteria:<br />
Alpha identifier should be used to inform the user that a USSD is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_ussd_NullAlphaID" manual="true" timeout="90" requirement="4495" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send USSD which contains a null Alpha identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send USSD which contains a null Alpha identifier</p>
<p>Pass/Fail criteria:<br />
User should not be informed that a USSD is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_ussd_NoAlphaID" manual="true" timeout="90" requirement="4495" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send USSD which contains no Alpha identifier</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send USSD which contains no Alpha identifier</p>
<p>Pass/Fail criteria:<br />
User should be informed by the mobile equipment that a USSD is sent</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_stk_ussd_end" manual="true" timeout="90" requirement="4495" type="Functional positive">
	<description><![CDATA[<p>Purpose: End Send USSD proactive command</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Send USSD<br />
2. End the sending</p>
<p>Pass/Fail criteria:<br />
Send USSD proactive command is ended by the user</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_noOtherCall" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verifiy doing a Setup Call can't be done if other call is active (Type 1)<br />
<br />
Method: N/A<br />
<br />
References: 3GPP TS 11.14 spec.<br />
<br />
Pre/Post-conditions: SIM which supports Setup Call proactive command (Type 1) is inserted in the device. Phone radio is ON.<br />
Phone A is available<br />
<br />
Run instructions:<br />
1. Call Phone A<br />
2. Phone A: accept the call<br />
3. Do a setup call<br />
<br />
Pass/Fail criteria:<br />
Setup call should not be done<br />
<br />
Test Environment: Handset device <br />
<br />
Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_holdOtherCall" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify doing a Setup Call put all other call in hold (Type 2)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command (Type 2) is inserted in the device. Phone radio is ON.<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Call Phone A<br />
2. Phone A: accept the call<br />
3. Do a setup call</p>
<p>Pass/Fail criteria:<br />
Call with Phone A should be put on hold then Setup call should be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_disconnectOtherCall" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify doing a Setup Call releases all other call first (Type 3)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command (Type 3) is inserted in the device. Phone radio is ON.<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Call Phone A<br />
2. Phone A: accept the call<br />
3. Do a setup call</p>
<p>Pass/Fail criteria:<br />
Call with Phone A should be released then Setup call should be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_Yes" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify if user confirms the Setup Call, it is done</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Do a setup call<br />
2. Confirm (respond: yes)</p>
<p>Pass/Fail criteria:<br />
Setup call should be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_No" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify if user do not confirm the Setup Call, it is not done</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Do a setup call<br />
2. Do not confirm (respond: no)</p>
<p>Pass/Fail criteria:<br />
Setup call should not be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_1stAlphaID" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify if alpha identifier is provided by the SIM and is not a null data object, it is used to inform user of the setup call</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Do a setup call which contains an alpha identifier</p>
<p>Pass/Fail criteria:<br />
Alpha identifier should be used to inform the user that a Setup call requests confirmation</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_No1stAlphaID" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify if alpha identifier is not provided, ME is used to inform user of the setup call</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Do a setup call which do not contain an alpha identifier</p>
<p>Pass/Fail criteria:<br />
ME should be used to inform the user that a Setup call requests confirmation</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_2ndAlphaID" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify if 2nd alpha identifier is provided by the SIM and is not a null data object, it is used during the setup call</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Do a setup call which contains a 2nd alpha identifier<br />
2. Confirm the operation (respond: yes)</p>
<p>Pass/Fail criteria:<br />
2nd Alpha identifier should be used to inform the user during the Setup call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_No2ndAlphaID" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify if 2nd alpha identifier is not provided, ME is used to inform user during the setup call</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Do a setup call which does not contain a 2nd alpha identifier<br />
2. Confirm the operation (respond: yes)</p>
<p>Pass/Fail criteria:<br />
ME should be used to inform the user during the Setup call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_accept" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify setup call status if user accepts the call</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Do a setup call (to Phone A)<br />
2. Phone A: accept the call</p>
<p>Pass/Fail criteria:<br />
Call between device and Phone A should be active</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_refuse" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify setup call status if user refuses the call</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Do a setup call (to Phone A)<br />
2. Phone A: reject the call</p>
<p>Pass/Fail criteria:<br />
Setup call is aborted</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_end" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify user can end a setup call</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Do a setup call (to Phone A)<br />
2. End the proactive command</p>
<p>Pass/Fail criteria:<br />
Setup call is ended</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_redial" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify redial is done if first setup call is unsuccessful</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Do a setup call (to Phone A) (setup call is unsuccessful)</p>
<p>Pass/Fail criteria:<br />
Redial is done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_setupcall_stop" manual="true" timeout="90" requirement="4494" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify user can stops the call setup attempt</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 11.14 spec.</p>
<p>Pre/Post-conditions: SIM which supports Setup Call proactive command is inserted in the device. Phone radio is ON.<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Do a setup call (to Phone A)<br />
2. Stop the call setup attempt</p>
<p>Pass/Fail criteria:<br />
Setup call is ended</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_7bitGSM" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that the 7-bits text passed to the ME is displayed as idle mode text</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.1.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends idle mode text command to SATK Agent in 7-bits format</p>
<p>Pass/Fail criteria: <br />
SATK Agent succesfully recieve command. SATK Agent succesfully send to ME a text to display in 7-bits format.<br />
Depending on how ME is devellop, setup idle mode text is display with 7-bits chars in system idle view.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_8bitGSM" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that the 8-bits text passed to the ME is displayed as idle mode text</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.1.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends idle mode text command to SATK Agent in 8-bits format</p>
<p>Pass/Fail criteria: <br />
SATK Agent succesfully recieve command. SATK Agent succesfully send to ME a text to display in 8-bits format.<br />
Depending on how ME is devellop, setup idle mode text is display with 8-bits chars in system idle view.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_UCS2" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that the 16-bits text passed to the ME is displayed as idle mode text</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.3.4.2, Expected Sequence 3.1</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends idle mode text command to SATK Agent in UCS2 format</p>
<p>Pass/Fail criteria: <br />
SATK Agent succesfully recieve command. SATK Agent succesfully send to ME a text to display in UCS2 format.<br />
Depending on how ME is devellop, setup idle mode text is display with UCS2 chars in system idle view.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_replace" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that text passed to the ME as replacement is displayed as idle mode text</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.1.4.2, Expected Sequence 1.2.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends idle mode text replace command to SATK Agent.</p>
<p>Pass/Fail criteria: <br />
SATK Agent succesfully recieve command. SATK Agent succesfully send to ME a text to display in replacement of previous one.<br />
Depending on how ME is devellop, new setup idle mode text is display in system idle view.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_remove" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that removed command passed to the ME behaves correctly with idle mode text</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.1.4.2, Expected Sequence 1.3.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends a text to display on the idle screen.<br />
2. While this tex is display, UICC sends a remove idle mode text command.</p>
<p>Pass/Fail criteria: <br />
SATK Agent succesfully recieve command. SATK Agent succesfully send to ME a text to display.<br />
Depending on how ME is devellop, first setup idle mode text is remove from system idle view.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_Tatrib" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that the text passed to the ME is displayed as idle mode text according to the left alignment text attribute configuration.</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.4.1.4.2, Expected Sequence 4.1.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends to SATK Agent an idle mode text to display with text attribution.</p>
<p>Pass/Fail criteria:<br />
SATK Agent succesfully recieves idle mode text request.<br />
SATK Agent succesfully forward this request to ME system.<br />
Depending on how ME is developp, Idle mode text is display on idle screen (main) according to text attribute.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_newText" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that the text passed to the ME is displayed as idle mode text</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.1.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends a text to display on the idle screen.<br />
2. While this tex is display, UICC sends a new one.</p>
<p>Pass/Fail criteria: <br />
SATK Agent succesfully recieves new idle mode text command.<br />
SATK Agent sends correct command to display idle mode text.<br />
Depending on how ME is develop, Text is display in behalf of the first one.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_idle_icon" manual="true" timeout="90" requirement="4498" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that the icon passed to the ME is displayed by the ME as an idle mode text</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.22.2.4.2, Expected Sequence 2.1A.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. UICC sends an &quot;idle mode text&quot; to be display.</p>
<p>Pass/Fail criteria:<br />
SATK Agent succesfully recieve request.<br />
SATK Agent succesfully sends to UICC request. UICC send to SATK Agent Idle mode text with icon.<br />
SATK Agent succesfully display UICC's idle mode text with icon according to UICC's format.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_lang_nspec" manual="true" timeout="90" requirement="4499" type="Functional positive">
	<description><![CDATA[<p>Purpose: To verify that the ME shall send a TERMINAL RESPONSE (OK) after the ME receives a non specific language notification</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.25.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. UICC sends a non specific language notification to TE</p>
<p>Pass/Fail criteria: TE should recieve notif succesfully then send &quot;OK&quot; as soon as possible</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_lang_spec" manual="true" timeout="90" requirement="4499" type="Functional positive">
	<description><![CDATA[<p>Description:<br />
Purpose: To verify that the ME shall send a TERMINAL RESPONSE (OK) after the ME receives a specific language notification</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.25.4.2, Expected Sequence 1.2.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. UICC sends a specific language notification to TE</p>
<p>Pass/Fail criteria: TE should recieve notif succesfully then send &quot;OK&quot; as soon as possible</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_select_menu" manual="true" timeout="90" requirement="4500" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify the result when user selects an menu</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.8.1.4.2, Expected Sequence 1.1.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User selects Menu in TE.</p>
<p>Pass/Fail criteria: SATK Agent should recieve Menu selection and return selection status.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_stk_select_menu_help" manual="true" timeout="90" requirement="4500" type="Functional positive">
	<description><![CDATA[<p>Purpose (Mandatory):To verify that help can be provided in a Setup menu</p>
<p>Method: N/A</p>
<p>References: See ETSI TS 102 384 [26] in subclause 27.22.4.8.2.4.2, Expected Sequence 2.1.</p>
<p>Pre/Post-conditions: Device is connected to a network simulator. Phone radio is ON.</p>
<p>Run instructions:<br />
1. Launch SATK Agent.<br />
2. User selects help in Menu in TE.</p>
<p>Pass/Fail criteria: SATK Agent should recieve help Menu selection and return associated help topic.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_MultiCall_call_deflect" manual="false" timeout="90" requirement="4414" type="Functional positive">
	<description><![CDATA[<p>Purpose: Redirect an incoming call received on the device to another device using Call Deflection service</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.072 spec.</p>
<p>Pre/Post-conditions: Phonesim is connected to the device. Phone radio is ON<br />
Phone A and B are available</p>
<p>Run instructions:<br />
1. Phone A: Call the device<br />
2. Device: Deflect the incoming call to phone B</p>
<p>Pass/Fail criteria: Phone B receives the call of phone A</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_call_deflect.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="Phonesim_oFn_GS_ECT" manual="false" timeout="90" requirement="4410" type="Functional positive">
	<description><![CDATA[<p>Purpose: Transfert the call control to the two other calls</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.091 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
Explicit Call Transfert (ECT) service is subscribed<br />
Phone A and B are available</p>
<p>Run instructions:<br />
1. Device: call Phone A<br />
2. Phone A: accept the call<br />
3. Device: call Phone B<br />
4. Phone B: accept the call<br />
5. Device: use ECT service to transfert the two calls</p>
<p>Pass/Fail criteria: <br />
Call should be released on the device and Phone A and B should be in call together</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_ect.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="Phonesim_oFn_GS_ECT_incoming" manual="true" timeout="90" requirement="4410" type="Functional positive">
	<description><![CDATA[<p>Purpose: Transfert the call control to the two other calls when the second one is ringing</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.091 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
Explicit Call Transfert (ECT) service is subscribed<br />
Phone A and B are available</p>
<p>Run instructions:<br />
1. Device: call Phone A<br />
2. Phone A: accept the call<br />
3. Device: call Phone B<br />
4. Device: use ECT service to transfert the two calls (Call is released on the device)<br />
5. Phone B: accept the call</p>
<p>Pass/Fail criteria: <br />
Phone A and B should be in call together</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIR_active" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate Calling Line Identification Restriction (CLIR) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON<br />
CLIR service is deactivated</p>
<p>Run instructions:<br />
1. Dial #31#</p>
<p>Pass/Fail criteria: <br />
CLIR service should be activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIR_activeForThisCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate Calling Line Identification Restriction (CLIR) service for only this call by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON<br />
CLIR service is deactivated<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Dial #31#&lt;Phone Number of Phone A&gt;</p>
<p>Pass/Fail criteria: <br />
Phone A should receive the call without the phone number of the device displayed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIR_deactive" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate Calling Line Identification Restriction (CLIR) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON<br />
CLIR service is activated</p>
<p>Run instructions:<br />
1. Dial *31#</p>
<p>Pass/Fail criteria: <br />
CLIR service should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIR_deactiveForThisCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate Calling Line Identification Restriction (CLIR) service for only this call by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON<br />
CLIR service is activated<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Dial *31#&lt;Phone Number of Phone A&gt;</p>
<p>Pass/Fail criteria: <br />
Phone A should receive the call with the phone number of the device displayed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIR_interrogat" manual="false" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Calling Line Identification Restriction (CLIR) service state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#31#</p>
<p>Pass/Fail criteria: <br />
CLIR service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_clir_int.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_COLP_interrogat" manual="false" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Connected Line Identification Presentation (COLP) service state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM is inserted. Phone radio is ON.<br />
COLP service is registered</p>
<p>Run instructions:<br />
1. Dial *#76#</p>
<p>Pass/Fail criteria: <br />
COLP service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_colp_int.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_COLR_interrogat" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Connected Line Identification Restriction (COLR) service state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM is inserted. Phone radio is ON.<br />
COLR service is registered</p>
<p>Run instructions:<br />
1. Dial *#77#</p>
<p>Pass/Fail criteria: <br />
COLR service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIP_interrogat" manual="false" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Calling Line Identification Presentation (CLIP) service state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIP service is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#30#</p>
<p>Pass/Fail criteria: <br />
CLIP service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_clip_int.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_CLIR_permMode_enable" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable Calling Line Identification Restriction (CLIR) service subscribed in permanent mode</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in permanent mode is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Enable CLIR service</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_enable_callid.sh</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIR_permMode_enable_dialCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial a call whereas Calling Line Identification Restriction (CLIR) service is subscribed in permanent mode</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in permanent mode is inserted. Phone radio is ON<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Call Phone A</p>
<p>Pass/Fail criteria: <br />
Phone A should receive a call but the device's phone number should not be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIR_permMode_disable" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable Calling Line Identification Restriction (CLIR) service subscribed in permanent mode</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in permanent mode is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Disable CLIR service</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cs_dis_callid.sh</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIR_tempMode_enable" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable Calling Line Identification Restriction (CLIR) service subscribed in temporary mode</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in permanent mode is inserted. Phone radio is ON<br />
CLIR is disabled</p>
<p>Run instructions:<br />
1. Enable CLIR service<br />
2. Check CLIR service state</p>
<p>Pass/Fail criteria: <br />
CLIR service should be enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_enable_callid.sh</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIR_tempMode_enable_dialCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial a call when Calling Line Identification Restriction (CLIR) service subscribed in temporary mode is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON<br />
CLIR is enabled<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Call phone A</p>
<p>Pass/Fail criteria: <br />
Phone A should receive the call and the device's phone number should not be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIR_tempMode_disable" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable Calling Line Identification Restriction (CLIR) service subscribed in temporary mode</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON<br />
CLIR is enabled</p>
<p>Run instructions:<br />
1. Disable CLIR service<br />
2. Check CLIR service state</p>
<p>Pass/Fail criteria: <br />
CLIR service should be disabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cs_dis_callid.sh</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIR_tempMode_disable_dialCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial a call when Calling Line Identification Restriction (CLIR) service subscribed in temporary mode is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service in temporary mode is inserted. Phone radio is ON<br />
CLIR is disabled<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Call phone A</p>
<p>Pass/Fail criteria: <br />
Phone A should receive the call and the device's phone number should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIR_interrogat" manual="false" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Calling Line Identification Restriction (CLIR) service state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIR service is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Check CLIR service state</p>
<p>Pass/Fail criteria: <br />
CLIR service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_CLIP_enable_rcvCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a call when Calling Line Identification Presentation (CLIR) service is subscribed</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIP service is inserted. Phone radio is ON<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Phone A: call the device</p>
<p>Pass/Fail criteria: <br />
Device should receive the call and the Phone A's phone number should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIP_disable_rcvCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a call when Calling Line Identification Presentation (CLIR) service is not subscribed</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has not subscribed to CLIP service is inserted. Phone radio is ON<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Phone A: call the device</p>
<p>Pass/Fail criteria: <br />
Device should receive the call and the Phone A's phone number should not be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CLIP_interrogat" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Calling Line Identification Presentation (CLIP) service state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIP service is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Check CLIP service state</p>
<p>Pass/Fail criteria: <br />
CLIP service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_SS_COLP_enable_rcvCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial a call to a a phone which will redirect the call to another phone when connected Line Identification Presentation (COLP) service is subscribed</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLP service is subscribed<br />
Phone A is available and redirects all incoming call to Phone B<br />
Phone B is available</p>
<p>Run instructions:<br />
1. Call Phone A (Call received by Phone A is redirected to Phone B)<br />
2. Phone B: Accept the call</p>
<p>Pass/Fail criteria: <br />
Device is on call with Phone B. Phone B's phone number is provided to the device.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_SS_COLP_disable_rcvCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Dial a call to a a phone which will redirect the call to another phone when connected Line Identification Presentation (COLP) service is not subscribed</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLP service is not subscribed<br />
Phone A is available and redirects all incoming call to Phone B<br />
Phone B is available</p>
<p>Run instructions:<br />
1. Call Phone A (Call received by Phone A is redirected to Phone B)<br />
2. Phone B: Accept the call</p>
<p>Pass/Fail criteria: <br />
Device is on call with Phone B. Phone B's phone number is not provided to the device (Phone A's phone number is provided to the device)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_SS_COLP_interrogat" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Connected Line Identification Presentation (COLP) service state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLP service is subscribed</p>
<p>Run instructions:<br />
1. Check COLP service state</p>
<p>Pass/Fail criteria: <br />
COLP service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_SS_COLR_enable_rcvCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a call from a phone which has been redirected the call of another phone when connected Line Identification Restriction (COLR) service is subscribed</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLR service is subscribed<br />
Phone A is available and redirects all incoming call to device<br />
Phone B is available</p>
<p>Run instructions:<br />
1. Phone B: Call Phone A (Call received by Phone A is redirected to device)<br />
2. Device: accept the call</p>
<p>Pass/Fail criteria: <br />
Phone B is on call with the device. Device's phone number is not provided to Phone B (Phone A's phone number is provided to Phone B)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_SS_COLR_disable_rcvCall" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive a call from a phone which has been redirected the call of another phone when connected Line Identification Restriction (COLR) service is not subscribed</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLR service is not subscribed<br />
Phone A is available and redirects all incoming call to device<br />
Phone B is available</p>
<p>Run instructions:<br />
1. Phone B: Call Phone A (Call received by Phone A is redirected to device)<br />
2. Device: accept the call</p>
<p>Pass/Fail criteria: <br />
Phone B is on call with the device. Device's phone number is provided to Phone B.</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_SS_COLR_interrogat" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Connected Line Identification Restriction (COLR) service state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLR service is subscribed</p>
<p>Run instructions:<br />
1. Check COLR service state</p>
<p>Pass/Fail criteria: <br />
COLR service state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAIC_interrogat" manual="false" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of all incoming calls state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#35#</p>
<p>Pass/Fail criteria: Barring of all incoming calls state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_baic.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_BAIC_deactive" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactive barring of all incoming calls by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all incoming calls is activated</p>
<p>Run instructions:<br />
1. Dial #35*&lt;Call Barring password&gt;#<br />
2. Check BAIC State</p>
<p>Pass/Fail criteria: Barring of all incoming calls should be&nbsp; deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAIC_activate" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate barring of all incoming calls by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all incoming calls is deactivated</p>
<p>Run instructions:<br />
1. Dial *35*&lt;Call Barring password&gt;#<br />
2. Check BAIC State</p>
<p>Pass/Fail criteria: Barring of all incoming calls should be&nbsp; activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_AllIncoming_deactive" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate barring of all incoming calls services by shortcut (&quot;Barring of all incoming calls&quot; and &quot;Barring of all incoming call when roaming&quot;)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all incoming calls is activated</p>
<p>Run instructions:<br />
1. Dial #353*&lt;Call Barring password&gt;#<br />
2. Check barring of all incoming calls services state</p>
<p>Pass/Fail criteria: Barring of all incoming calls services (&quot;Barring of all incoming calls&quot; and &quot;Barring of all incoming call when roaming&quot;) should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_AllIncoming_activate" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate barring of all incoming calls services by shortcut (Barring of all incoming calls and Barring of all incoming calls when roaming)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all incoming calls services is deactivated</p>
<p>Run instructions:<br />
1. Dial **353*&lt;Call Barring password&gt;#</p>
<p>Pass/Fail criteria: Error message should be displayed (This command is not allowed)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_AllIncoming_interrogat" manual="false" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of all incoming calls services state by shortcut (Barring of all incoming calls and Barring of all incoming calls when roaming)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#353#</p>
<p>Pass/Fail criteria: Barring of all incoming calls services state should be displayed</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_all_inc.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_BAIC_enable" manual="false" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable barring of all incoming calls</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all incoming calls is disabled</p>
<p>Run instructions:<br />
1. Enable barring of all incoming calls<br />
2. Enter Call Barring password<br />
3. Check barring of all incoming calls state</p>
<p>Pass/Fail criteria: Barring of all incoming calls should be activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_incoming.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="Phonesim_oFn_SS_BAIC_enable_RcvCall" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can not receive a call when barring of all incoming calls is activated</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
Barring of all incoming calls is activated<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: call the device</p>
<p>Pass/Fail criteria: Device should not receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_enable_roam_RcvCall" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can not receive a call when roaming whereas barring of all incoming calls is activated</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Network is registered in roaming mode<br />
Barring of all incoming calls is activated<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: call the device</p>
<p>Pass/Fail criteria: Device should not receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_disable" manual="false" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable barring of all incoming calls</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring  password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is  ON<br />
Barring of all incoming calls is enabled</p>
<p>Run instructions:<br />
1. Disable barring of all incoming calls<br />
2. Enter Call Barring password<br />
3. Check barring of all incoming calls state</p>
<p>Pass/Fail criteria: Barring of all incoming calls should be disabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_dis_inc.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="Phonesim_oFn_SS_BAIC_disable_RcvCall" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can receive a call when barring of all incoming calls is deactivated</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
Barring of all incoming calls is deactivated<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: Call the device</p>
<p>Pass/Fail criteria: Call should be received by the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_disable_roam_RcvCall" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can receive a call when in roaming whereas barring of all incoming calls is deactivated</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all incoming calls is deactivated<br />
Network is registered in roaming mode<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: Call the device</p>
<p>Pass/Fail criteria:&nbsp; Call should be received by the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_interrogat" manual="true" timeout="90" requirement="4397" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of all incoming calls state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Check barring of all incoming calls state</p>
<p>Pass/Fail criteria: Barring of all incoming state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAIC_roam_interrogat" manual="false" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of incoming calls when roaming state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#351#</p>
<p>Pass/Fail criteria: Barring of incoming calls when roaming state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_baicro.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_BAIC_roam_deactive" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactive barring of incoming calls when roaming by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of incoming calls when roaming is activated</p>
<p>Run instructions:<br />
1. Dial #351*&lt;Call Barring password&gt;#<br />
2. Check barring of all incoming calls when roaming state</p>
<p>Pass/Fail criteria: Barring of incoming calls when roaming should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAIC_roam_activate" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate barring of incoming calls when roaming by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of incoming calls when roaming is deactivated</p>
<p>Run instructions:<br />
1. Dial *351*&lt;Call Barring password&gt;#<br />
2. Check barring of all incoming calls when roaming state</p>
<p>Pass/Fail criteria: Barring of incoming calls when roaming should be activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_roam_interrogat" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of incoming calls when roaming state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Check barring of incoming calls when roaming state</p>
<p>Pass/Fail criteria: Barring of incoming calls when roaming state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_roam_enable" manual="false" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable barring of incoming calls when roaming</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of incoming call when roaming is disabled</p>
<p>Run instructions:<br />
1. Enable barring of incoming calls when roaming<br />
2. Enter Call barring password<br />
3. Check barring of incoming calls when roaming state</p>
<p>Pass/Fail criteria: Barring of all incoming calls when roaming should be activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_in_roaming.sh</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="Phonesim_oFn_SS_BAIC_roam_enable_RcvCall" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify call can be received when barring of incoming calls when roaming is activated</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim.<br />
Barring incoming call when roaming is enabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: Call the device</p>
<p>Pass/Fail criteria: Call should be received by the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_roam_enable_roam_RcvCall" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify call can't be received when roaming whereas barring of incoming calls when roaming is activated</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Network is registered in roaming<br />
Barring incoming call when roaming is enabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: Call the device</p>
<p>Pass/Fail criteria: Call should not be received by the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_roam_disable" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable barring of incoming calls when roaming</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring incoming call when roaming is enabled</p>
<p>Run instructions:<br />
1. Disable barring of incoming calls when roaming<br />
2. Enter Call barring password<br />
3. Check barring of incoming calls when roaming state</p>
<p>Pass/Fail criteria: Barring of all incoming calls when roaming should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_roam_disable_RcvCall" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify call can be received when barring of incoming calls when roaming is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of incoming call when roaming is disabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: Call the device</p>
<p>Pass/Fail criteria: Call should be received by the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAIC_roam_disable_roam_RcvCall" manual="true" timeout="90" requirement="4398" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify call can be received when roaming whereas barring of incoming calls when roaming is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Network is registered in roaming mode<br />
Barring of incoming call when roaming is disabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Phone A: Call the device</p>
<p>Pass/Fail criteria: Call should be received by the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_AllOutgoing_interrogat" manual="false" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of all outgoing calls services state by shortcut (Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#333#</p>
<p>Pass/Fail criteria: Barring of all outgoing calls services should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_all_out (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_CB_AllOutgoing_deactive" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate barring of all outgoing calls services by shortcut (Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is activated</p>
<p>Run instructions:<br />
1. Dial #333*&lt;Call Barring password&gt;#<br />
2. Check barring of all outgoing calls services state</p>
<p>Pass/Fail criteria: Barring of all outgoing calls services (Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country) should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_AllOutgoing_active" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate barring of all outgoing calls services by shortcut (Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is deactivated</p>
<p>Run instructions:<br />
1. Dial *333*&lt;Call Barring password&gt;#</p>
<p>Pass/Fail criteria: Error message should be displayed (This command is not allowed)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_change_ss_pwd" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Change the call barring password by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *03**&lt;Old Call Barring password&gt;*&lt;New Call Barring password&gt;*&lt;New Call Barring password&gt;#<br />
2. Activate Barring of all Outgoing calls</p>
<p>Pass/Fail criteria: <br />
Call barring password to be entered at step 2 should be the new one set at step 1</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAOC_interrogat" manual="false" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of all outgoing call state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#33#</p>
<p>Pass/Fail criteria: <br />
Barring of all outgoing calls state should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_baoc.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_BAOC_active" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate barring of all outgoing calls by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is deactivated</p>
<p>Run instructions:<br />
1. Dial *33*&lt;Call Barring password&gt;#<br />
2. Check Barring of all outgoing calls state</p>
<p>Pass/Fail criteria: Barring of all ougoing calls should be activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAOC_deactive" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate barring of all outgoing calls by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is activated</p>
<p>Run instructions:<br />
1. Dial #33*&lt;Call Barring password&gt;#<br />
2. Check Barring of all outgoing calls state</p>
<p>Pass/Fail criteria: Barring of all ougoing calls should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_all_deactive" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate barring of all incoming and outgoing calls services by shortcut (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is activated<br />
Barring of all incoming calls is activated</p>
<p>Run instructions:<br />
1. Dial #330*&lt;Call Barring password&gt;#<br />
2. Check barring of all incoming calls services state<br />
3. Check barring of all outgoing calls services state</p>
<p>Pass/Fail criteria: Barring of all incoming and outgoing calls services are deactivated (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CB_all_interrogat" manual="false" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose:Check barring of all incoming and outgoing calls services state by shortcut (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#330#</p>
<p>Pass/Fail criteria: Barring of all incoming and outgoing calls services state should be provided (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_all.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_CB_all_activate" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate barring of all incoming and outgoing calls services by shortcut (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is deactivated<br />
Barring of all incoming calls is deactivated</p>
<p>Run instructions:<br />
1. Dial *330*&lt;Call Barring password&gt;#</p>
<p>Pass/Fail criteria: Error message should be displayed (This command is not allowed)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CB_all_interrogat" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of all incoming and outgoing calls services state (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Check barring of all incoming and outgoing calls services state</p>
<p>Pass/Fail criteria: Barring of all incoming and outgoing calls services state should be provided (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CB_all_enable" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable barring of all incoming and outgoing calls services (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is deactivated<br />
Barring of all incoming calls is deactivated</p>
<p>Run instructions:<br />
1. Enable barring of all incoming and outgoing calls services</p>
<p>Pass/Fail criteria: Error message should be displayed (This command is not allowed)</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CB_all_disable" manual="false" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable barring of all incoming and outgoing calls services (Barring of all incoming calls, Barring of all incoming calls when roaming, Barring of all outgoing calls, Barring of all outgoing international calls and Barring of all outgoing international calls except those to home country)</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is activated<br />
Barring of all incoming calls is activated</p>
<p>Run instructions:<br />
1. Disable barring of all incoming and outgoing calls services<br />
2. Check Barring of all incoming calls services state<br />
3. Check Barring of all outgoing calls services state</p>
<p>Pass/Fail criteria: Barring of all incoming calls services and Barring of all outgoing calls services states should be both deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_disall.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_BAOC_interrogat" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Barring of all outgoing calls state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Check Barring of all outgoing calls</p>
<p>Pass/Fail criteria: Barring of all outgoing calls state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOC_enable" manual="false" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable Barring of all outgoing calls</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Enable Barring of all outgoing calls<br />
2. Enter Call Barring password<br />
3. Check Barring of all outgoing calls state</p>
<p>Pass/Fail criteria: Barring of all outgoing calls should be enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_out.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_BAOC_enable_dialEmCall" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can dial any emergency call whereas barring of all outgoing calls is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is enabled</p>
<p>Run instructions:<br />
1. Dial an emergency call</p>
<p>Pass/Fail criteria: Device should dial the emergency call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOC_enable_dialCall" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can't dial a normal call when barring of all outgoing calls is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is enabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Dial Phone A</p>
<p>Pass/Fail criteria: Error/Warning message should indicate that the call can't be dialed because barring of all outgoing call is enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOC_enable_roam_dialCall" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can't dial a normal call when roaming whereas barring of all outgoing calls is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Network is registered in roaming mode<br />
Barring of all outgoing calls is enabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Dial Phone A</p>
<p>Pass/Fail criteria: Error/Warning message should indicate that the call can't be dialed because barring of all outgoing call is enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOC_disable" manual="false" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable Barring of all outgoing calls</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is enabled</p>
<p>Run instructions:<br />
1. Disable Barring of all outgoing calls<br />
2. Enter Call Barring password<br />
3. Check Barring of all outgoing calls state</p>
<p>Pass/Fail criteria: Barring of all outgoing calls should be disabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_dis_out.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_BAOC_disable_dialCall" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can dial a normal call when barring of all outgoing calls is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing calls is disabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Dial Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOC_disable_roam_dialCall" manual="true" timeout="90" requirement="4399" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify device can dial a normal call when roaming whereas barring of all outgoing calls is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Network is registered in roaming mode<br />
Barring of all outgoing calls is disabled<br />
3rd party phone is available (Phone A)</p>
<p>Run instructions:<br />
1. Dial Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAOIC_interrogat" manual="false" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check barring of all outgoing international call state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#331*</p>
<p>Pass/Fail criteria: <br />
Barring of all outgoing international call state should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_baoic.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_BAOIC_deactive" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate barring of all outgoing international calls by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing international calls is activated</p>
<p>Run instructions:<br />
1. Dial #331*&lt;Call Barring password&gt;#<br />
2. Check Barring of all outgoing international calls state</p>
<p>Pass/Fail criteria: Barring of all ougoing international calls should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAOIC_activate" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate barring of all outgoing international calls by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing international calls is deactivated</p>
<p>Run instructions:<br />
1. Dial *331*&lt;Call Barring password&gt;#<br />
2. Check Barring of all outgoing international calls state</p>
<p>Pass/Fail criteria: Barring of all ougoing calls should be activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_enable" manual="false" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable barring of all outgoing international calls</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing international calls is deactivated</p>
<p>Run instructions:<br />
1. Enable barring of all outgoing international calls<br />
2. Enter the call barring password<br />
3. Check Barring of all outgoing international calls state</p>
<p>Pass/Fail criteria: Barring of all ougoing international calls should be enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_out_in.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_enable_home_dialCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can call a phone subscribed to a network of its home country whereas barring of all outgoing international calls is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered to its home Network<br />
Barring of all outgoing international calls is enabled<br />
Phone A is available and is subscribed to a network of the Home country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_enable_home_dialIntCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can't call a phone subscribed to a network of another country whereas barring of all outgoing international calls is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered to its home Network<br />
Barring of all outgoing international calls is enabled<br />
Phone A is available and is subscribed to a network of another country than the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Error/Warning message should indicate that the call can't be dialed because barring of all outgoing international calls is enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_enable_roam_dialCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can call a phone subscribed to a network of the same visited country whereas barring of all outgoing international calls is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
Barring of all outgoing international calls is enabled<br />
Phone A is available and is subscribed to a network of the same visited country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_enable_roam_dialIntCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can't call a phone subscribed to a network of another country whereas barring of all outgoing international calls is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
Barring of all outgoing international calls is enabled<br />
Phone A is available and is subscribed to a network of another country than the visited one of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Error/Warning message should indicate that the call can't be dialed because barring of all outgoing international calls is enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_disable" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable barring of all outgoing international calls</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Barring of all outgoing international calls is activated</p>
<p>Run instructions:<br />
1. Disable barring of all outgoing international calls<br />
2. Enter the call barring password<br />
3. Check Barring of all outgoing international calls state</p>
<p>Pass/Fail criteria: Barring of all ougoing calls should be disabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_disable_home_dialCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can call a phone subscribed to a network of its home country whereas barring of all outgoing international calls is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered to its home Network<br />
Barring of all outgoing international calls is disabled<br />
Phone A is available and is subscribed to a network of the Home country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_disable_home_dialIntCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can call a phone subscribed to a network of another country whereas barring of all outgoing international calls is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered to its home Network<br />
Barring of all outgoing international calls is disabled<br />
Phone A is available and is subscribed to a network of another country than the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_disable_roam_dialCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can call a phone subscribed to a network of the same visited country whereas barring of all outgoing international calls is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
Barring of all outgoing international calls is activated<br />
Phone A is available and is subscribed to a network of the same visited country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_disable_roam_dialIntCall" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can't call a phone subscribed to a network of another country whereas barring of all outgoing international calls is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
Barring of all outgoing international calls is disabled<br />
Phone A is available and is subscribed to a network of another country than the visited one of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BAOIC_interrogat" manual="true" timeout="90" requirement="4400" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Barring of all outgoing international calls state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Check Barring of all outgoing international calls</p>
<p>Pass/Fail criteria: Barring of all outgoing international calls state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAOIC_exHC_interrogat" manual="false" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check &quot;barring of all outgoing international calls except those directed to the Home network country&quot; state by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *#332*</p>
<p>Pass/Fail criteria: <br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; state should be retrieved</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_gsm_cb_baoiceh.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_GS_BAOIC_exHC_deactive" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate &quot;barring of all outgoing international calls except those directed to the Home network country&quot; by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is activated</p>
<p>Run instructions:<br />
1. Dial #332*&lt;Call Barring password&gt;#<br />
2. Check &quot;barring of all outgoing international calls except those directed to the Home network country&quot; state</p>
<p>Pass/Fail criteria: &quot;Barring of all outgoing international calls except those directed to the Home network country&quot; should be deactivated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_BAOIC_exHC_activate" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate &quot;barring of all outgoing international calls except those directed to the Home network country&quot; by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is deactivated</p>
<p>Run instructions:<br />
1. Dial *332*&lt;Call Barring password&gt;#<br />
2. Check &quot;barring of all outgoing international calls except those directed to the Home network country&quot; state</p>
<p>Pass/Fail criteria: &quot;Barring of all outgoing international calls except those directed to the Home network country&quot; should be activated</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_enable" manual="false" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Enable &quot;barring of all outgoing international calls except those directed to the Home network country&quot;</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is deactivated</p>
<p>Run instructions:<br />
1. Enable &quot;barring of all outgoing international calls except those directed to the Home network country&quot;<br />
2. Enter the call barring password<br />
3. Check &quot;barring of all outgoing international calls except those directed to the Home network country&quot; state</p>
<p>Pass/Fail criteria: &quot;Barring of all outgoing international calls except those directed to the Home network country&quot; should be enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: ofono_set_cb_out_nh.sh (To be updated)</p>
<p>Change history (Optional):</p>]]></description>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_enable_home_dialCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can call a phone subscribed to a network of its home country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered to its Home network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is enabled<br />
Phone A is available and is subscribed to a network of the Home country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_enable_home_dialIntCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can't call a phone subscribed to a network of another country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered to its Home network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is enabled<br />
Phone A is available and is subscribed to a network of another country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Error/Warning message should indicate that the call can't be dialed because &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_enable_roam_dialCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can call a phone subscribed to a network of the same visited country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is enabled<br />
Phone A is available and is subscribed to a network of the same visited country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_enable_roam_dialHomeCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can call a phone subscribed to a network of the device's home country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is enabled<br />
Phone A is available and is subscribed to a network of the device's home country</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_enable_roam_dialIntCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can't call a phone subscribed to a network of another country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is enabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is enabled<br />
Phone A is available and is subscribed to a network of another country than the visited one of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Error/Warning message should indicate that the call can't be dialed because barring of all outgoing international calls is enabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_disable" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Disable &quot;barring of all outgoing international calls except those directed to the Home network country&quot;</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is activated</p>
<p>Run instructions:<br />
1. Disable &quot;barring of all outgoing international calls except those directed to the Home network country&quot;<br />
2. Enter the call barring password<br />
3. Check &quot;barring of all outgoing international calls except those directed to the Home network country&quot; state</p>
<p>Pass/Fail criteria: &quot;Barring of all outgoing international calls except those directed to the Home network country&quot; should be disabled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_disable_home_dialCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can call a phone subscribed to a network of its home country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is disabled</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card)<br />
Device is registered to its Home network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is disabled<br />
Phone A is available and is subscribed to a network of the Home country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_disable_home_dialIntCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered to its home network, that it can call a phone subscribed to a network of another country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is disabled</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card)<br />
Device is registered to its Home network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is disabled<br />
Phone A is available and is subscribed to a network of another country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_disable_roam_dialCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can call a phone subscribed to a network of the same visited country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is disabled<br />
Phone A is available and is subscribed to a network of the same visited country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_disable_roam_dialHomeCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can call a phone subscribed to a network of the same visited country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is disabled<br />
Phone A is available and is subscribed to a network of the same visited country of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_disable_roam_dialIntCall" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Verify, when the device is registered in roaming to a visited network, that it can call a phone subscribed to a network of another country whereas &quot;barring of all outgoing international calls except those directed to the Home network country&quot; is disabled</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON<br />
Device is registered in roaming mode to a visited Network<br />
&quot;Barring of all outgoing international calls except those directed to the Home network country&quot; is disabled<br />
Phone A is available and is subscribed to a network of another country than the visited one of the device</p>
<p>Run instructions:<br />
1. Device: Call Phone A</p>
<p>Pass/Fail criteria: Phone A should receive the call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_BOIC_exHC_interrogat" manual="true" timeout="90" requirement="4401" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check &quot;barring of all outgoing international calls except those directed to the Home network country&quot; state</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.088 spec.</p>
<p>Pre/Post-conditions: SIM which supports Call Barring services (and has a Call Barring password known) is inserted (e.g.: Orange UK SIM Card). Phone radio is ON</p>
<p>Run instructions:<br />
1. Check &quot;barring of all outgoing international calls except those directed to the Home network country&quot;</p>
<p>Pass/Fail criteria: &quot;Barring of all outgoing international calls except those directed to the Home network country&quot; state should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ussd_receive" manual="true" timeout="90" requirement="4428" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive an incoming USSD Session</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an incoming USSD Session to the device</p>
<p>Pass/Fail criteria: <br />
USSD session should be displayed on the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_ussd_send" manual="true" timeout="90" requirement="4426" type="Functional positive">
	<description><![CDATA[<p>Purpose: Send an USSD request using digits</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM Card which support USSD (e.g. Orange) is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial #123#</p>
<p>Pass/Fail criteria: <br />
USSD session should start on the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_ussd_rcvAnswer" manual="true" timeout="90" requirement="4427" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive an USSD answer</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM Card which support USSD (e.g. Orange) is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial #123# (USSD session is displayed with a menu)<br />
2. Choose an item in the menu then send the digit in front of it</p>
<p>Pass/Fail criteria: <br />
USSD response should be received in the USSD session</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ussd_Recv182Char_7bit" manual="true" timeout="90" requirement="4438" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive an USSD Notification using the 7bit data coding scheme of 182 characters</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an USSD notification using the 7bit data coding scheme of 182 characters to the device</p>
<p>Pass/Fail criteria: <br />
USSD Notification of 182 characters should be displayed on the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ussd_Recv80Char_UCS2" manual="true" timeout="90" requirement="4439" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive an USSD Notification using the 16bit data coding scheme of 80 characters</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an USSD notification using the 16bit data coding scheme (UCS2) of 80 characters</p>
<p>Pass/Fail criteria: <br />
USSD Notification with 80 UCS2 characters should be displayed on the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_ussd_cancel" manual="true" timeout="90" requirement="4431" type="Functional positive">
	<description><![CDATA[<p>Purpose: Cancel a network USSD request</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM Card which support USSD (e.g. Orange) is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an USSD request requiring a response to the device<br />
2. Cancel the request</p>
<p>Pass/Fail criteria: <br />
USSD request should be canceled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_ussd_cancel_ussdReq" manual="true" timeout="90" requirement="4431" type="Functional positive">
	<description><![CDATA[<p>Purpose: Cancel an USSD request</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM Card which support USSD (e.g. Orange) is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial #123# (USSD session is displayed with a menu)<br />
2. Choose an item in the menu then send the digit in front of it<br />
3. Cancel the request</p>
<p>Pass/Fail criteria: <br />
USSD request should be canceled</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ussd_respond" manual="true" timeout="90" requirement="4431" type="Functional positive">
	<description><![CDATA[<p>Purpose: Respond to an USSD request</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an USSD request requiring a response to the device<br />
2. Send the response</p>
<p>Pass/Fail criteria: <br />
USSD response should be sent to the network</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ussd_IdleStatus" manual="true" timeout="90" requirement="4431" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check Idle USSD status</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an USSD notification to the device<br />
2. Check Idle USSD status</p>
<p>Pass/Fail criteria: <br />
Idle USSD status should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ussd_UserResponse_status" manual="true" timeout="90" requirement="4431" type="Functional positive">
	<description><![CDATA[<p>Purpose: Check USSD user response status</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an USSD request requiring a response to the device<br />
2. Check USSD user response status</p>
<p>Pass/Fail criteria: <br />
USSD user response status should be provided</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_ussd_end" manual="true" timeout="90" requirement="4431" type="Functional positive">
	<description><![CDATA[<p>Purpose: End an USSD session</p>
<p>Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM Card which support USSD (e.g. Orange) is inserted in the device. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial #123# (USSD session is displayed with a menu)<br />
2. End USSD session</p>
<p>Pass/Fail criteria: <br />
USSD session should be ended</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ussd_Recv_GSM" manual="true" timeout="90" requirement="4436" type="Functional positive">
	<description><![CDATA[<p>Purpose: Receive an USSD Notification that contains 7 bit default alphabet extension table characters<br />
Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON</p>
<p>Run instructions:<br />
1. Send an USSD notification that contains 7 bit default alphabet extension table characters (e.g.: Euro symbol) to the device</p>
<p>Pass/Fail criteria: <br />
USSD Notification of 182 characters should be displayed on the device</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_ussd_sendDuringCall" manual="true" timeout="90" requirement="4433" type="Functional positive">
	<description><![CDATA[<p>Purpose: Initiate an USSD session during a call<br />
Method: N/A</p>
<p>References: N/A</p>
<p>Pre/Post-conditions: SIM Card which support USSD (e.g. Orange) is inserted in the device. Phone radio is ON<br />
Phone A is available</p>
<p>Run instructions:<br />
1. Device: call Phone A<br />
2. Phone A: accept the call<br />
3. Device: Dial #123#</p>
<p>Pass/Fail criteria: <br />
USSD session should be initiated during a call</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="Negative Feature Test">

<case name="Phonesim_oFn_GS_COLP_activate" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate Connected Line Identification Presentation (COLP) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLP service is registered</p>
<p>Run instructions:<br />
1. Dial *76#</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_GS_COLP_deactivate" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate Connected Line Identification Presentation (COLP) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLP service is registered</p>
<p>Run instructions:<br />
1. Dial #76#</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_GS_COLR_activate" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate Connected Line Identification Restriction (COLR) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLR service is registered</p>
<p>Run instructions:<br />
1. Dial *77#</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_GS_COLR_deactivate" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate Connected Line Identification Restriction (COLR) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: Device is connected to Phonesim. Phone radio is ON<br />
COLR service is registered</p>
<p>Run instructions:<br />
1. Dial #77#</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIP_activate" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Activate Calling Line Identification Presentation (CLIP) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIP service is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial *30#</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CLIP_deactivate" manual="true" timeout="90" requirement="4409" type="Functional positive">
	<description><![CDATA[<p>Purpose: Deactivate Calling Line Identification Presentation (CLIP) service by shortcut</p>
<p>Method: N/A</p>
<p>References: 3GPP TS 22.081 spec.</p>
<p>Pre/Post-conditions: SIM which has subscribed to CLIP service is inserted. Phone radio is ON</p>
<p>Run instructions:<br />
1. Dial #30#</p>
<p>Pass/Fail criteria: <br />
Error/Warning message should indicate that this operation can't be done</p>
<p>Test Environment: Handset device</p>
<p>Required test data: N/A</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="CS Call - Simple Call">

<case name="2G_oFn_SimpCall_setup" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
make an outgoing call<br />
Run Instructions:<br />
<br />
1, make an outgoing call and accept it from remote side<br />
./test-simple-call dial [number]</p>
<p>2, check the call status</p>
<p>./test-multi-voicecall getproperties<br />
Pass/Fail Criteria:<br />
1. user can setup outgoing call successfully</p>
<p>2, the call status is active at step 2</p>
<p>note: in real network, user can listen the ring tone at peer side.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_outgoing.sh</step>
</case>

<case name="2G_oFn_SimpCall_accept" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
accept an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
&nbsp;&nbsp; wait 3-4 seconds</p>
<p>2, accept this incoming call<br />
[root@xx]# ./test-simple-call answer</p>
<p>3, check this call status<br />
[root@xx]# ./test-multi-voicecall getproperties</p>
<p>Pass/Fail Criteria:<br />
1. user can&nbsp;accept this&nbsp;incoming call <br />
2. this incoming call is in active status&nbsp;in step3</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_accept_inc.sh</step>
</case>

<case name="2G_oFn_SimpCall_reject" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
reject an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
2, reject this incoming call<br />
[root@xx]# ./test-simple-call hangup<br />
Pass/Fail Criteria:<br />
1,The incoming can be rejected</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_reject_inc.sh</step>
</case>

<case name="2G_oFn_SimpCall_hold" manual="true" timeout="90" requirement="4406" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hold an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, Hold this call<br />
[root@xx]# ./test-simple-call hold<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can hold the call<br />
2. the ongoing call is in held status after step2</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hold.sh</step>
</case>

<case name="2G_oFn_SimpCall_retrieve" manual="true" timeout="90" requirement="4406" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
retrieve an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hold this outgoing call<br />
[root@xx]# ./test-simple-call hold<br />
3, retrieve this call<br />
[root@xx]# ./test-simple-call retrieve<br />
4, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can retrive the call<br />
2. The ongoing call is in active status after step3</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_retrieve.sh</step>
</case>

<case name="2G_oFn_SimpCall_hungup" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hang up an outgoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hangup this ongoing call<br />
[root@xx]# ./test-simple-voicecall hangupall<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an outgoing call<br />
2. user can hangup the call<br />
3. no call is in active status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hungup.sh</step>
</case>

<case name="2G_oFn_SimpCall_terminate" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
terminate an outgoing call<br />
Run Instructions:<br />
1, setup an outgoing call<br />
./test-simplecall dial [number]<br />
Do not answer this call at remote side<br />
2, check this call status<br />
./test-multi-voicecall properties<br />
3, terminate this call ./test-simple-voicecall hangup<br />
Pass/Fail Criteria:<br />
1, user can setup and terminate an outgoing call.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_SimpCall_SendDtmf" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it <br />
[root@xx]# ./test-simple-call answer<br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9])<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_send_dtmf.sh</step>
</case>

<case name="2G_oFn_SimpCall_SendMultiDtmf" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send multi dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it<br />
[root@xx]# ./test-simple-call answer <br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9,*,#,A,B,C,D]<br />
3. repeat step2 for 3 times<br />
4,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send multi dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_send_multi-dtmf.sh</step>
</case>

<case name="2G_oFn_SimpCall_hold_hungupCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup the held call<br />
Run Instructions:<br />
1, setup an outgoing call<br />
[root@xx]# ./test-simplecall dial [number]<br />
2, hold this call<br />
[root@xx]# ./test-simplecall hold<br />
3, hangup this call [root@xx]# ./test-simple-voicecall hangup<br />
Pass/Fail Criteria:<br />
1, user can terminate he held call.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hungup_hold.sh</step>
</case>

<case name="2G_oFn_SimpCall_hungup_byRemote" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup an incoming call by remote side<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote party and accept it <br />
[root@xx]# ./test-simple-call dial 199<br />
2, hangup this call by phonesim automatically<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1.&nbsp;The call can be hung up&nbsp;by remote<br />
2, in phonesim, this call will be terminated automatically</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hungup_inc_mo.sh</step>
</case>

<case name="2G_oFn_SimpleCall_MT_long" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
make a long incoming call<br />
Run Instructions:<br />
1. setup an incoming call <br />
2. keep this call in active status more than 6 hours<br />
3. terminate the call from local side<br />
Pass/Fail Criteria:<br />
All message should be received successfully and call still in active status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_SimpleCall_hfp_MO_3imes" manual="true" timeout="90" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
make a outgoing call for 3times in hfp<br />
Run Instructions:<br />
1. setup an outgoing call <br />
2.hangup this call<br />
3. repeat 3 times<br />
Pass/Fail Criteria:<br />
each call should work normally</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_SimpleCall_WebSurf_MO" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
launch browser during conversion<br />
Run Instructions:<br />
1. setup an outgoing call <br />
2.accept it by peer side<br />
3. launch browser to see website<br />
Pass/Fail Criteria:<br />
1, ongoing call work fine<br />
2, webpage display correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_SimpleCall_repeat_IncomingCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
make incoming calls<br />
Run Instructions:<br />
<br />
(real network)<br />
1. make a call from remote side<br />
2. accept the incoming call<br />
./test-simple-voice call answer 0<br />
3, terminate this call from remote side<br />
4, repeat step1-3 for 9 times<br />
Pass/Fail Criteria:<br />
<br />
incoming calls can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_SimpleCall_repeat_OutgoingCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
make outgoing calls<br />
Run Instructions:<br />
<br />
(real network)<br />
1. setup an outgoing call<br />
./test-simple-call dial [number] .<br />
2. terminate the call from remote side<br />
3, repeat step1-2 for 9 times<br />
Pass/Fail Criteria:<br />
<br />
outgoing calls can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_SimpCall_2Gto3G" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):the call between 2G and 3G network</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):1, Insert 2G sim card and power on device</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, dial a call to 3G network(Unicom)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>Pass/Fail criteria (Mandatory):&nbsp;the call can be setup successfully</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_SimpCall_2Gto2G" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):voice call between 2G and 2G network</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Purpose (Mandatory):the call between 2G and 3G network</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):1, Insert 2G sim card and power on device</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, dial a call to 2G network(Unicom)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>Pass/Fail criteria (Mandatory):&nbsp;the call can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpCall_setup" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
make an outgoing call<br />
Run Instructions:<br />
<br />
1, make an outgoing call and accept it from remote side<br />
./test-simple-call dial [number]</p>
<p>2, check the call status</p>
<p>./test-multi-voicecall getproperties<br />
Pass/Fail Criteria:<br />
1. user can setup outgoing call successfully</p>
<p>2, the call status is active at step 2</p>
<p>note: in real network, user can listen the ring tone at peer side.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_outgoing.sh</step>
</case>

<case name="3G_oFn_SimpCall_accept" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
accept an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
&nbsp;&nbsp; wait 3-4 seconds</p>
<p>2, accept this incoming call<br />
[root@xx]# ./test-simple-call answer</p>
<p>3, check this call status<br />
[root@xx]# ./test-multi-voicecall getproperties</p>
<p>Pass/Fail Criteria:<br />
1. user can&nbsp;accept this&nbsp;incoming call <br />
2. this incoming call is in active status&nbsp;in step3</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_accept_inc.sh</step>
</case>

<case name="3G_oFn_SimpCall_reject" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
reject an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
2, reject this incoming call<br />
[root@xx]# ./test-simple-call hangup<br />
Pass/Fail Criteria:<br />
1,The incoming can be rejected</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_reject_inc.sh</step>
</case>

<case name="3G_oFn_SimpCall_hold" manual="true" timeout="90" requirement="4406" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hold an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, Hold this call<br />
[root@xx]# ./test-simple-call hold<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can hold the call<br />
2. the ongoing call is in held status after step2</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hold.sh</step>
</case>

<case name="3G_oFn_SimpCall_retrieve" manual="true" timeout="90" requirement="4406" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
retrieve an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hold this outgoing call<br />
[root@xx]# ./test-simple-call hold<br />
3, retrieve this call<br />
[root@xx]# ./test-simple-call retrieve<br />
4, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can retrive the call<br />
2. The ongoing call is in active status after step3</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_retrieve.sh</step>
</case>

<case name="3G_oFn_SimpCall_hungup" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hang up an outgoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hangup this ongoing call<br />
[root@xx]# ./test-simple-voicecall hangupall<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an outgoing call<br />
2. user can hangup the call<br />
3. no call is in active status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hungup.sh</step>
</case>

<case name="3G_oFn_SimpCall_terminate" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
terminate an outgoing call<br />
Run Instructions:<br />
1, setup an outgoing call<br />
./test-simplecall dial [number]<br />
Do not answer this call at remote side<br />
2, check this call status<br />
./test-multi-voicecall properties<br />
3, terminate this call ./test-simple-voicecall hangup<br />
Pass/Fail Criteria:<br />
1, user can setup and terminate an outgoing call.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpCall_SendDtmf" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it <br />
[root@xx]# ./test-simple-call answer<br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9])<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_send_dtmf.sh</step>
</case>

<case name="3G_oFn_SimpCall_SendMultiDtmf" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send multi dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it<br />
[root@xx]# ./test-simple-call answer <br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9,*,#,A,B,C,D]<br />
3. repeat step2 for 3 times<br />
4,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send multi dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_send_multi-dtmf.sh</step>
</case>

<case name="3G_oFn_SimpCall_hold_hungupCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup the held call<br />
Run Instructions:<br />
1, setup an outgoing call<br />
[root@xx]# ./test-simplecall dial [number]<br />
2, hold this call<br />
[root@xx]# ./test-simplecall hold<br />
3, hangup this call [root@xx]# ./test-simple-voicecall hangup<br />
Pass/Fail Criteria:<br />
1, user can terminate he held call.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hungup_hold.sh</step>
</case>

<case name="3G_oFn_SimpCall_hungup_byRemote" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup an incoming call by remote side<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote party and accept it <br />
[root@xx]# ./test-simple-call dial 199<br />
2, hangup this call by phonesim automatically<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1.&nbsp;The call can be hung up&nbsp;by remote<br />
2, in phonesim, this call will be terminated automatically</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hungup_inc_mo.sh</step>
</case>

<case name="3G_oFn_SimpleCall_MT_long" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
make a long incoming call<br />
Run Instructions:<br />
1. setup an incoming call <br />
2. keep this call in active status more than 6 hours<br />
3. terminate the call from local side<br />
Pass/Fail Criteria:<br />
All message should be received successfully and call still in active status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpleCall_hfp_MO_3imes" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
make a outgoing call for 3times in hfp<br />
Run Instructions:<br />
1. setup an outgoing call <br />
2.hangup this call<br />
3. repeat 3 times<br />
Pass/Fail Criteria:<br />
each call should work normally</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpleCall_WebSurf_MO" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
launch browser during conversion<br />
Run Instructions:<br />
1. setup an outgoing call <br />
2.accept it by peer side<br />
3. launch browser to see website<br />
Pass/Fail Criteria:<br />
1, ongoing call work fine<br />
2, webpage display correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpleCall_repeat_IncomingCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
make incoming calls<br />
Run Instructions:<br />
<br />
(real network)<br />
1. make a call from remote side<br />
2. accept the incoming call<br />
./test-simple-voice call answer 0<br />
3, terminate this call from remote side<br />
4, repeat step1-3 for 9 times<br />
Pass/Fail Criteria:<br />
<br />
incoming calls can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpleCall_repeat_OutgoingCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
make outgoing calls<br />
Run Instructions:<br />
<br />
(real network)<br />
1. setup an outgoing call<br />
./test-simple-call dial [number] .<br />
2. terminate the call from remote side<br />
3, repeat step1-2 for 9 times<br />
Pass/Fail Criteria:<br />
<br />
outgoing calls can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpCall_3Gto2G" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):the call between 2G and 3G network</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):1, Insert 2G sim card and power on device</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, dial a call to 3G network(Unicom)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>Pass/Fail criteria (Mandatory):&nbsp;the call can be setup successfully</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpCall_3Gto3G" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):voice call between 2G and 2G network</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Purpose (Mandatory):the call between 2G and 3G network</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):1, Insert 2G sim card and power on device</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, dial a call to 2G network(Unicom)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>Pass/Fail criteria (Mandatory):&nbsp;the call can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_SimpCall_hideCallid" manual="false" timeout="90" requirement="2969" type="Functional positive">
	<description><![CDATA[<p>Purpose: enable hide call id to dial a call</p>
<p>Run Instructions:</p>
<p>[root@xx]# ./test-simple-voicecall hide-callid [number]</p>
<p>Pass/Fail Criteria: user can make this outgoing call successfully</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_call_hide_callid.sh</step>
</case>

<case name="RealNetwork_oFn_SimpCall_without_net" manual="true" timeout="90" requirement="2966">
	<description><![CDATA[<p>Purpose:<br />
loss of network coverage<br />
Run Instructions:<br />
(in real network)<br />
1. set up a call <br />
2. loss of network coverage during the ongoing call<br />
3. set up the call again after network coverage is recovered<br />
Pass/Fail Criteria:<br />
1. the call could be terminated automatically after network coverage is lost<br />
2. the call should be set up again sucessfully after network coverage is recovered</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SimpCall_invalid_dtmf" manual="true" timeout="90" requirement="2966">
	<description><![CDATA[<p>Purpose:<br />
Invalid DTMF<br />
Run Instructions:<br />
1, setup a call and accept it at peer side <br />
2, send a invalid DTMF<br />
./test-simple-voicecall senddtmf F<br />
Pass/Fail Criteria:<br />
1, can not send this DTMF<br />
2, will get the invalid parameter error,</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SimpCall_SendSmsDuringCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send sms during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it [root@xx]# ./test-simple-call answer <br />
2, send a sms<br />
[root@xx]# ./test-sms send [number] [content])<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send sms during the call<br />
3. this call is in active status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SimpCall_RecvSmsDuringCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
receive sms during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it <br />
[root@xx]# ./test-simple-call answer<br />
2, send a sms from remote side<br />
3, receive this message during this call <br />
[root@xx]# ./test-receive-sms<br />
4,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can receive sms during the call<br />
3. this call is in active status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SimpleCall_UnpluginSim_DuringCall" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
unplug sim card during conversion<br />
Run Instructions:<br />
1. setup an outgoing call <br />
2.accept it by peer side<br />
3. unplug the sim card during the call<br />
Pass/Fail Criteria:<br />
1, call will be terminated<br />
2, no crash in ofono</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SimpCall_tty" manual="true" timeout="90" requirement="2966">
	<description><![CDATA[<p>Purpose (Mandatory):enable tty device <br />
Run instructions (Mandatory):<br />
1, connect tty device keyboard<br />
2, dial a number <br />
Pass/Fail criteria (Mandatory):user can dial a call by this tty device</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SimpCall_2GtoCDMA2000" manual="true" timeout="90" requirement="2966" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):voice call between 2G and CDMA2000 network</p>
<p>Purpose (Mandatory):the call between 2G and 3G network</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):1, Insert 2G sim card and power on device</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, dial a call to 3G network(CDMA2000)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>Pass/Fail criteria (Mandatory):&nbsp;the call can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="CS Call - Multi Call">

<case name="2G_oFn_MultiCall_create" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
multiparty call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call and all calls are in active status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_create_multiparty.sh</step>
</case>

<case name="2G_oFn_MultiCall_swap" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
swap two calls<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold<br />
3, setup second outgoing call and accept it at remote side<br />
4, swap the two call<br />
./test-simple-call hold/retrieve <br />
<br />
Pass/Fail Criteria:<br />
1. user can swap the two outgoing calls<br />
2. status of these two outgoing calls is showed correctly during swapping</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_swap_calls.sh</step>
</case>

<case name="2G_oFn_MultiCall_swap_merge" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
swap between multiparty call and outgoing call then merge them together<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup an incoming call and accept it <br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial an outgoing call <br />
./test-simple-call dial [number]<br />
5, hold the call<br />
./test-simple-call hold<br />
6, add the held call in conversation<br />
./test-multi-voicecall multipartycall<br />
Pass/Fail Criteria:<br />
1. user can swap between multiparty call and outgoing call<br />
2. user can&nbsp;merge the&nbsp;held call in conversation after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_MultiCall_hold_answer" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2 call:<br />
hold first outgoing call and accept incoming<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, hold the first outgoing call and then accept the incoming call<br />
./test-multi-voicecall holdandanswer<br />
4, release the active call<br />
./test-simple-call hang up 1<br />
Pass/Fail Criteria:<br />
1. the outgoing call can be hold and the incoming call can be accepted successfylly after step3<br />
2. the active call can be released after step4</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_hold_and_answer.sh</step>
</case>

<case name="2G_oFn_MulitCall_release_answer" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2call: release first outgoing call and accept incoming call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, release the first outgoing call and accept this incoming call<br />
./test-multi-voicecall releaseandanswer<br />
Pass/Fail Criteria:<br />
only the incoming call is in active status after step3</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_release_and_answer.sh</step>
</case>

<case name="2G_oFn_MultiCall_release_HeldCall" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
make multiparty call then release the held outgoing call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup incoming call and accept it<br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial an outgoing call <br />
./test-simple-call dial [number]<br />
5, hold the call<br />
./test-simple-call hold<br />
6, release the held call<br />
./test-simple-call hangup 2<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call<br />
2. user can hold and hangup second outgoing call<br />
3. multiparty call is released after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_MultiCall_hungup_multiCall" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make the third outgoing call <br />
./test-simple-call dial [number]<br />
5, hang up the multiparty call<br />
./test-multi-voicecall hangupmultiparty<br />
Pass/Fail Criteria:<br />
1. user can hangup multiparty call<br />
2. only the third outgoing call is in active status after step5</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_hungup_multiparty.sh</step>
</case>

<case name="2G_oFn_MultiCall_hangup_active" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup the active outgoing call and active multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make an outgoing call <br />
./test-simple-call dial [number]<br />
5, hangup the active outgoing call<br />
./test-simple-call hangup 2<br />
6, active the held multiparty<br />
./test-simple-call retrieve<br />
Pass/Fail Criteria:<br />
1. user can hangup the active outgoing call after step5<br />
2. user can active the multiparty after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_MultiCall_add_OneParty" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
add one party into a multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make an outgoing call<br />
./test-simple-call dial [number]<br />
5, add the held multiparty call in conversation<br />
./test-multi-voicecall multiparty<br />
Pass/Fail Criteria:<br />
1. The held multiparty call is added in the conversation</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_add_one_party.sh</step>
</case>

<case name="2G_oFn_MultiCall_check3callsStatus" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
3 call: 1 active, 1 held, 1 waiting<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. setup an incoming call and accept it<br />
3, setup second outgoing call and accept it at remote side<br />
<br />
Pass/Fail Criteria:<br />
1. outgoing/incoming calls can be setup successfully one by one<br />
2. after step3, call status should be:<br />
one in active; one in waiting; one in held status.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_MultiCall_PrivateChat_3" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
private chat(3 parties)<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, private talk with the second one<br />
./test-multi-voicecall privatechat<br />
Pass/Fail Criteria:<br />
1. the first call is in held status and the second one is in active status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_private_chat_3.sh</step>
</case>

<case name="2G_oFn_MultiCall_PrivateChat_4" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
private chat(4 parties)<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial a call<br />
./test-simple-voicecall dial [number]<br />
5, add to multiparty<br />
./test-mult-voicecall multipartycall<br />
6, private talk with the second one<br />
./test-multi-voicecall privatechat 1<br />
Pass/Fail Criteria:<br />
Private chat is created with&nbsp;the second call<br />
other calls are in held status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_private_chat_4.sh</step>
</case>

<case name="2G_oFn_MultiCall_rejectByUDUB" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Busy call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. setup a incoming call at remote side<br />
3, reject this incoming call with UDUB<br />
./test-simple-call busy 1<br />
<br />
Pass/Fail Criteria:<br />
the incoming call is rejected successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_MultiCall_rejectSecondCall" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2call: reject incoming call during outgoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, reject this incoming call<br />
./test-simple-call haungup 1<br />
4. terminate the outgoing call<br />
Pass/Fail Criteria:<br />
1. the incoming call can be rejected successfully<br />
2. the outgoing call is still in active status after step3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_MultiCall_HoldMO_RejectMT" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2 call:<br />
hold outgoing call and reject incoming call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold<br />
3,make an incoming call<br />
4,reject this incoming call<br />
./test-simple-call haungup 1<br />
Pass/Fail Criteria:<br />
1. outgoing call can be hold successfully after step2<br />
2. user can reject the incoming call</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_MultiCall_create" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
multiparty call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call and all calls are in active status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_create_multiparty.sh</step>
</case>

<case name="3G_oFn_MultiCall_swap" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
swap two calls<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold<br />
3, setup second outgoing call and accept it at remote side<br />
4, swap the two call<br />
./test-simple-call hold/retrieve <br />
<br />
Pass/Fail Criteria:<br />
1. user can swap the two outgoing calls<br />
2. status of these two outgoing calls is showed correctly during swapping</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_swap_calls.sh</step>
</case>

<case name="3G_oFn_MultiCall_swap_merge" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
swap between multiparty call and outgoing call then merge them together<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup an incoming call and accept it <br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial an outgoing call <br />
./test-simple-call dial [number]<br />
5, hold the call<br />
./test-simple-call hold<br />
6, add the held call in conversation<br />
./test-multi-voicecall multipartycall<br />
Pass/Fail Criteria:<br />
1. user can swap between multiparty call and outgoing call<br />
2. user can&nbsp;merge the&nbsp;held call in conversation after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_MultiCall_hold_answer" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2 call:<br />
hold first outgoing call and accept incoming<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, hold the first outgoing call and then accept the incoming call<br />
./test-multi-voicecall holdandanswer<br />
4, release the active call<br />
./test-simple-call hang up 1<br />
Pass/Fail Criteria:<br />
1. the outgoing call can be hold and the incoming call can be accepted successfylly after step3<br />
2. the active call can be released after step4</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_hold_and_answer.sh</step>
</case>

<case name="3G_oFn_MulitCall_release_answer" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2call: release first outgoing call and accept incoming call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, release the first outgoing call and accept this incoming call<br />
./test-multi-voicecall releaseandanswer<br />
Pass/Fail Criteria:<br />
only the incoming call is in active status after step3</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_release_and_answer.sh</step>
</case>

<case name="3G_oFn_MultiCall_release_HeldCall" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
make multiparty call then release the held outgoing call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup incoming call and accept it<br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial an outgoing call <br />
./test-simple-call dial [number]<br />
5, hold the call<br />
./test-simple-call hold<br />
6, release the held call<br />
./test-simple-call hangup 2<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call<br />
2. user can hold and hangup second outgoing call<br />
3. multiparty call is released after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_MultiCall_hungup_multiCall" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make the third outgoing call <br />
./test-simple-call dial [number]<br />
5, hang up the multiparty call<br />
./test-multi-voicecall hangupmultiparty<br />
Pass/Fail Criteria:<br />
1. user can hangup multiparty call<br />
2. only the third outgoing call is in active status after step5</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_hungup_multiparty.sh</step>
</case>

<case name="3G_oFn_MultiCall_hangup_active" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
hangup the active outgoing call and active multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make an outgoing call <br />
./test-simple-call dial [number]<br />
5, hangup the active outgoing call<br />
./test-simple-call hangup 2<br />
6, active the held multiparty<br />
./test-simple-call retrieve<br />
Pass/Fail Criteria:<br />
1. user can hangup the active outgoing call after step5<br />
2. user can active the multiparty after step6</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_MultiCall_add_OneParty" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
add one party into a multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make an outgoing call<br />
./test-simple-call dial [number]<br />
5, add the held multiparty call in conversation<br />
./test-multi-voicecall multiparty<br />
Pass/Fail Criteria:<br />
1. The held multiparty call is added in the conversation</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_add_one_party.sh</step>
</case>

<case name="3G_oFn_MultiCall_check3callsStatus" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
3 call: 1 active, 1 held, 1 waiting<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. setup an incoming call and accept it<br />
3, setup second outgoing call and accept it at remote side<br />
<br />
Pass/Fail Criteria:<br />
1. outgoing/incoming calls can be setup successfully one by one<br />
2. after step3, call status should be:<br />
one in active; one in waiting; one in held status.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_MultiCall_PrivateChat_3" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
private chat(3 parties)<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, private talk with the second one<br />
./test-multi-voicecall privatechat<br />
Pass/Fail Criteria:<br />
1. the first call is in held status and the second one is in active status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_private_chat_3.sh</step>
</case>

<case name="3G_oFn_MultiCall_PrivateChat_4" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
private chat(4 parties)<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial a call<br />
./test-simple-voicecall dial [number]<br />
5, add to multiparty<br />
./test-mult-voicecall multipartycall<br />
6, private talk with the second one<br />
./test-multi-voicecall privatechat 1<br />
Pass/Fail Criteria:<br />
Private chat is created with&nbsp;the second call<br />
other calls are in held status</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_private_chat_4.sh</step>
</case>

<case name="3G_oFn_MultiCall_rejectByUDUB" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Busy call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. setup a incoming call at remote side<br />
3, reject this incoming call with UDUB<br />
./test-simple-call busy 1<br />
<br />
Pass/Fail Criteria:<br />
the incoming call is rejected successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_MultiCall_rejectSecondCall" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2call: reject incoming call during outgoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, reject this incoming call<br />
./test-simple-call haungup 1<br />
4. terminate the outgoing call<br />
Pass/Fail Criteria:<br />
1. the incoming call can be rejected successfully<br />
2. the outgoing call is still in active status after step3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_MultiCall_HoldMO_RejectMT" manual="true" timeout="90" requirement="2972" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
2 call:<br />
hold outgoing call and reject incoming call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold<br />
3,make an incoming call<br />
4,reject this incoming call<br />
./test-simple-call haungup 1<br />
Pass/Fail Criteria:<br />
1. outgoing call can be hold successfully after step2<br />
2. user can reject the incoming call</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="CS Call - Call History" description="&lt;p&gt;In MeeGo image, the call history information will be handled by application storage.&lt;/p&gt;
&lt;p&gt;So we need check ofonod log about the call history information.&lt;/p&gt;
&lt;p&gt;./ofonod -n -d '*'&lt;/p&gt;
&lt;p&gt;moreover, there was some cache data in /var/cache/callhistory&lt;/p&gt;">

<case name="RealNetwork_oFn_CallH_OutgoingcallInfo" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
outgoing call history<br />
Run Instructions:<br />
1, setup an outgoing call<br />
./test-simple-call dial [number]<br />
2, accept the call from remote side<br />
3, terminate the call from remote side<br />
4, check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
Pass/Fail Criteria:<br />
this outgoing call information could be found in calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_CallH_IncomingCallInfo" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
incoming call history<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
2, accept this incoming call<br />
./test-simple-voice call answer 0<br />
3, terminate this call from remote side<br />
4, check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
Pass/Fail Criteria:<br />
this incoming call information could be found in calendar.ics</p>
<p>or be check the history in ofono log window(the terminal window which run ofono)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_CallH_DurationInfo" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
duration information of outgoing call<br />
Run Instructions:<br />
1,setup an outgoing call<br />
[root@xx]# ./test-simple-voice call dial [number]<br />
or dial one number in phonesim <br />
2, accept it from remote side<br />
3, terminate this call from remote side<br />
4, check duration information of outgoing call <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono) <br />
Pass/Fail Criteria:<br />
duration information could be found in calendar.ics, e.g. the Starts and End date or the duration value calculated</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_CallH_MT_DateInfo" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
date information of incoming call<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
In phonesim that is dialing one number from incoming tag <br />
2, accept this incoming call<br />
[root@xx]# ./test-simple-voice call answer 0 <br />
3, terminate this call from remote side<br />
[root@xx]# ./test-simple-voice hangup <br />
4, check date information of incoming call<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono) <br />
Pass/Fail Criteria:<br />
date duration information could be found in calendar.ics, e.g. the Starts and End date or the duration value calculated</p>
<p>&nbsp;</p>
<p>information of incoming call could be found in calendar.ics</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_CallH_SingleMissedCallInfo" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
single missed call history<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
2, do not accept this call<br />
3, terminate this call from remote side<br />
4. check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
Pass/Fail Criteria:<br />
this missed call information could be found in calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_CallH_MultiMissedCallInfo" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
missed calls history<br />
Run Instructions:<br />
1,setup an incoming call from remote side<br />
2, do not accept this call<br />
3, terminate this call from remote side<br />
4. repeat step1-3<br />
5. repeat step1-3<br />
6,check call history information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or check the history in ofono log window(the terminal window which run ofono) <br />
Pass/Fail Criteria:<br />
these 3 missed calls information could be found in calendar.ics</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="CS Call - Call Volume">

<case name="RealNetwork_oFn_CallVol_get_mute" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get mute/unmute value<br />
Run Instructions:<br />
<br />
1, get mute/unmute value<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
<br />
mute/unmute value will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_volume_get_mute.sh</step>
</case>

<case name="RealNetwork_oFn_CallVol_set_mute" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set mute on<br />
Run Instructions:<br />
<br />
1, enable mute<br />
&nbsp;&nbsp; ./test-volume set mute<br />
Pass/Fail Criteria:<br />
<br />
mute is in ON after step1</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_volume_set_mute.sh</step>
</case>

<case name="RealNetwork_oFn_CallVol_get_MicVolVal" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get microphone volume value<br />
Run Instructions:<br />
<br />
1, get the value of volume<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
value of volume for microphone will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_volume_get_microphone.sh</step>
</case>

<case name="RealNetwork_oFn_CallVol_set_MicVolVal" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set microphone volume value<br />
Run Instructions:<br />
<br />
1, set the value of volume for microphone<br />
&nbsp;&nbsp; ./test-volume set Microphone 60<br />
Pass/Fail Criteria:<br />
the value of volume for microphone can be set correctly, phonesim do not support it but hfp is ok</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_CallVol_get_SpkVolVal" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get speaker volume value<br />
Run Instructions:<br />
<br />
1, get the value of volume<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
value of volume for speaker will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_volume_get_speaker.sh</step>
</case>

<case name="RealNetwork_oFn_CallVol_set_SpkVolVal" manual="true" timeout="90" requirement="2966" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set Speakerphone volume value<br />
Run Instructions:<br />
<br />
1, set the value of volume for speakerphone<br />
&nbsp;&nbsp; ./test-volume set Speakerphone 60<br />
Pass/Fail Criteria:<br />
the value of volume for speakerphone can be set correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_volume_set_speaker.sh</step>
</case>
</set>
<set name="Short Messaging Service">

<case name="RealNetwork_oFn_sms_SendMsg" manual="true" timeout="90" requirement="4554" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send sms<br />
Run Instructions:<br />
(real network)<br />
1, send a sms<br />
./test-sms send [number] [message content]<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg" manual="true" timeout="90" requirement="4554" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
receive sms<br />
Run Instructions:<br />
(real network)<br />
1. send a sms from remote side<br />
1, receive the sms<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_set_SC_Num" manual="true" timeout="90" requirement="4529" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
set service center number<br />
Run Instructions:<br />
(real network)<br />
1, set service center number<br />
[root@xx]# ./test-sms sc [ number ]<br />
Pass/Fail Criteria:<br />
The service center number can be set successfully</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_set_sc.sh</step>
</case>

<case name="RealNetwork_oFn_sms_SendMsg_long" manual="true" timeout="90" requirement="4566" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send long message<br />
Run Instructions:<br />
(real network)<br />
1, send a long message<br />
./test-sms send [content (more than 140 byte)] .<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send_long.sh</step>
</case>

<case name="RealNetwork_oFn_sms_SendMsg_UCS2" manual="true" timeout="90" requirement="4603" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send UCS2 message<br />
Run Instructions:<br />
(real network)<br />
1, send a &quot;UCS2&quot; message<br />
./test-sms send (UCS2 content)<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send_ucs2.sh</step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg_UCS2" manual="true" timeout="90" requirement="4603" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
receive UCS2 message<br />
Run Instructions:<br />
(real network)<br />
1, send a UCS2 message from remote side <br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully and the message content is displayed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg_class0" manual="true" timeout="90" requirement="4558" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>receive class0 message</p>
<p><br />
Run Instructions:</p>
<p>1, launch phonesim</p>
<p>2, enter 0 in message type of phonesim sms application</p>
<p>3, start ./test-receive-message script</p>
<p>4, check the class0 message receiving</p>
<p><br />
Pass/Fail Criteria:</p>
<p>it will show the &quot;A class0 message ......&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg_2pages" manual="true" timeout="90" requirement="4604" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
receive 2 pages message<br />
Run Instructions:<br />
<br />
(real network)<br />
1, send 2 pages message at remote side<br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg_Call" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
receive messages during a call<br />
Run Instructions:<br />
1, setup an outgoing call<br />
2. accept it from remote side<br />
3, receive messages (e.g. 10 messages) during this active call<br />
4. terminate the call from local side<br />
Pass/Fail Criteria:<br />
1. messages should be received successfully when the call is in active status<br />
2. user could terminate the call successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg_7bit" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
receive 7bit coded message<br />
Run Instructions:<br />
(simulator)<br />
1, send a 7 bit coded message at remote side <br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg_8bit" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
receive 8bit coded message<br />
Run Instructions:<br />
(real network)<br />
1, send a 8 bit coded message at remote side <br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_RecvMsg_MultiPages" manual="true" timeout="90" requirement="4604" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
receive multipage message during a call<br />
Run Instructions:<br />
1, setup an incoming call<br />
2. accept it from remote side<br />
3, receive multipage message (e.g. more than 2 pages) during this active call<br />
4. terminate the call from local side<br />
Pass/Fail Criteria:<br />
1. messages should be received successfully when the call is in active status<br />
2. user could terminate the call successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_RecvEmptyMsg" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Receive empty sms<br />
Run Instructions:<br />
1, send an empty message from peer side<br />
<br />
Pass/Fail Criteria:<br />
the empty message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_PowerOff_GprsConn_SendMsg" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
power off GPRS data connection during sending message<br />
Run Instructions:<br />
1.send a message<br />
./test-sms send [number] [content]<br />
2,poweroff gprs data connection<br />
./test-gprs detach<br />
Pass/Fail Criteria:<br />
1, message can be sent</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_SendMsg_160Char_7bit" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
160 7bit char in sms<br />
Run Instructions:<br />
(simulator)<br />
1,send a sms (with 160 char 7bit encoded) <br />
2, receive the message<br />
./test-receive-message .<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_SendMsg_8bit" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send 8bit coded message<br />
Run Instructions:<br />
(real network)<br />
1, send a 8 bit coded message<br />
Pass/Fail Criteria:<br />
The message can be sent without any error</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_SendMsg_140Char_8bit" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
140 8bit char in sms<br />
Run Instructions:<br />
(real network)<br />
1,send a sms (with 140 char 8bit encoded)<br />
2, receive the message<br />
./test-receive-message .<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_SendMsg_2Recipients" manual="true" timeout="90" requirement="4529" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
send to two recipients<br />
Run Instructions:<br />
<br />
(real network)<br />
1, send a message to two recipients.<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_Sendsms_70Char_ucs2" manual="true" timeout="90" requirement="4603" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
70 UCS2 char in sms<br />
Run Instructions:<br />
(real network)<br />
1, send a sms (with 70 UCS2 char) from remote side <br />
2, receive the message<br />
./test-receive-message<br />
Pass/Fail Criteria:<br />
The message should be received successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_SendByPS" manual="true" timeout="90" requirement="4714, 7147" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test send sms by PS bear</p>
<p>Run Instructions:</p>
<p>set PS bear : ./test-sms bearer [cs-only,ps-only,cs-preferred,ps-preferred]</p>
<p>send sms: ./test-sms send [message content]</p>
<p>Pass/Fail Criteria:</p>
<p>The sms send successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_GetBearer" manual="true" timeout="90" requirement="4714" type="Functional positive">
	<description><![CDATA[<p>Purpose:Get sms bearer</p>
<p>Run Instructions:Get sms bearer information</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-sms properties</p>
<p>Pass/Fail Criteria:it is cs-preferred by default</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_get_bearer.sh</step>
</case>

<case name="RealNetwork_oFn_sms_SetBearer" manual="true" timeout="90" requirement="4714" type="Functional positive">
	<description><![CDATA[<p>Purpose:Set sms bearer</p>
<p>Run Instructions:./test-sms bearer [cs-only,ps-only,cs-preferred,ps-preferred]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, ./test-sms properties</p>
<p>Pass/Fail Criteria: Will get bearer value</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_set_bearer.sh</step>
</case>

<case name="RealNetwork_oFn_sms_DeliveryReports_enable" manual="true" timeout="90" requirement="4563" type="Functional positive">
	<description><![CDATA[<p>Purpose:Enable delivery report</p>
<p>Run Instructions:1) ./test-sms enable-reports</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2)./test-sms properties</p>
<p>Pass/Fail Criteria:the UseDeliveryReports value is true</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_enable_de_report.sh</step>
</case>

<case name="RealNetwork_oFn_sms_DeliveryReports_disable" manual="true" timeout="90" requirement="4563" type="Functional positive">
	<description><![CDATA[<p>Purpose:Disable sms delivery reports</p>
<p>Run Instructions:1) ./test-sms disable-reports</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2), ./test-sms properties</p>
<p>Pass/Fail Criteria: the UseDeliveryReports is false or 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_DeliveryReports_success" manual="true" timeout="90" requirement="4563" type="Functional positive">
	<description><![CDATA[<p>Purpose:Get successful delivery report of sms</p>
<p>Run Instructions:1) plug in modem then send a sms</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-sms send [number] [content]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2) get the delivery report</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; check the sms status information in ofonod log</p>
<p>Pass/Fail Criteria: there was sms delivered information in ofonod log</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_DeliveryReports_Fail" manual="true" timeout="90" requirement="4563" type="Functional positive">
	<description><![CDATA[<p>Purpose:get delivery fail report</p>
<p>Run Instructions:1) plug in modem and power on modem</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2) send a sms with wrong number</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3) check status report in sms history or ofonod log</p>
<p>Pass/Fail Criteria:there was submit failed information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_MultiDeliveryReports" manual="true" timeout="90" requirement="4563" type="Functional positive">
	<description><![CDATA[<p>Purpose:check delivery with more segments message</p>
<p>Run Instructions:1) plug in modem and power on</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2) edit more than 500 char sms and send it</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3) put the device into weak net signal enviornment after sending one message</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4) check the status report in sms history or ofonod log</p>
<p>Pass/Fail Criteria: the first one message is delivered status, others were delivered failed status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_DeliveryReports_rperr" manual="true" timeout="90" requirement="4563" type="Functional positive">
	<description><![CDATA[<p>Purpose:check fail report in sms history</p>
<p>Run Instructions:1) plug in modem and power on it</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2)send a message to a specail number which can not receive message</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or need some specail equipment to simulate the rp -error of sms</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3) check the fail report in sms history or ofonod log</p>
<p>Pass/Fail Criteria: there is delivery failed information in ofonod log</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_fail_report" manual="true" timeout="90" requirement="4563" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
check fail report time of sms<br />
Run Instructions:<br />
1, send message to an invalid number <br />
2, check whether can receive the sending fail report in 10s<br />
Pass/Fail Criteria:<br />
should receive the fail report during 10s</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sms_SendMsg_ToEmptyNum" manual="true" timeout="90" requirement="4554" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
send sms to an empty number<br />
Run Instructions:<br />
<br />
(in real network)<br />
1. create a new sms<br />
2. try to send it to an empty phone number<br />
Pass/Fail Criteria:<br />
The message could not be sent out</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="Short Messaging Service History" description="&lt;p&gt;In MeeGo image, the sms history information will be handled by application storage.&lt;/p&gt;
&lt;p&gt;So we need check ofonod log about the&amp;nbsp;sms history information.&lt;/p&gt;
&lt;p&gt;./ofonod -n -d '*'&lt;/p&gt;
&lt;p&gt;moreover, there was some cache data in /var/cache/smshistory&lt;/p&gt;">

<case name="RealNetwork_oFn_smsH_RecvMsg_Info" manual="true" timeout="90" requirement="4575" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
message content in receive history<br />
Run Instructions:<br />
<br />
1,configure ofono to enable history record and install ofono<br />
[root@xx]# ./configure --prefix=/usr --mandir=/usr/share/man \ <br />
--sysconfdir=/etc --localstatedir=/var \ <br />
&ndash;enable-maintainer-mode <br />
send a message, in phonesim is: enter message tag, input number and text , click send button<br />
receive a message<br />
#./test-sms receive <br />
2, check the received message information<br />
in ofono log terminal window <br />
Pass/Fail Criteria:<br />
<br />
received message information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_smsH_SendMsg_Info" manual="true" timeout="90" requirement="4575" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
message content in send history<br />
Run Instructions:<br />
<br />
1, send a message<br />
2, check the sent message information <br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window<br />
Pass/Fail Criteria:<br />
<br />
sent message information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_smsH_SendMsg_DateInfo" manual="true" timeout="90" requirement="4575" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
message date in send history<br />
Run Instructions:<br />
<br />
1, send a message<br />
2, check date information of sent message<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window.<br />
Pass/Fail Criteria:<br />
<br />
date information of sent message will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_smsH_RecvMsg_DateInfo" manual="true" timeout="90" requirement="4575" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
message date in receive history<br />
Run Instructions:<br />
<br />
1, receive a message<br />
2, check date information of received message<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window <br />
Pass/Fail Criteria:<br />
date information of received message will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_smsH_ChangeDate_SendMsg" manual="true" timeout="90" requirement="4575" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
change the time then check the date in send history<br />
Run Instructions:<br />
<br />
1, send a message<br />
2, check date information of sent message<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
3, change the time<br />
4. check date information of sent message again<br />
#vim /root/.evolution/calendar/local/system/moblin/callhistory/calendar.ics<br />
or can get the message history record in ofono window <br />
Pass/Fail Criteria:<br />
1. date information of sent message will be showed correctly<br />
2. date information of sent message will not be changed after step3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="Smart Messaging Service">

<case name="RealNetwork_oFn_SM_SendVCard2.0S" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a short vcard 2.1 english message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.0/vcard2.0Short&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard2.0SUCS2" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a short vcard 2.1 chinese message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.0/vcard2.0Short_CHN&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>
<p>3. the chinese content&nbsp;is displayed correctly by the remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard2.0L" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a long vcard 2.0 message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.0/vcard2.0Long&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard2.0LUCS2" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;long vcard 2.0 chinese message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.0/vcard2.0Long_CHN&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>
<p>3. the chinese content&nbsp;is displayed correctly by the remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard2.1S" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a short vcard 2.1 message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.1/vcard2.1Short&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard2.1SUCS2" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;short vcard 2.1 message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.1/vcard2.1Short_CHN&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>
<p>3. the chinese content&nbsp;is displayed correctly by the remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard2.1L" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;long vcard 2.1 message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.1/vcard2.1Long</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard2.1LUCS2" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;long vcard 2.1 chinese message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard2.1/vcard2.1Long_CHN&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>
<p>3. the chinese content&nbsp;is displayed correctly by the remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard3.0S" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;short vcard 3.0 message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard3.0/vcard3.0Short&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard3.0SCHN" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;short vcard 3.0 chinese message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard3.0/vcard3.0Short_CHN&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>
<p>3. the chinese content&nbsp;is displayed correctly by the remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard3.0L" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;long vcard 3.0 message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard3.0/vcard3.0Long&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCard3.0LUCS2" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;long vcard 3.0 chinese message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/vcard3.0/vcard3.0Long_CHN&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>
<p>3. the chinese content&nbsp;is displayed correctly by the remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCardWrongVersionNum" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a vcard with wrong version number to own number<br />
<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/error_file/vcard_invalid_ver</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;in own machine</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCardWrongFormat" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a&nbsp;wrong format(miss ;) vcard&nbsp;message<br />
Run Instructions:<br />
(real network)<br />
1, send a vcard <br />
./vcardSend&nbsp; [number]&nbsp;./vcardFile/error_file/vcard_miss_sym&nbsp;</p>
<p>Pass/Fail Criteria:<br />
1. the vcard is able to be sent successfully<br />
2. the&nbsp;vcard message is&nbsp;received as vcard and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>

<case name="RealNetwork_oFn_SM_SendVCal1.0" manual="true" timeout="90" requirement="4536" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
send a short vcal&nbsp;1.0 english message<br />
<br />
Run Instructions:<br />
(real network)<br />
1, send a vcalendar <br />
./vcalSend&nbsp;[number]&nbsp;./vcalFile/vcal1.0/vcal1.0event</p>
<p>Pass/Fail Criteria:<br />
1. the vcalendar is able to be sent successfully<br />
2. the&nbsp;vcalendar message is&nbsp;received as vcalendar and parser correctly&nbsp;at remote side</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>
</set>
<set name="Voice Mail">

<case name="Phonesim_oFn_VM_MWI" manual="false" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail waiting indication<br />
Run Instructions:<br />
<br />
1, Get voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail waiting indication information will be showed correctly: true or false</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_voicemail_wait_ind.sh</step>
</case>

<case name="Phonesim_oFn_VM_MWI_cphs" manual="true" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get cphs voicemail waiting indication<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
&nbsp;&nbsp;&nbsp;&nbsp; pathtosrc/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part <br />
3,./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
will get cphs voicemail waiting indicator, e.g.: true</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_VM_get_MsgCount" manual="false" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail message count number<br />
Run Instructions:<br />
<br />
1, Get voice mail message count number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail message count number will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_voicemail_msg_count.sh</step>
</case>

<case name="Phonesim_oFn_VM_get_MsgCount_cphs" manual="true" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get cphs voicemail count information<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
&nbsp;&nbsp;&nbsp;&nbsp; pathtosrc/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part <br />
3,[root@xx] ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
will get cphs voicemail waiting indicator, e.g.: 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_VM_get_number" manual="false" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail number<br />
Run Instructions:<br />
<br />
1, Get voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voice mail number information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_voicemail_number.sh</step>
</case>

<case name="Phonesim_oFn_VM_set_number" manual="false" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
set voicemail number<br />
Run Instructions:<br />
<br />
1, set voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting set [number]<br />
2, get voice mail number<br />
./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail number can be set correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_voicemail_set_number.sh</step>
</case>

<case name="Phonesim_oFn_VM_get_number_cphs" manual="true" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get cphs voicemail number<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
pathtosrc/default.xml eg:<br />
/usr/share/phonesimm/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part<br />
3,get voice mail number<br />
./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
will get cphs voicemail number, e.g.: 6789</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_VM_set_number_cphs" manual="true" timeout="90" requirement="4425" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set cphs voicemail number<br />
Run Instructions:<br />
<br />
1, modify phonesim default.xml file<br />
&nbsp;&nbsp;&nbsp;&nbsp; pathtosrc/default.xml<br />
2,uncommnet Efmwis, Efmbdn,Efmbi part <br />
3,set voice mail number<br />
[root@xx]# ./test-message-waiting set [number]<br />
Pass/Fail Criteria:<br />
<br />
will set cphs voicemail mail number</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="Networking" description="&lt;p&gt;oFono cases for networking feature&lt;/p&gt;">

<case name="2G_oFn_NW_mode" manual="true" timeout="90" requirement="7905" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check the mode of network<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the mode of network<br />
[root@xx]# ./test-network networkinfo<br />
Pass/Fail Criteria:<br />
the mode information of network will be showed, e.g. Auto, off, manual</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_mode.sh</step>
</case>

<case name="2G_oFn_nw_auto_mode" manual="true" timeout="90" requirement="7905" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
check the network mode</p>
<p>Run Instructions:</p>
<p>1, select avaliable network<br />
[root@xx]# ./test-network scan<br />
2, select one avaliable operator<br />
3, register to the chosen operator<br />
[root@xx]# ./test-network register [operator path]</p>
<p>4, check the network mode:./test-network networkinfor<br />
Pass/Fail Criteria:<br />
The network mode should be auto</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_NW_scan" manual="true" timeout="90" requirement="4705" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Scan network<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, scan available [root@xx]# ./test-network scan<br />
Pass/Fail Criteria:<br />
all available network will be showed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_scan.sh</step>
</case>

<case name="2G_oFn_NW_register" manual="true" timeout="90" requirement="4705" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Register the default network<br />
Run Instructions:<br />
1, power on modem <br />
2, registered to default network<br />
[root@xx]# ./test-network register<br />
Pass/Fail Criteria:<br />
it will register the modem to default network</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_register.sh</step>
</case>

<case name="2G_oFn_NW_register_ChosenOperator" manual="true" timeout="90" requirement="4705" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Register device to chosen operator's network<br />
Run Instructions:<br />
<br />
1, select avaliable network<br />
[root@xx]# ./test-network networkinfo<br />
2, select one avaliable operator<br />
3, register to the chosen operator<br />
[root@xx]# ./test-network register [operator path]<br />
Pass/Fail Criteria:<br />
modem will register to the chosen operator</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_reg_chosen_op.sh</step>
</case>

<case name="2G_oFn_NW_NetworkStatus" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check the status of network<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the status of network<br />
[root@xx]# ./test-network networinfo<br />
Pass/Fail Criteria:<br />
network status information will be showed, e.g. &quot;registered&quot;</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_status.sh</step>
</case>

<case name="2G_oFn_NW_OperatorStatus" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check the status of operator<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the status information of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
status information of operator will be showed, e.g. current, available, forbidden</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_op_status.sh</step>
</case>

<case name="2G_oFn_NW_OperatorName" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check the name of operator<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the name of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
name of operator will be showed if it supported, e.g. T-Moblin etc.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_op_name.sh</step>
</case>

<case name="2G_oFn_NW_OperatorTechnology" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check Operator technology information<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the technology information of network<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
technology information of network will be showed, e.g. GSM, UMTS etc.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_op_tech.sh</step>
</case>

<case name="2G_oFn_NW_mcc_mnc" manual="true" timeout="90" requirement="2978,4596" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check MCC and MNC<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the MCC,MNC information<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
3 digital MCC code and 2 MNC code information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_mcc_mnc.sh</step>
</case>

<case name="2G_oFn_NW_change_RSSI" manual="true" timeout="90" requirement="4704" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check RSSI of network<br />
Run Instructions:<br />
<br />
1, adjust the signal strength value in phonesim<br />
2, check the changed RSSI value<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
RSSI value should be changed after step1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_NW_mode" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check the mode of network<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the mode of network<br />
[root@xx]# ./test-network networkinfo<br />
Pass/Fail Criteria:<br />
the mode information of network will be showed, e.g. Auto, off, manual</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_mode.sh</step>
</case>

<case name="3G_oFn_nw_auto_mode" manual="true" timeout="90" requirement="7905">
	<description><![CDATA[<p>Purpose:<br />
check the network mode</p>
<p>Run Instructions:</p>
<p>1, select avaliable network<br />
[root@xx]# ./test-network scan<br />
2, select one avaliable operator<br />
3, register to the chosen operator<br />
[root@xx]# ./test-network register [operator path]</p>
<p>4, check the network mode:./test-network networkinfor<br />
Pass/Fail Criteria:<br />
The network mode should be auto</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_NW_scan" manual="true" timeout="90" requirement="7905" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Scan network<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, scan available [root@xx]# ./test-network scan<br />
Pass/Fail Criteria:<br />
all available network will be showed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_scan.sh</step>
</case>

<case name="3G_oFn_NW_register" manual="true" timeout="90" requirement="4705" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Register the default network<br />
Run Instructions:<br />
1, power on modem <br />
2, registered to default network<br />
[root@xx]# ./test-network register<br />
Pass/Fail Criteria:<br />
it will register the modem to default network</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_register.sh</step>
</case>

<case name="3G_oFn_NW_register_ChosenOperator" manual="true" timeout="90" requirement="4705" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Register device to chosen operator's network<br />
Run Instructions:<br />
<br />
1, select avaliable network<br />
[root@xx]# ./test-network networkinfo<br />
2, select one avaliable operator<br />
3, register to the chosen operator<br />
[root@xx]# ./test-network register [operator path]<br />
Pass/Fail Criteria:<br />
modem will register to the chosen operator</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_reg_chosen_op.sh</step>
</case>

<case name="3G_oFn_NW_deregister" manual="true" timeout="90" requirement="4705" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Deregister from network<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, deregister the modem from the default network<br />
[root@xx]# ./test-network unregister<br />
Pass/Fail Criteria:<br />
there is the at command infor in phonesim AT log: AT+COPS=2</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_NW_NetworkStatus" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check the status of network<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the status of network<br />
[root@xx]# ./test-network networinfo<br />
Pass/Fail Criteria:<br />
network status information will be showed, e.g. &quot;registered&quot;</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_status.sh</step>
</case>

<case name="3G_oFn_NW_OperatorStatus" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check the status of operator<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the status information of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
status information of operator will be showed, e.g. current, available, forbidden</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_op_status.sh</step>
</case>

<case name="3G_oFn_NW_OperatorName" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check the name of operator<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the name of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
name of operator will be showed if it supported, e.g. T-Moblin etc.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_op_name.sh</step>
</case>

<case name="3G_oFn_NW_OperatorTechnology" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check Operator technology information<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the technology information of network<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
technology information of network will be showed, e.g. GSM, UMTS etc.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_op_tech.sh</step>
</case>

<case name="3G_oFn_NW_mcc_mnc" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check MCC and MNC<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the MCC,MNC information<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
3 digital MCC code and 2 MNC code information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_net_mcc_mnc.sh</step>
</case>

<case name="3G_oFn_NW_change_RSSI" manual="true" timeout="90" requirement="2978" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check RSSI of network<br />
Run Instructions:<br />
<br />
1, adjust the signal strength value in phonesim<br />
2, check the changed RSSI value<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
RSSI value should be changed after step1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="Networking - Radio Settings" description="&lt;p&gt;1, it need specail modem to test this feature&lt;/p&gt;
&lt;p&gt;2, option modem would be a good one&lt;/p&gt;
&lt;p&gt;3,also it dpended on the network for setting,eg: gsm, umts, lte.&lt;/p&gt;">

<case name="2G_oFn_radioS_get_properties" manual="true" timeout="90" requirement="7153" type="Functional positive">
	<description><![CDATA[<p>Purpose:Get radio properties</p>
<p>Run Instructions:1, plug in modem and power on</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, Get current radio properties</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-radio properteis</p>
<p>Pass/Fail Criteria: user can find raido properties and the value will be one of gsm, umts, lte and any&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_radioS_set_gsm" manual="true" timeout="90" requirement="7153;4626" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:Set gsm radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set gsm properties</p>
<p>./test-radio&nbsp;RAT gsm</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is gsm</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_radioS_set_umts" manual="true" timeout="90" requirement="7153;4658" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:Set&nbsp;umts radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set&nbsp;umts properties</p>
<p>./test-radio RATumts</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is umts</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_radioS_set_any" manual="true" timeout="90" requirement="7153" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:Set any radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set&nbsp;any radio&nbsp;properties</p>
<p>./test-radio RAT any</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is any</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_radioS_get_properties" manual="true" timeout="90" requirement="7153" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:Get radio properties</p>
<p>Run Instructions:1, plug in modem and power on</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, Get current radio properties</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./test-radio properteis</p>
<p>Pass/Fail Criteria: user can find raido properties and the value will be one of gsm, umts, lte and any&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_radioS_set_gsm" manual="true" timeout="90" requirement="7153" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:Set gsm radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set gsm properties</p>
<p>./test-radio&nbsp;RAT gsm</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is gsm</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_radioS_set_umts" manual="true" timeout="90" requirement="7153" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:Set&nbsp;umts radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set&nbsp;umts properties</p>
<p>./test-radio RATumts</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is umts</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_radioS_set_any" manual="true" timeout="90" requirement="7153" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:Set any radio for modem</p>
<p>Run Instructions:</p>
<p>1, plug in modem and power on</p>
<p>2, set&nbsp;any radio&nbsp;properties</p>
<p>./test-radio RAT any</p>
<p>3, check properties</p>
<p>./test-radio properties</p>
<p>Pass/Fail Criteria:the value is any</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="Connectivity - GPRS" description="&lt;p&gt;1) you need test it on real network so plug in modem&lt;/p&gt;
&lt;p&gt;2) create context first : ./test-gprs createcontext&lt;/p&gt;
&lt;p&gt;3)active context: ./test-gprs activecontext&lt;/p&gt;
&lt;p&gt;you can use list-contexts to check the detail properties for each step&lt;/p&gt;">

<case name="2G_oFn_gprs_attach" manual="true" timeout="90" requirement="4662,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
attach gprs network twice<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, attach to gprs network<br />
# ./test-gprs attach<br />
3, check network status<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the attach status = 1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_detach" manual="true" timeout="90" requirement="4663,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Detach the modem from network<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, detaches the modem from network <br />
[root@xx]# ./test-gprs detach<br />
3, get attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the attached status = 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_create_context" manual="true" timeout="90" requirement="4664,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Create a context with the name GPRS<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-gprs attach <br />
2, create a context<br />
[root@xx]# ./test-gprs createcontext <br />
3,check the name of context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is context name information. Eg: &quot;GPRS&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_rm_context" manual="true" timeout="90" requirement="4664,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Remove gprs context<br />
Run Instructions:<br />
<br />
1, create a context <br />
[root@xx]# ./test-gprs createcontext<br />
2, remove this context<br />
[root@xx]# ./test-gprs removecontext<br />
3,check this context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
No context&nbsp;was showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_2DataConn_2Profiles" manual="true" timeout="90" requirement="4385" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Create two data connections with two profiles.<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create first context then active it</p>
<p>./test-gprs createcontext</p>
<p>./test-gprs setapn 0 cmnet</p>
<p>./test-gprs activecontext<br />
3, create second context then active this context<br />
./test-gprs createcontext</p>
<p>./test-gprs setapn 1 cmwap</p>
<p>./test-gprs activtecontext</p>
<p><br />
Pass/Fail Criteria:<br />
<br />
should get two IP address or interface (usb0, usb1) by ifconfig</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_list_context" manual="true" timeout="90" requirement="4664,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
List gprs context<br />
Run Instructions:<br />
1, create a context <br />
[root@xx]# ./test-gprs createcontext<br />
2, list this context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
There are APN, type, name, etc.&nbsp;such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_active_context" manual="true" timeout="90" requirement="4664,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
active context<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create a context and active it<br />
#./test-gprs activecontext <br />
3, check the status<br />
#./listcontext<br />
Pass/Fail Criteria:<br />
<br />
this context status is Active=1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_3context" manual="true" timeout="90" requirement="4385,4659" type="Functional positive" level="Component">
	<description><![CDATA[<p>Create two data connections with two profiles.<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create first context then active it</p>
<p>./test-gprs createcontext</p>
<p>./test-gprs setapn 0 cmnet</p>
<p>./test-gprs activecontext</p>
<p>3, create second context then active this context<br />
./test-gprs createcontext</p>
<p>./test-gprs setapn 1 cmwap</p>
<p>./test-gprs activtecontext</p>
<p>4, repeat step&nbsp;2 to create the third context</p>
<p>&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
should get two IP address or interface (usb0, usb1, usb2) by ifconfig</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_deactive_context" manual="true" timeout="90" requirement="4664,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Deactivate gprs context<br />
Run Instructions:<br />
<br />
1, create a context<br />
[root@xx]# ./test-gprs createcontext<br />
2, deactivate the context<br />
[root@xx]# ./test-gprs deactivatecontext<br />
3,check this context<br />
[root@xx]# ./list-context<br />
Pass/Fail Criteria:<br />
the active status =0&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_2context_1closed" manual="true" timeout="90" requirement="4385" type="Functional positive" level="Component">
	<description><![CDATA[<p>
<table class="simple">
    <tbody>
        <tr>
            <td class="bold" colspan="2">Description</td>
        </tr>
        <tr>
            <td colspan="2">
            <p>Close one context within&nbsp;two connections of&nbsp;two profiles.<br />
            Run Instructions:<br />
            <br />
            1, plug in modem and modem should attach the gprs network automatically<br />
            2, create first context then active it</p>
            <p>./test-gprs createcontext</p>
            <p>./test-gprs setapn 0 cmnet</p>
            <p>./test-gprs activecontext</p>
            <p>3, create second context then active this context<br />
            ./test-gprs createcontext</p>
            <p>./test-gprs setapn 1 cmwap</p>
            <p>./test-gprs activtecontext</p>
            <p>4, repeat step&nbsp;2 to create the third context</p>
            <p>&nbsp;3, close one context</p>
            <p>./test-gprs deactivatecontext 1<br />
            Pass/Fail Criteria:<br />
            <br />
            1, there is only one IP(context0) exsit.</p>
            </td>
        </tr>
    </tbody>
</table>
</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_deactive_AllContexts" manual="true" timeout="90" requirement="4664,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Deactivate all contexts<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context and active it<br />
3, deactivate the context <br />
./test-gprs deactivateall<br />
4, get context status<br />
./list-context<br />
Pass/Fail Criteria:<br />
<br />
the active status = 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_deactivate_2context" manual="true" timeout="90" requirement="4385" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_get_AttachedStatus" manual="true" timeout="90" requirement="4662,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get gprs attached status<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not attach, have to poweron modem and attach it manually <br />
2, check gprs attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is gprs attached information: Eg: true or false</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_PrimaryContext" manual="true" timeout="90" requirement="4664,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs primary context information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not attach, have to poweron modem and attach it manually <br />
2, check gprs attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is primary context information: Eg: /modemname/primarycontext1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_RoamAllowedInfo" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs roaming allowed information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the roaming allowed information<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is the roaming allowed information: true or false</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_PowerInfo" manual="true" timeout="90" requirement="2963,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs power information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the power information<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is the power information: 1 or 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_3context" manual="true" timeout="90" requirement="7956" type="Functional positive" level="Component">
	<description><![CDATA[<p>Create two data connections with two profiles.<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create first context then active it</p>
<p>./test-gprs createcontext</p>
<p>./test-gprs setapn 0 cmnet</p>
<p>./test-gprs activecontext</p>
<p>3, create second context then active this context<br />
./test-gprs createcontext</p>
<p>./test-gprs setapn 1 cmwap</p>
<p>./test-gprs activtecontext</p>
<p>4, repeat step&nbsp;2 to create the third context</p>
<p>&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
should get two IP address or interface (usb0, usb1, usb2) by ifconfig</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_network" manual="true" timeout="90" requirement="2978,4665" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network status<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network status information<br />
# ./list-modems</p>
<p>Pass/Fail Criteria:<br />
<br />
network information will be showed, e.g. registered, unknown</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_APN" manual="true" timeout="90" requirement="4679,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get APN name<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context<br />
3, set active context <br />
[root@xx]# ./test-gprs activecontext<br />
4, Get APN information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
APN information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_2DataConn_2Profiles" manual="true" timeout="90" requirement="7955;4668" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Create two data connections with two profiles.<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create first context then active it</p>
<p>./test-gprs createcontext</p>
<p>./test-gprs setapn 0 cmnet</p>
<p>./test-gprs activecontext<br />
3, create second context then active this context<br />
./test-gprs createcontext</p>
<p>./test-gprs setapn 1 cmwap</p>
<p>./test-gprs activtecontext</p>
<p><br />
Pass/Fail Criteria:<br />
<br />
should get two IP address or interface (usb0, usb1) by ifconfig</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_Bearer" manual="true" timeout="90" requirement="4679,4665" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network Technology information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network Technology information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the network bearer information will be showed if network supports it, E.g. none, UTRAN, GSM or edge, hspa</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_type" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get Type<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context then Get Type<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is type information : Internet, MMS, WAP by listing context.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_interface" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get interface of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context then Get interface<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is the interface information, such as usb0, ppp0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_ip" manual="true" timeout="90" requirement="4677;4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get IP of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context<br />
3. run # ifconfig <br />
4, dhclient [interface] eg: usb0<br />
# dhclient usb0 <br />
Pass/Fail Criteria:<br />
1, there is interface information in step3<br />
2, there is the IP address information in step4</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_gateway" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get gateway of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context <br />
3, Get the IP address<br />
run # ifconfig<br />
4,Get gateway<br />
run # route<br />
Pass/Fail Criteria:<br />
<br />
there is gateway information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_netmask" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get netmask of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context <br />
3, get ip address<br />
4, Get netmask<br />
type ifconfig<br />
Pass/Fail Criteria:<br />
<br />
there is netmask information: eg, 255,255,255.0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_method" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get Method of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context then Get method<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is method information e.g. &quot;static or dhcp &quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_LAC" manual="true" timeout="90" requirement="4679,4665" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network LAC information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network LAC information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the network LAC information will be showed if network supports it</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_get_CellId" manual="true" timeout="90" requirement="4679,4665" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network Cell ID information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network Cell ID information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the network Cell ID information will be showed if network supports it</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_set_APN" manual="true" timeout="90" requirement="4679,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set APN<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set APN <br />
./test-gprs setapn [apn]<br />
see apn information<br />
3, ./list-context</p>
<p>Pass/Fail Criteria:<br />
APN information will be showed by listing context</p>
<p>Check also oFono emits a signal when&nbsp;one of&nbsp;Connection Context&nbsp;property changes&nbsp;(use ./monitor-ofono to see the signal)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_set_pwd" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set password<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set the password <br />
[root@xx]# ./test-gprs setpassword[pwd]<br />
3, see password information<br />
[root@xx]# ./lsit-contexts</p>
<p>Pass/Fail Criteria:<br />
<br />
password information will be showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_set_name" manual="true" timeout="90" requirement="4678,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set name<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2,create a context then set context name <br />
[root@xx]# ./test-gprs setname [name]<br />
3 check name information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
new name information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_set_username" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set username<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set username <br />
[root@xx]# ./test-gprs setusername [name]<br />
3. check username information<br />
[root@xx]# ./list-context<br />
Pass/Fail Criteria:<br />
<br />
username information will be showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_set_type" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set type<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, set type <br />
[root@xx]# ./test-gprs settype [type]<br />
3. check type information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
type information will be internet</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_gprs_set_RoamAllowed" manual="true" timeout="90" requirement="4677,4665" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set roamingallowed<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, set roaming allowed <br />
# ./test-gprs setroamingallowed<br />
3, check the setting<br />
# ./list-contexts<br />
Pass/Fail Criteria:<br />
<br />
romaingallowed is true</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_attach" manual="true" timeout="90" requirement="4662,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
attach gprs network twice<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, attach to gprs network<br />
# ./test-gprs attach<br />
3, check network status<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the attach status = 1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_detach" manual="true" timeout="90" requirement="4663,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Detach the modem from network<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, detaches the modem from network <br />
[root@xx]# ./test-gprs detach<br />
3, get attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the attached status = 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_create_context" manual="true" timeout="90" requirement="4664,4666,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Create a context with the name GPRS<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-gprs attach <br />
2, create a context<br />
[root@xx]# ./test-gprs createcontext <br />
3,check the name of context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is context name information. Eg: &quot;GPRS&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_rm_context" manual="true" timeout="90" requirement="4664;4669,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Remove gprs context<br />
Run Instructions:<br />
<br />
1, create a context <br />
[root@xx]# ./test-gprs createcontext<br />
2, remove this context<br />
[root@xx]# ./test-gprs removecontext<br />
3,check this context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
No context&nbsp;was showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_list_context" manual="true" timeout="90" requirement="4664,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
List gprs context<br />
Run Instructions:<br />
1, create a context <br />
[root@xx]# ./test-gprs createcontext<br />
2, list this context<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
There are APN, type, name, etc.&nbsp;such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_active_context" manual="true" timeout="90" requirement="4664,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
active context<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create a context and active it<br />
#./test-gprs activecontext <br />
3, check the status<br />
#./listcontext<br />
Pass/Fail Criteria:<br />
<br />
this context status is Active=1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_deactive_context" manual="true" timeout="90" requirement="4664,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Deactivate gprs context<br />
Run Instructions:<br />
<br />
1, create a context<br />
[root@xx]# ./test-gprs createcontext<br />
2, deactivate the context<br />
[root@xx]# ./test-gprs deactivatecontext<br />
3,check this context<br />
[root@xx]# ./list-context<br />
Pass/Fail Criteria:<br />
the active status =0&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_deactive_AllContexts" manual="true" timeout="90" requirement="4664,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Deactivate all contexts<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context and active it<br />
3, deactivate the context <br />
./test-gprs deactivateall<br />
4, get context status<br />
./list-context<br />
Pass/Fail Criteria:<br />
<br />
the active status = 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_get_AttachedStatus" manual="true" timeout="90" requirement="4664,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get gprs attached status<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not attach, have to poweron modem and attach it manually <br />
2, check gprs attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is gprs attached information: Eg: true or false</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_PrimaryContext" manual="true" timeout="90" requirement="4664,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs primary context information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not attach, have to poweron modem and attach it manually <br />
2, check gprs attached status<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is primary context information: Eg: /modemname/primarycontext1</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_RoamAllowedInfo" manual="true" timeout="90" requirement="4664,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs roaming allowed information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the roaming allowed information<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is the roaming allowed information: true or false</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_PowerInfo" manual="true" timeout="90" requirement="2963,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs power information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the power information<br />
[root@xx]# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
there is the power information: 1 or 0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_APN" manual="true" timeout="90" requirement="4679,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get APN name<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context<br />
3, set active context <br />
[root@xx]# ./test-gprs activecontext<br />
4, Get APN information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
APN information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_Bearer" manual="true" timeout="90" requirement="4679,4681" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network Technology information<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network Technology information<br />
# ./test-gprs properties<br />
Pass/Fail Criteria:<br />
<br />
the network Bearer information will be showed if network supports it, E.g. GPRS, UTRAN, GSM,Nnone, HSPA etc</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_type" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get Type<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context then Get Type<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is type information : Internet, MMS, WAP by listing context.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_interface" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get interface of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context then Get interface<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is the interface information, such as usb0, ppp0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_ip" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get IP of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context<br />
3. run # ifconfig <br />
4, dhclient [interface] eg: usb0<br />
# dhclient usb0 <br />
Pass/Fail Criteria:<br />
1, there is interface information in step3<br />
2, there is the IP address information in step4</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_gateway" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get gateway of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context <br />
3, Get the IP address<br />
run # ifconfig<br />
4,Get gateway<br />
run # route<br />
Pass/Fail Criteria:<br />
<br />
there is gateway information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_netmask" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get netmask of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create and active a context <br />
3, get ip address<br />
4, Get netmask<br />
type ifconfig<br />
Pass/Fail Criteria:<br />
<br />
there is netmask information: eg, 255,255,255.0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_method" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get Method of setting<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, create and active a context then Get method<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
there is method information e.g. &quot;static or dhcp &quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_set_APN" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set APN<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set APN <br />
./test-gprs setapn [apn]<br />
see apn information<br />
3, ./list-context<br />
Pass/Fail Criteria:<br />
<br />
APN information will be showed by listing context</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_set_pwd" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set password<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set the password <br />
[root@xx]# ./test-gprs setpassword[pwd]<br />
3, see password information<br />
[root@xx]# ./lsit-contexts</p>
<p>Pass/Fail Criteria:<br />
<br />
password information will be showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_set_name" manual="true" timeout="90" requirement="4678;4682,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set name<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2,create a context then set context name <br />
[root@xx]# ./test-gprs setname [name]<br />
3 check name information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
new name information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_set_username" manual="true" timeout="90" requirement="4667,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set username<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, create a context then set username <br />
[root@xx]# ./test-gprs setusername [name]<br />
3. check username information<br />
[root@xx]# ./list-context<br />
Pass/Fail Criteria:<br />
<br />
username information will be showed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_set_type" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set type<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
2, set type <br />
[root@xx]# ./test-gprs settype [type]<br />
3. check type information<br />
[root@xx]# ./listcontext<br />
Pass/Fail Criteria:<br />
<br />
type information will be internet</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_set_RoamAllowed" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set roamingallowed<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, set roaming allowed <br />
# ./test-gprs setroamingallowed<br />
3, check the setting<br />
# ./list-contexts<br />
Pass/Fail Criteria:<br />
<br />
romaingallowed is true</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_gprs_get_network" manual="true" timeout="90" requirement="4677,4681" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
check gprs network status<br />
Run Instructions:<br />
<br />
1, plug in modem and modem should attach the gprs network automatically<br />
if not auto attach, you need to run <br />
# ./test-modem poweron <br />
and attach common to make it done <br />
2, check the network status information<br />
# ./list-modems</p>
<p>Pass/Fail Criteria:<br />
<br />
network information will be showed, e.g. registered, unknown</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="Connectivity - PPP" description="&lt;p&gt;PPP&amp;nbsp;&amp;nbsp;application test case&lt;/p&gt;">

<case name="2G_oFn_ppp_connecion" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Use ofono PPP module to test PPP connection</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. ping <a href="http://www.google.com">www.google.com</a> to check if the network connection is setup</p>
<p>Pass/Fail Criteria:</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><font size="2"><span lang="EN-US"><span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US"><font face="Arial"><span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US">The ppp network connection has setup</span></font></span></span></font></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p>&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_connection_stability" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test connection stability</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;upload&nbsp;serval &nbsp;files&nbsp;to &nbsp;the FTP server ( the server is <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#005599"><a href="ftp://ftp.intel.com">ftp.intel.com</a></font><font size="-0">)</font></span></p>
<p><span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#000000" size="-0">8. open brower to view webpage</font></span></p>
<p><span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#000000" size="-0">9. Keep the GPRS data trasnfer for about 1 hour to check&nbsp; the connection stability</font></span></p>
<p>Pass/Fail Criteria:</p>
<p>The connection is stable</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_ftpUpload" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP upload function when PPP connection is created by ofono</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. open Filezilla to connect to <a href="ftp://ftp.intel.com">ftp.intel.com</a>&nbsp;to open</p>
<p>8. upload a 1M file to the ftp server incoming folder</p>
<p>Pass/Fail Criteria:</p>
<p>The file can been uploaded to ftp server</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_ftpDownload" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test ftp download</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. open Filezilla to connect to <a href="ftp://ftp.kernel.org">ftp.kernel.org</a></p>
<p>8. download a &nbsp;file&nbsp;from the ftp server</p>
<p>Pass/Fail Criteria:</p>
<p>The file download successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_AccessWeb" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test acess webpage&nbsp;when using&nbsp;OFONO PPP module to connect network</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. open browser to access <a href="http://www.google.com">www.google.com</a> and <a href="http://www.sina.com">www.sina.com</a> for ten minutes</p>
<p>Pass/Fail Criteria:</p>
<p>user can access webpage when PPP network connection is created</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_WebSurf_MakeCall" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test&nbsp;make call&nbsp;after PPP connection is created</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. ping <a href="http://www.google.com/"><font color="#005599">www.google.com</font></a> to check if the network connection is setup</p>
<p>8.&nbsp;open browser to launch <a href="http://www.google.com">www.google.com</a></p>
<p>9.&nbsp;Dial &quot;10010&quot; from the phone</p>
<p>Pass/Fail Criteria:</p>
<p>&nbsp;We can make call and view webpage at the same time</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_WebSurf_ftpUpload" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP upoload and acess webpage at the same time</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;open filezilla to connect&nbsp;FTP server (<a href="ftp://ftp.intel.com">ftp.intel.com</a>)&nbsp;</p>
<p>8.&nbsp;upload a file</p>
<p>9.&nbsp;Open browser to go to <a href="http://www.google.com">www.google.com</a></p>
<p>Pass/Fail Criteria:</p>
<p>We can do FTP upload and view web page at the same time</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_ftp_download_BigFile" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP Download big file 40M size file</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;open FTP tool filezilla</p>
<p>8.&nbsp;download a 40M file&nbsp;from the FTP server ( the server is <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#005599"><a href="ftp://ftp.kernel.org">ftp.kernel.org</a></font><font size="-0">)</font></span></p>
<p>Pass/Fail Criteria:</p>
<p>file can be download sucessfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="2G_oFn_ppp_ModemDisconn" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test modeom disconnect</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;press ping <a href="http://www.google.com">www.google.com</a> in command screen wo check the network is connected successfully</p>
<p>8.&nbsp;offline the&nbsp;Modem</p>
<p>9. Check the&nbsp;information&nbsp;in the&nbsp;terminal</p>
<p>Pass/Fail Criteria:</p>
<p>There is message &quot; the network is unreachable&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_connecion" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Use ofono PPP module to test PPP connection</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. ping <a href="http://www.google.com">www.google.com</a> to check if the network connection is setup</p>
<p>Pass/Fail Criteria:</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><font size="2"><span lang="EN-US"><span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US"><font face="Arial"><span style="font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 10.5pt" lang="EN-US">The ppp network connection has setup</span></font></span></span></font></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p>&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_connection_stability" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test connection stability</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;upload&nbsp;serval &nbsp;files&nbsp;to &nbsp;the FTP server ( the server is <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#005599"><a href="ftp://ftp.intel.com">ftp.intel.com</a></font><font size="-0">)</font></span></p>
<p><span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#000000" size="-0">8. open brower to view webpage</font></span></p>
<p><span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#000000" size="-0">9. Keep the GPRS data trasnfer for about 1 hour to check&nbsp; the connection stability</font></span></p>
<p>Pass/Fail Criteria:</p>
<p>The connection is stable</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_ftpUpload" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP upload function when PPP connection is created by ofono</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. open Filezilla to connect to <a href="ftp://ftp.intel.com">ftp.intel.com</a>&nbsp;to open</p>
<p>8. upload a 1M file to the ftp server incoming folder</p>
<p>Pass/Fail Criteria:</p>
<p>The file can been uploaded to ftp server</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_ftpDownload" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test ftp download</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. open Filezilla to connect to <a href="ftp://ftp.kernel.org">ftp.kernel.org</a></p>
<p>8. download a &nbsp;file&nbsp;from the ftp server</p>
<p>Pass/Fail Criteria:</p>
<p>The file download successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_AccessWeb" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test acess webpage&nbsp;when using&nbsp;OFONO PPP module to connect network</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US"><font face="Arial">nameserver 211.136.112.50 and <span style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt" lang="EN-US">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. open browser to access <a href="http://www.google.com">www.google.com</a> and <a href="http://www.sina.com">www.sina.com</a> for ten minutes</p>
<p>Pass/Fail Criteria:</p>
<p>user can access webpage when PPP network connection is created</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_WebSurf_MakeCall" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test&nbsp;make call&nbsp;after PPP connection is created</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7. ping <a href="http://www.google.com/"><font color="#005599">www.google.com</font></a> to check if the network connection is setup</p>
<p>8.&nbsp;open browser to launch <a href="http://www.google.com">www.google.com</a></p>
<p>9.&nbsp;Dial &quot;10010&quot; from the phone</p>
<p>Pass/Fail Criteria:</p>
<p>&nbsp;We can make call and view webpage at the same time</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_WebSurf_ftpUpload" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP upoload and acess webpage at the same time</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;open filezilla to connect&nbsp;FTP server (<a href="ftp://ftp.intel.com">ftp.intel.com</a>)&nbsp;</p>
<p>8.&nbsp;upload a file</p>
<p>9.&nbsp;Open browser to go to <a href="http://www.google.com">www.google.com</a></p>
<p>Pass/Fail Criteria:</p>
<p>We can do FTP upload and view web page at the same time</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_ftp_download_BigFile" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test FTP Download big file 40M size file</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;open FTP tool filezilla</p>
<p>8.&nbsp;download a 40M file&nbsp;from the FTP server ( the server is <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; color: rgb(31,73,125); font-size: 10.5pt"><font color="#005599"><a href="ftp://ftp.kernel.org">ftp.kernel.org</a></font><font size="-0">)</font></span></p>
<p>Pass/Fail Criteria:</p>
<p>file can be download sucessfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="3G_oFn_ppp_ModemDisconn" manual="true" timeout="90" requirement="2977" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Test modeom disconnect</p>
<p>Run Instructions:</p>
<p>1.run &nbsp;./create-context cmnet</p>
<p>2. run ./active-context</p>
<p>3. run ./list-context to check the IP address</p>
<p>4. run ifconfig ppp0 IP address netmask 255.255.255.0</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">5. route add default dev ppp0</font></span></p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText">&nbsp;</p>
<p style="margin: 0cm 0cm 0pt" class="MsoPlainText"><span lang="EN-US"><font size="2">6. nedit <span lang="EN-US">/etc/resolv.conf to add <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt"><font face="Arial">nameserver 211.136.112.50 and <span lang="EN-US" style="font-family: 'Calibri','sans-serif'; font-size: 10.5pt">nameserver 211.136.20.203</span></font></span></span></font></span></p>
<p>7.&nbsp;press ping <a href="http://www.google.com">www.google.com</a> in command screen wo check the network is connected successfully</p>
<p>8.&nbsp;offline the&nbsp;Modem</p>
<p>9. Check the&nbsp;information&nbsp;in the&nbsp;terminal</p>
<p>Pass/Fail Criteria:</p>
<p>There is message &quot; the network is unreachable&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="GSM String" description="&lt;p&gt;test cases for gsm_string&lt;/p&gt;">

<case name="RealNetwork_oFn_GS_CFU_realNW" manual="true" timeout="90" requirement="2970" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
check call forward in real network<br />
Run Instructions:<br />
<br />
(real network)<br />
61167537 should be replaced by your target phone number<br />
1, Input **21*61167537*11#<br />
2, Setup an incoming call<br />
3, Check this incoming call be forward to 61167537<br />
Pass/Fail Criteria:<br />
<br />
Call forward should work well</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CF_interrogat" manual="true" timeout="90" requirement="2970" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
cf interrogate<br />
Run Instructions:<br />
1 Input *#002#<br />
or ./test-ss-gsm-string ss-cf-interrogate<br />
Pass/Fail Criteria:<br />
<br />
the status of cf should be displayed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_gsm_cf_all.sh</step>
</case>

<case name="RealNetwork_oFn_GS_CF_active" manual="true" timeout="90" requirement="2970" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
cf active<br />
Run Instructions:<br />
1 Input *002*61167537**20#<br />
or ./test-ss-gsm-string ss-cf-active [number]<br />
2, check the output of phonesim log<br />
Pass/Fail Criteria:<br />
cf active information will be showed, e.g.there is the number in AT+CCFC=4,3,</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CF_deactive" manual="true" timeout="90" requirement="2970" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
cf deactive<br />
Run Instructions:<br />
1 ./test-ss-gsm-string ss-cf-deactive<br />
Pass/Fail Criteria:<br />
cf deactive information will be showed, e.g. AT+CCFC=4,0</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CFB_interrogat" manual="true" timeout="90" requirement="4403" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFB interrogate<br />
Run Instructions:<br />
1, Input *#67# <br />
./test-ss-gsm-string ss-cfb-voice-interrogate<br />
<br />
Pass/Fail Criteria:<br />
the CFB status should be displayed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_gsm_cf_busy.sh</step>
</case>

<case name="RealNetwork_oFn_GS_CFB_deactive" manual="true" timeout="90" requirement="4403" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFB deactive<br />
Run Instructions:<br />
1, Input #67**11# , <br />
./test-ss-gsm-string ss-cfb-voice-deactive<br />
<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=1,0,,,1 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CFNRc_active" manual="true" timeout="90" requirement="4405" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFNRc active<br />
Run Instructions:<br />
1, Input *62*61167537*13# , <br />
./test-ss-gsm-string ss-cfnrc-fax-active [number]<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=3,3,,,4 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CFNRc_interrogat" manual="true" timeout="90" requirement="4405" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFNRc interrogate<br />
Run Instructions:<br />
1, Input *#62**13#<br />
./test-ss-gsm-string ss-cfnrc-fax-interrogate<br />
Pass/Fail Criteria:<br />
the CFNRc status should be displayed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_gsm_cf_nrc.sh</step>
</case>

<case name="RealNetwork_oFn_GS_CFNRc_deactive" manual="true" timeout="90" requirement="4405" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFNRc deactive<br />
Run Instructions:<br />
1, Input #62**13# , <br />
./test-ss-gsm-string ss-cfnrc-fax-active<br />
<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=3,0,,,4 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CFNRy_deactive" manual="true" timeout="90" requirement="4405" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFNRy deactive<br />
Run Instructions:<br />
1, Input #61**20# ,<br />
./test-ss-gsm-string ss-cfnry-data-deactive<br />
Pass/Fail Criteria:<br />
user can find AT+CCFC=2,0,,,48 such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CFB_active" manual="true" timeout="90" requirement="4403" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFB active<br />
Run Instructions:<br />
1, Input **67*61167537*11#<br />
./test-ss-gsm-string ss-cfb-voice-active [number]<br />
<br />
Pass/Fail Criteria:<br />
user can find the nubmer information for CFB</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CFNRy_interrogat" manual="true" timeout="90" requirement="4404" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFNRy interrogate<br />
Run Instructions:<br />
1, Input *#61# , <br />
./test-ss-gsm-string ss-cfnry-data-interrogate<br />
<br />
Pass/Fail Criteria:<br />
the CFNRy data status should be displayed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_gsm_cf_nry.sh</step>
</case>

<case name="RealNetwork_oFn_GS_CFU_interrogat" manual="true" timeout="90" requirement="4402" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFU interrogate<br />
Run Instructions:<br />
1, Input *#21# <br />
./test-ss-gsm-string ss-cfu-all-interrogate<br />
Pass/Fail Criteria:<br />
the CFU status should be displayed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_gsm_cf_uncon.sh</step>
</case>

<case name="RealNetwork_oFn_GS_CFU_active" manual="true" timeout="90" requirement="4402" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFU active<br />
Run Instructions:<br />
1, Input **21*61167537*11# , <br />
or ./test-ss-gsm-string ss-cfu-all-active [number]<br />
Pass/Fail Criteria:<br />
number will be displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CFNRy_active" manual="true" timeout="90" requirement="4404" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CFNRy active for data service with 30s timeout<br />
Run Instructions:<br />
1, Input **61*61167537*20*30# ,<br />
./test-ss-gsm-string ss-cfnry-data-active [number]<br />
<br />
Pass/Fail Criteria:<br />
user can find the number in AT+CCFC=2,3,,..48,30 and such kind of information</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CW_interrogat" manual="true" timeout="90" requirement="4404" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
cw interrogate<br />
Run Instructions:<br />
1 Input *#43#<br />
or ./test-ss-gsm-string ss-cw-interrogate<br />
Pass/Fail Criteria:<br />
<br />
the cw interrogate will be displayed</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_gsm_cw_int.sh</step>
</case>

<case name="RealNetwork_oFn_GS_CW_deactive" manual="true" timeout="90" requirement="4407" type="Functional positive" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
cw deactive<br />
Run Instructions:<br />
1 Input #43#<br />
or ./test-ss-gsm-string ss-cw-deactive<br />
Pass/Fail Criteria:<br />
<br />
the cw deactive will be displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_GS_CW_active" manual="true" timeout="90" requirement="4407" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
cw active<br />
Run Instructions:<br />
1 Input *43#<br />
or ./test-ss-gsm-string ss-cw-active<br />
Pass/Fail Criteria:<br />
<br />
the cw active will be displayed</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_SS_CW_status" manual="true" timeout="90" requirement="4407" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check call in waitting status in real network<br />
Run Instructions:<br />
<br />
1 Enable this service<br />
2, setup two calls and make the second one is inwaiting status<br />
Pass/Fail Criteria:<br />
<br />
the second call should be in waiting status</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_CB_invalid_string" manual="true" timeout="90" requirement="2973" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
invalid # CB string<br />
Run Instructions:<br />
Invalid CB request by MMI string *330*1234#<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_cw_invalid_string" manual="true" timeout="90" requirement="2968" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
invalid # CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43*1234*4#<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_cw_invalid_sic" manual="true" timeout="90" requirement="2968" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
invalid CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43#123456<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_cb_invalid_sic" manual="true" timeout="90" requirement="2973" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
invalid * CB string<br />
Run Instructions:<br />
Invalid CB request by MMI string *330*1234*<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_cw_invalid_sib" manual="true" timeout="90" requirement="2968" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
invalid *# CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43*1234*4*#<br />
Pass/Fail Criteria:<br />
you will get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_cw_invalid_ending_string" manual="true" timeout="90" requirement="2968" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
invalid * CW string<br />
Run Instructions:<br />
1, Invalid CW request by MMI string *43#123456*<br />
Pass/Fail Criteria:<br />
should get invalidate format error from dbus</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="SS Setting">

<case name="Phonesim_oFn_SS_set_CFNRc" manual="false" timeout="90" requirement="4369,4392" type="Functional positive" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice not reachable<br />
Run Instructions:<br />
1, Set voice not reachable call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceNotReachable [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_set_cf_not_reach.sh</step>
</case>

<case name="Phonesim_oFn_SS_set_CFU" manual="false" timeout="90" requirement="4369,4392" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice unconditional<br />
Run Instructions:<br />
1, Set voice unconditional call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceUnconditional [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_set_cf_uncon.sh</step>
</case>

<case name="Phonesim_oFn_SS_set_CFNRy" manual="false" timeout="90" requirement="4369,4392" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice no reply<br />
Run Instructions:<br />
1, Set voice no reply call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceNoReply [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_set_cf_noreply.sh</step>
</case>

<case name="Phonesim_oFn_SS_set_CFB" manual="false" timeout="90" requirement="4369,4392" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice busy<br />
Run Instructions:<br />
1, Set voice busy call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceBusy [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_set_cf_busy.sh</step>
</case>

<case name="Phonesim_oFn_SS_CW_enable" manual="false" timeout="90" requirement="4369,4392" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Set CW voice call<br />
Run Instructions:<br />
1, Set call waiting for voice call CB value by UI<br />
or [root@xx]# ./test-ss-setting VoiceCallWaiting enabled/disabled<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The voice call waiting value are enabled/disabled</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_set_cw_enable.sh</step>
</case>

<case name="Phonesim_oFn_SS_CW_disable" manual="false" timeout="90" requirement="4369,4392" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
CW VoiceCallWaiting disabled<br />
Run Instructions:<br />
1, Set call waiting for voice call CB value <br />
[root@xx]# ./test-ss-setting VoiceCallWaiting disabled<br />
2, Check whether the value is set<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
VoiceCallWaiting is disabled successfully</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_set_cw_disable.sh</step>
</case>

<case name="3G_oFn_GS_CF_timeout" manual="false" timeout="90" requirement="4369" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Set CF Voice call timeout<br />
Run Instructions:<br />
1, Set timeout value of voice call by UI</p>
<p>./test-ss-setting VoiceNoReply 23424</p>
<p><br />
or[root@xx]# ./test-ss-setting timeout 30</p>
<p>2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The CF value is set</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_set_cf_timeout.sh</step>
</case>
</set>
<set name="Modem">

<case name="Phonesim_oFn_modem_poweron" manual="false" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
power on modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
<br />
Pass/Fail Criteria:<br />
power on can work correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_poweron.sh</step>
</case>

<case name="Phonesim_oFn_modem_enable_2modem" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Enable two modem<br />
Run Instructions:<br />
<br />
1, plugin modem <br />
2, modify /etc/ofono/modem.conf<br />
file to enable phonesim<br />
uncomment phonesim line<br />
3, enable modem<br />
./test-modem poweron<br />
4, launch phonesim <br />
Pass/Fail Criteria:<br />
<br />
you will see two modem log information in ofonod, you should see phonesim application also</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_modem_poweron" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
power on modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
<br />
Pass/Fail Criteria:<br />
power on can work correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_poweron.sh</step>
</case>

<case name="RealNetwork_oFn_modem_PowerStatus" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Check power status information of Modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
2, check power status<br />
[root@xx]# ./test-modem properties<br />
<br />
Pass/Fail Criteria:<br />
there is power status: true or false</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_power.sh</step>
</case>

<case name="RealNetwork_oFn_modem_serial" manual="true" timeout="90" requirement="7707,4370" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
check modem serial information<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
modem serial information will be showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_serial.sh</step>
</case>

<case name="RealNetwork_oFn_modem_enable_2modem" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Enable two modem<br />
Run Instructions:<br />
<br />
1, plugin modem <br />
2, modify /etc/ofono/phonesim.conf<br />
file to enable phonesim<br />
uncomment phonesim line<br />
3, launch phonesim <br />
4, enable modem<br />
./test-modem poweron<br />
5, check the modem status:./list-modem 6,if phonesim not power on yet, ./test-modem poweron 1 Pass/Fail Criteria:<br />
<br />
you will see two modem log information in ofonod, you should see phonesim application also</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_modem_model" manual="true" timeout="90" requirement="7707" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check model information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem <br />
2, run the test-modem poweron, test-modem online<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there should be the model information of modem</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_model.sh</step>
</case>

<case name="RealNetwork_oFn_modem_manufacturer" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check manufacturer information of modem<br />
Run Instructions:<br />
<br />
1, plug in the modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of script<br />
Pass/Fail Criteria:<br />
<br />
there will be manufacture information of modem in your output</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_manufacture.sh</step>
</case>

<case name="RealNetwork_oFn_modem_interface" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check interface information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there is the interface information of modem</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_interface.sh</step>
</case>

<case name="RealNetwork_oFn_modem_revision" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check revision information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there should be the revision information of modem if modem support it</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_revision.sh</step>
</case>

<case name="RealNetwork_oFn_modem_OnlineStatus" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose: Get online status</p>
<p>Run Instructions:</p>
<p>1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
modem&nbsp;online status&nbsp;will be showed correctly</p>
<p>Pass/Fail Criteria:</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_online.sh</step>
</case>

<case name="RealNetwork_oFn_modem_plug_unplug" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
plugin/plug out Modem<br />
Run Instructions:<br />
<br />
1, plug in modem <br />
2. plug out modem<br />
3. repeat steps1-2 for several times<br />
4, check the ofono log<br />
Pass/Fail Criteria:<br />
<br />
no abnormal message in ofono log when plugin/out modem</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_modem_poweroff" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
power off modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
2, power off modem<br />
[root@xx]# ./test-modem poweroff<br />
3,poweron modem again<br />
[root@xx]# ./test-modem poweron<br />
Pass/Fail Criteria:<br />
poweron/off can work correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_modem_poweroff.sh</step>
</case>
</set>
<set name="Modem Emulator" description="&lt;p&gt;precondition:&lt;/p&gt;
&lt;p&gt;1, launch test server which will simulate the atserver.&amp;nbsp; You will get the serial port information like /dev/pts/5&lt;/p&gt;
&lt;p&gt;2, modify the minicom configration:&amp;nbsp; set serail port as /dev/pts/5&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;">

<case name="Phonesim_oFn_ModemEmu_QueryS3" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S3<br />
Run Instructions:<br />
<br />
1, In minicom terminal window, enter: AT <br />
if return OK , run below steps <br />
enter: atS3 ?<br />
2, check the default value<br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, 13</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryS3s" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S3 scope<br />
Run Instructions:<br />
<br />
1, In minicom terminal window, enter: AT <br />
if return OK , run below steps <br />
Enter atS3=?<br />
2, wait the response <br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, S3: (0-127)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_SetS3" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set S3<br />
Run Instructions:<br />
<br />
1, Enter atS3=32</p>
<p>so you need&nbsp;type space key after input at command<br />
2,Enter atS3=13 [space]<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, can input the at command normally</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryS4" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S4<br />
Run Instructions:<br />
<br />
1, In minicom terminal window, enter: AT <br />
If return OK, then run below steps<br />
Enter atS4 ? <br />
2, check the default value<br />
<br />
Pass/Fail Criteria:<br />
1, &quot;ATS4 ?&quot; command will return: OK<br />
2, 10</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryS4s" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S4 scope<br />
Run Instructions:<br />
<br />
1, Enter atS4=?<br />
2, wait the response <br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, S4: (0-127)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_SetS4" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set S4<br />
Run Instructions:<br />
<br />
1, Enter atS4=33<br />
2,Enter atS4=10 [space]<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, will show !&nbsp; <br />
2, step2 will show OK</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryS5" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S5<br />
Run Instructions:<br />
<br />
1, Enter atS5 ?<br />
2, check the default value<br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, 8</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryS5s" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Query S5 scope<br />
Run Instructions:<br />
<br />
1, Enter atS5=?<br />
2, wait the response <br />
<br />
Pass/Fail Criteria:<br />
1, OK<br />
2, S5: (0-127)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_SetS5" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set S5<br />
Run Instructions:<br />
<br />
1, Enter atS5=33<br />
2,Enter atS5=10<br />
3, check respose<br />
<br />
Pass/Fail Criteria:</p>
<p>There is response to tell user the setting is successful</p>
<p>&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryE" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query E<br />
Run Instructions:<br />
<br />
1, Enter atE=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, E: (0-1)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_SetE0" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Set E0<br />
Run Instructions:<br />
<br />
1, Enter atE0<br />
2, Enter at<br />
3, check respose<br />
4, Enter atE1<br />
5,Enter at<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, can not see user input after step2<br />
3, will see usr input at command</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_Query&amp;D" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;D<br />
Run Instructions:<br />
<br />
1, Enter at&amp;D=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, &amp;D:(0-2)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_Query&amp;D0" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;D0<br />
Run Instructions:<br />
<br />
1, Enter at&amp;D0<br />
2, Enter at&amp;D2<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_Query&amp;C" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;C<br />
Run Instructions:<br />
<br />
1, Enter at&amp;C=?<br />
1, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, &amp;C: (0-1)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_Query&amp;C1" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query &amp;C1<br />
Run Instructions:<br />
<br />
1, Enter at&amp;C0<br />
2, Enter at&amp;C1<br />
3, Enter at&amp;C2<br />
4, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK in step 1,2<br />
2, ERROR in step 3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryX" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query X<br />
Run Instructions:<br />
<br />
1, Enter atX=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, X: (1-4)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryX1" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query X1<br />
Run Instructions:<br />
<br />
1, Enter atX1<br />
2, Enter atX2<br />
3, Enter atX3<br />
4, Enter atX4<br />
5,Enter atX5<br />
6, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK in step 1-4<br />
2, ERROR in step 5</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryV" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query V<br />
Run Instructions:<br />
<br />
1, Enter atV=?<br />
2, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, OK <br />
2, V:(0-1)</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryV0" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query V0<br />
Run Instructions:<br />
<br />
1, Enter atV0<br />
2, Enter atV1<br />
3, Enter atV2<br />
4, check respose<br />
<br />
Pass/Fail Criteria:<br />
1, 0 in step 1<br />
2, OK in step2<br />
3, ERROR in step3</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_QueryV1" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Query V1<br />
Run Instructions:<br />
<br />
1, Enter atV0<br />
2, Enter atV2<br />
3, check respose<br />
<br />
Pass/Fail Criteria:<br />
1,&nbsp;0 <br />
2, 4 in step2</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_ConcatenatingCmd" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Concatenating commands<br />
Run Instructions:<br />
1, Enter at+CFUN=1<br />
2, Enter at+CGREG? <br />
Enter at+CFUN?<br />
3,check respose<br />
<br />
Pass/Fail Criteria:<br />
There are two response:<br />
+CGREG: 0,4<br />
+CFUN: 4</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_neg_s3" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:</p>
<p>Check&nbsp;other value of S3 <br />
Run Instructions:<br />
<br />
1, Enter atS3=32</p>
<p>so you need&nbsp;type space key after input at command<br />
2,Enter&nbsp;[space]<br />
3, check respose<br />
4, repeat 2,3&nbsp; three times</p>
<p>5, Enter at [space]</p>
<p><br />
Pass/Fail Criteria:<br />
1,&nbsp;it will response OK at step 5&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_neg_nat" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:check non at command</p>
<p>Run Instructions:</p>
<p>1, Enter non at command eg: bcde</p>
<p>2, check response</p>
<p>Pass/Fail Criteria:Basically it should return Error or no any response</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="Phonesim_oFn_ModemEmu_neg_s5" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:check s5 command functional</p>
<p>Run Instructions:1, Enter atS5?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2, Enter at</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3, press backspace to remove the input</p>
<p>Pass/Fail Criteria:user can erase the the input&nbsp;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
<set name="SIM &amp; Phonebook">

<case name="RealNetwork_oFn_sim_get_LanguageList" manual="true" timeout="90" requirement="7707" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Get language list<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2, get supported language list <br />
./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
there was Preferredlanguages list: eg: en, de, it..</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_get_lag.sh</step>
</case>

<case name="RealNetwork_oFn_sim_get_phonebook" manual="true" timeout="90" requirement="4389,4480,4609" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
get phonebook of ME<br />
Run Instructions:<br />
<br />
1,poweron and online modem</p>
<p>./test-modem poweron;./test-modem online</p>
<p>2, read the phonebook<br />
./test-phonebook .<br />
Pass/Fail Criteria:<br />
<br />
all the record can be read correctly</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sim_get_card_id" manual="true" timeout="90" requirement="4389" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
Get card ID<br />
Run Instructions:<br />
1, launch ofonod and power on modem<br />
2, Get sim card ID information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
there is CardIdentifier information, eg: CardIdentifier=89492220744451242066</p>
<p>Not all sim card had this information.</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_get_card_id.sh</step>
</case>

<case name="RealNetwork_oFn_sim_get_mcc" manual="true" timeout="90" requirement="4389" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Get MCC code<br />
Run Instructions:<br />
1, launch ofonod and poweron modem<br />
2, Get sim card MCC information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is MCC information, eg: MCC=460</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_get_mcc.sh</step>
</case>

<case name="RealNetwork_oFn_sim_get_mnc" manual="true" timeout="90" requirement="4389" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
Get MNC code<br />
Run Instructions:<br />
1, launch ofonod and power on modem<br />
2, Get sim card MNC information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is MNC information, eg: MNC=01</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_get_mnc.sh</step>
</case>

<case name="RealNetwork_oFn_sim_get_ExistInfo" manual="true" timeout="90" requirement="4389" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
Get sim exist information<br />
Run Instructions:<br />
1, launch ofonod and poweron modem<br />
2, Get sim card exist information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is the information, eg: present=1</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_exist.sh</step>
</case>

<case name="RealNetwork_oFn_sim_get_pin_status" manual="true" timeout="90" requirement="4389" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
Get Pin code status<br />
Run Instructions:<br />
1, launch ofonod and poweron modem<br />
2, Get Pin code information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is pin code status information, eg: PinRequired = none</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_get_pin_status.sh</step>
</case>

<case name="RealNetwork_oFn_sim_enter_pin" manual="true" timeout="90" requirement="4389" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
Input pin code<br />
Run Instructions:<br />
1. Enable pin lock of sim card and power on device</p>
<p>2, enter pin code<br />
./test-sim enterpin [pin code]<br />
3, check the response of script<br />
.<br />
Pass/Fail Criteria:<br />
user can input pin code, no error respond</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_enter_pin.sh</step>
</case>

<case name="RealNetwork_oFn_sim_change_pin" manual="true" timeout="90" requirement="4479" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
sim lock: changing pin code<br />
Run Instructions:<br />
1, change pin code<br />
./test-sim changepin 2468 1234 .<br />
Pass/Fail Criteria:<br />
pin code can be changed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_change_pin.sh</step>
</case>

<case name="RealNetwork_oFn_sim_lock_pin" manual="true" timeout="90" requirement="4479,4481" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
enable pin<br />
Run Instructions:<br />
1, lock pin code<br />
./test-sim lockpin pin(1234)<br />
Pass/Fail Criteria:<br />
user can lock pin code</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_lock_pin.sh</step>
</case>

<case name="RealNetwork_oFn_sim_phonebook_SpecialChar" manual="true" timeout="90" requirement="4478,4614,4639" type="Functional positive" level="Feature">
	<description><![CDATA[<p>Purpose:<br />
special char in sim Phonebook<br />
Run Instructions:<br />
(real network)<br />
1,create a record in sim&nbsp;card (with special char eg:&quot;*&quot;,&quot;B&quot;,&quot;#&quot; in number of record)<br />
Pass/Fail Criteria:<br />
the record can be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sim_unlock_pin" manual="true" timeout="90" requirement="4479,4481" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
disable pin code<br />
Run Instructions:<br />
1, unlock pin code<br />
./test-sim unlockpin pin(1234)<br />
Pass/Fail Criteria:<br />
user can unlock pin code</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_unlock_pin.sh</step>
</case>

<case name="RealNetwork_oFn_sim_phonebook_LongChar" manual="true" timeout="90" requirement="4479,4610,4615,4483,4639" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
long char in sim Phonebook<br />
Run Instructions:<br />
(real network)<br />
1, create a record in sim phonebook (more than 75 chars in name field)<br />
Pass/Fail Criteria:<br />
the record can be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sim_read_msisdn" manual="true" timeout="90" requirement="4619,4618" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Get msisdn number<br />
Run Instructions:<br />
1, read imsi number in sim card<br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
<br />
SubscriberNumbers information can be read correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_read_msisdn.sh</step>
</case>

<case name="RealNetwork_oFn_sim_set_msisdn" manual="true" timeout="90" requirement="4619,4622,4475,4618,4473" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Set msisdn number<br />
Run Instructions:<br />
1, set msisdn number<br />
./test-sim set [number]<br />
Pass/Fail Criteria:<br />
1. msisdn number can be set correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_set_msisdn.sh</step>
</case>

<case name="RealNetwork_oFn_sim_update_msisdn" manual="true" timeout="90" requirement="4619,4618" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
get updated msisdn number<br />
Run Instructions:<br />
1, launch monitor<br />
./test-monitor-telephony<br />
2, set msisdn number<br />
./test-sim set [number]<br />
3, read updated msisdn number<br />
./test-sim properties<br />
.<br />
Pass/Fail Criteria:<br />
<br />
SubscriberNumbers number updated can be read correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_get_update_msisdn.sh</step>
</case>

<case name="RealNetwork_oFn_sim_read_imsi" manual="true" timeout="90" requirement="4510" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
get imsi number<br />
Run Instructions:<br />
1, read imsi number in sim card<br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
<br />
SubscriberIdentity information can be read correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_read_imsi.sh</step>
</case>

<case name="RealNetwork_oFn_sim_get_sdn" manual="true" timeout="90" requirement="4510,4482" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Get SDN number of sim file<br />
Run Instructions:<br />
1, Get SDN number <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
Will see all sdn information: e.g. name is Polic and number is 997</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_get_sdn.sh</step>
</case>

<case name="RealNetwork_oFn_sim_read_UCS2_Record" manual="true" timeout="90" requirement="4510,4639" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
get UCS2 record of sim card phonebook<br />
Run Instructions:<br />
<br />
1. create a record with Chinese name in SIM card phonebook<br />
2. read the record <br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
this record can be read and showed correctly</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_read_ucs2.sh</step>
</case>

<case name="RealNetwork_oFn_sim_record_withSameName" manual="true" timeout="90" requirement="4478,4483,4484,4639" type="Functional positive" level="Component">
	<description><![CDATA[<p>Purpose:<br />
two records with same name in sim phonebook<br />
Run Instructions:<br />
1. create two records with same name in sim card<br />
2, read those two records with same name <br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
the two record with same name can be read, eg: two records with name Chuck Woodbury</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sim_read_all_records" manual="true" timeout="90" requirement="4478,4615,4614,4639" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
Read sim card phonebook<br />
Run Instructions:<br />
<br />
1, read all phonebook record from SIM card<br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
All record can be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0" manual="true">/opt/mcts-ofono-tests/ofono_sim_read_pb.sh</step>
</case>

<case name="RealNetwork_oFn_sim_usim_MO" manual="true" timeout="90" requirement="4389" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
USIM/outgoing call<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2, setup a outgoing call <br />
./test-simple-voicecall dial [number]<br />
Pass/Fail Criteria:<br />
this outgoingcall can be setup successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sim_usim_Sendsms" manual="true" timeout="90" requirement="4389" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
USIM/sms<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2, send a message <br />
./test-sms send [number] [content]<br />
Pass/Fail Criteria:<br />
this message can be received at peer side</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="RealNetwork_oFn_sim_read_usim_records" manual="true" timeout="90" requirement="4478,4615,1614,4639" type="Functional positive">
	<description><![CDATA[<p>Purpose:<br />
USIM/phonebook<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2, read sim card phonebook <br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
all records can be read successfully</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
</suite>
</testdefinition>