<?xml version="1.0" encoding="UTF-8"?>
<testdefinition version="1.0">
<description></description>
<suite name="oFono" >
<set name="aoc" >

<case name="ofono_get_aoc_cm" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
AOC check call meter<br />
Run Instructions:<br />
1, Check call meter value <br />
./test-advice-of-charge properties<br />
2, check the output of script<br />
Pass/Fail Criteria:<br />
there is Call Meter value</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_get_aoc_cm.sh</step>
</case>

<case name="ofono_get_aoc_property" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
AOC check ACM<br />
Run Instructions:<br />
1, Check Accumulated call meter value <br />
./test-advice-of-charge properties<br />
2, check the output of script<br />
Pass/Fail Criteria:<br />
there is the value information of ACM,PPU, Currency&nbsp;etc</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_get_aoc_properties.sh</step>
</case>

<case name="ofono_aoc_reset" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
AOC Reset<br />
Run Instructions:<br />
1, Reset all value of AOC by UI<br />
or ./test-advice-of-charge reset 31337<br />
2, Check the script report<br />
Pass/Fail Criteria:<br />
No error report</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_aoc_reset.sh</step>
</case>

<case name="ofono_aoc_set_acmm" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
AOC set AccumulatedCallMeterMaximum<br />
Run Instructions:<br />
1, Set AccumulatedCallMeterMaximum value by UI<br />
or ./test-advice-of-charge set AccumulatedCallMeterMaximum [value] 31337<br />
2, Check the value is changed<br />
test-monitor-telephony<br />
Pass/Fail Criteria:<br />
the value is changed to first one</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_aoc_acmm.sh</step>
</case>

<case name="ofono_aoc_set_currency" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
AOC set Currency<br />
Run Instructions:<br />
1, Set Currency value by UI<br />
or ./test-advice-of-charge set Currency [TUK] 31337<br />
2, Check the value is changed<br />
test-monitor-telephony<br />
Pass/Fail Criteria:<br />
the value is changed to TUK</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_aoc_currency.sh</step>
</case>

<case name="ofono_aoc_set_ppu" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
AOC set PPU<br />
Run Instructions:<br />
1, Set PriceperUnit value by UI<br />
or ./test-advice-of-charge PricePerUnit [value] 31337<br />
2, Check the value is changed<br />
test-monitor-telephony<br />
Pass/Fail Criteria:<br />
the value is changed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_aoc_ppu.sh</step>
</case>
</set>
<set name="Gsm-string" >

<case name="ofono_gsm_cb_baicro" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Interrogate BAICRO incoming call<br />
Run Instructions:<br />
<br />
1, Input *#351*3579# <br />
./test-ss-gsm-cb ss-cb-baicro-interrogate<br />
Pass/Fail Criteria:<br />
all incoming call barring when roaming status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cb_baicro.sh</step>
</case>

<case name="ofono_gsm_cb_baoiceh" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Interrogate BAOICEH outgoing call<br />
Run Instructions:<br />
<br />
1, Input *#332*3579# <br />
./test-ss-gsm-cb ss-cb-baoiceh-interrogate<br />
<br />
Pass/Fail Criteria:<br />
alloutgoing international call barring status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cb_baoiceh.sh</step>
</case>

<case name="ofono_gsm_cb_baoic" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Interrogate BAOIC outgoing call<br />
Run Instructions:<br />
<br />
1, Input *#331*3579#<br />
./test-ss-gsm-cb ss-cb-baoic-interrrogate<br />
Pass/Fail Criteria:<br />
all outgoing international call barring status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cb_baoic.sh</step>
</case>

<case name="ofono_gsm_cb_baoc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
interrogate BAOC outgoing call<br />
Run Instructions:<br />
<br />
1, Input *#33*3579# <br />
./test-ss-gsm-cb ss-cb-baoc-interrogate<br />
<br />
Pass/Fail Criteria:<br />
all outgoing call barring status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cb_baoc.sh</step>
</case>

<case name="ofono_gsm_cb_all_inc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
interrogate all CB incoming<br />
Run Instructions:<br />
<br />
1, Input *#353*3579# <br />
./test-ss-gsm-cb ss-cb-allincoming-interrogate<br />
<br />
Pass/Fail Criteria:<br />
all incoming barring status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cb_all_inc.sh</step>
</case>

<case name="ofono_gsm_cb_all_out" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
interrogate all CB outgoing<br />
Run Instructions:<br />
<br />
1, Input *#333*3579# <br />
./test-ss-gsm-cb ss-cb-alloutgoing-interrogate<br />
<br />
Pass/Fail Criteria:<br />
all outgoing barring status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cb_all_out.sh</step>
</case>

<case name="ofono_gsm_cb_all" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Interrogate all CB<br />
Run Instructions:<br />
<br />
1, Input *#330*3579# <br />
./test-ss-gsm-cb ss-cb-all-interrogate<br />
<br />
Pass/Fail Criteria:<br />
call barring status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cb_all.sh</step>
</case>

<case name="ofono_gsm_cf_nrc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
CFNRc interrogate<br />
Run Instructions:<br />
1, Input *#62**13#<br />
./test-ss-gsm-string ss-cfnrc-fax-interrogate<br />
Pass/Fail Criteria:<br />
the CFNRc status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cf_nrc.sh</step>
</case>

<case name="ofono_gsm_cf_nry" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
CFNRy interrogate<br />
Run Instructions:<br />
1, Input *#61# , <br />
./test-ss-gsm-string ss-cfnry-data-interrogate<br />
<br />
Pass/Fail Criteria:<br />
the CFNRy data status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cf_nry.sh</step>
</case>

<case name="ofono_gsm_cf_busy" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
CFB interrogate<br />
Run Instructions:<br />
1, Input *#67# <br />
./test-ss-gsm-string ss-cfb-voice-interrogate<br />
<br />
Pass/Fail Criteria:<br />
the CFB status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cf_busy.sh</step>
</case>

<case name="ofono_gsm_cf_ucon" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
CFU interrogate<br />
Run Instructions:<br />
1, Input *#21# <br />
./test-ss-gsm-string ss-cfu-all-interrogate<br />
Pass/Fail Criteria:<br />
the CFU status should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cf_uncon.sh</step>
</case>

<case name="ofono_gsm_cf_all" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
cf interrogate<br />
Run Instructions:<br />
1 Input *#002#<br />
or ./test-ss-gsm-string ss-cf-interrogate<br />
Pass/Fail Criteria:<br />
<br />
the status of cf should be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cf_all.sh</step>
</case>

<case name="ofono_gsm_cw_int" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
cw interrogate<br />
Run Instructions:<br />
1 Input *#43#<br />
or ./test-ss-gsm-string ss-cw-interrogate<br />
Pass/Fail Criteria:<br />
<br />
the cw interrogate will be displayed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_cw_int.sh</step>
</case>

<case name="ofono_gsm_clir_int" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
clir interrogate<br />
Run Instructions:<br />
1 Input *#31#<br />
or ./test-ss-gsm-string ss-ld-interrogate 31<br />
Pass/Fail Criteria:<br />
the clir interrogate status should be displayed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_clir_int.sh</step>
</case>

<case name="ofono_gsm_colp_int" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
colp interrogate<br />
Run Instructions:<br />
<br />
1 Input *#76#<br />
or ./test-ss-gsm-string ss-ld-interrogate 76<br />
Pass/Fail Criteria:<br />
the status of colp should be displayed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_colp_int.sh</step>
</case>

<case name="ofono_gsm_clip_int" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
clip interrogate<br />
Run Instructions:<br />
1 Input *#30#<br />
or ./test-ss-gsm-string ss-ld-interrogate 30<br />
Pass/Fail Criteria:<br />
the clip interrogate status should be displayed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_gsm_clip_int.sh</step>
</case>
</set>
<set name="hfp" >
</set>
<set name="system" >
</set>
<set name="call-volume" >

<case name="call_volume_get_speaker" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get speaker volume value<br />
Run Instructions:<br />
<br />
1, get the value of volume<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
value of volume for speaker will be showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_volume_get_speaker.sh</step>
</case>

<case name="call_volume_get_mute" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get mute/unmute value<br />
Run Instructions:<br />
<br />
1, get mute/unmute value<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
<br />
mute/unmute value will be showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_volume_get_mute.sh</step>
</case>

<case name="call_volume_set_speaker" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set Speakerphone volume value<br />
Run Instructions:<br />
<br />
1, set the value of volume for speakerphone<br />
&nbsp;&nbsp; ./test-volume set Speakerphone 60<br />
Pass/Fail Criteria:<br />
the value of volume for speakerphone can be set correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_volume_set_speaker.sh</step>
</case>

<case name="call_volume_set_mute" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Set mute on<br />
Run Instructions:<br />
<br />
1, enable mute<br />
&nbsp;&nbsp; ./test-volume set mute<br />
Pass/Fail Criteria:<br />
<br />
mute is in ON after step1</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_volume_set_mute.sh</step>
</case>

<case name="call_volume_get_mic" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Get microphone volume value<br />
Run Instructions:<br />
<br />
1, get the value of volume<br />
&nbsp;&nbsp; ./test-volume properties<br />
Pass/Fail Criteria:<br />
value of volume for microphone will be showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_volume_get_microphone.sh</step>
</case>
</set>
<set name="voicemail" >

<case name="ofono_voicemail_wait_ind" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail waiting indication<br />
Run Instructions:<br />
<br />
1, Get voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail waiting indication information will be showed correctly: true or false</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_voicemail_wait_ind.sh</step>
</case>

<case name="ofono_voicemail_msg_count" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail message count number<br />
Run Instructions:<br />
<br />
1, Get voice mail message count number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail message count number will be showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_voicemail_msg_count.sh</step>
</case>

<case name="ofono_voicemail_set_number" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
set voicemail number<br />
Run Instructions:<br />
<br />
1, set voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting set [number]<br />
2, get voice mail number<br />
./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voicemail number can be set correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_voicemail_set_number.sh</step>
</case>

<case name="ofono_voicemail_number" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Read voicemail number<br />
Run Instructions:<br />
<br />
1, Get voice mail number information<br />
&nbsp;&nbsp;&nbsp;&nbsp; ./test-message-waiting properties<br />
Pass/Fail Criteria:<br />
<br />
voice mail number information will be showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_voicemail_number.sh</step>
</case>
</set>
<set name="sms_history" >
</set>
<set name="Sim_file" >

<case name="ofono_sim_get_lag" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get language list<br />
Run Instructions:<br />
1, plug-in USIM, switch on modem<br />
2, get supported language list <br />
./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
there was Preferredlanguages list: eg: en, de, it..</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_get_lag.sh</step>
</case>

<case name="ofono_sim_get_card_id" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get card ID<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card ID information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
there is CardIdentifier information, eg: CardIdentifier=89492220744451242066</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_get_card_id.sh</step>
</case>

<case name="ofono_sim_get_mcc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get MCC code<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card MCC information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is MCC information, eg: MCC=460</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_get_mcc.sh</step>
</case>

<case name="ofono_sim_get_pin_status" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get Pin code status<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get Pin code information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is pin code status information, eg: PinRequired = none</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_get_pin_status.sh</step>
</case>

<case name="ofono_sim_get_mnc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get MNC code<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card MNC information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is MNC information, eg: MNC=01</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_get_mnc.sh</step>
</case>

<case name="ofono_sim_exist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get sim exist information<br />
Run Instructions:<br />
1, launch ofonod and phonesim<br />
2, Get sim card exist information <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
There is the information, eg: present=1</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_exist.sh</step>
</case>

<case name="ofono_sim_get_upd_msisdn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
get updated msisdn number<br />
Run Instructions:<br />
1, launch monitor<br />
./test-monitor-telephony<br />
2, set msisdn number<br />
./test-sim set [number]<br />
3, read updated msisdn number<br />
./test-sim properties<br />
.<br />
Pass/Fail Criteria:<br />
<br />
SubscriberNumbers number updated can be read correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_get_update_msisdn.sh</step>
</case>

<case name="ofono_sim_change_pin" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
sim lock: changing pin code<br />
Run Instructions:<br />
1, change pin code<br />
./test-sim changepin 2468 1234 .<br />
Pass/Fail Criteria:<br />
pin code can be changed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_change_pin.sh</step>
</case>

<case name="ofono_sim_enter_pin" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Input pin code<br />
Run Instructions:<br />
1. change the pin code configuration first (modify the pin value= SIM PIN of default.xml)<br />
2, enter pin code<br />
./test-sim enterpin 2468<br />
3 check the phonesim log<br />
.<br />
Pass/Fail Criteria:<br />
user can input pin code</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_enter_pin.sh</step>
</case>

<case name="ofono_sim_reset_pin" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
reset pin<br />
Run Instructions:<br />
1. change the pin code configuration first (modify the pinname value= SIM PUK of default.xml)<br />
2, enter pin code<br />
./test-sim resetpin 13243546 2468 .<br />
Pass/Fail Criteria:<br />
user can reset pin</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_reset_pin.sh</step>
</case>

<case name="ofono_sim_lock_pin" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
enable pin<br />
Run Instructions:<br />
1, lock pin code<br />
./test-sim lockpin pin(1234)<br />
Pass/Fail Criteria:<br />
user can lock pin code</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_lock_pin.sh</step>
</case>

<case name="ofono_sim_unlock_pin" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
disable pin code<br />
Run Instructions:<br />
1, unlock pin code<br />
./test-sim unlockpin pin(1234)<br />
Pass/Fail Criteria:<br />
user can unlock pin code</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_unlock_pin.sh</step>
</case>

<case name="ofono_sim_set_msisdn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set msisdn number<br />
Run Instructions:<br />
1, set msisdn number<br />
./test-sim set [number]<br />
Pass/Fail Criteria:<br />
1. msisdn number can be set correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_set_msisdn.sh</step>
</case>

<case name="ofono_sim_read_msisdn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get msisdn number<br />
Run Instructions:<br />
1, read imsi number in sim card<br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
<br />
SubscriberNumbers information can be read correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_read_msisdn.sh</step>
</case>

<case name="ofono_sim_read_imsi" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
get imsi number<br />
Run Instructions:<br />
1, read imsi number in sim card<br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
<br />
SubscriberIdentity information can be read correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_read_imsi.sh</step>
</case>

<case name="ofono_sim_get_sdn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Get SDN number of sim file<br />
Run Instructions:<br />
1, Get SDN number <br />
./test-sim properties<br />
Pass/Fail Criteria:<br />
Will see all sdn information: e.g. name is Polic and number is 997</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_get_sdn.sh</step>
</case>

<case name="ofono_sim_read_ucs2" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
get UCS2 record of sim card phonebook<br />
Run Instructions:<br />
<br />
1. create a record with Chinese name in SIM card phonebook<br />
2. read the record <br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
this record can be read and showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_read_ucs2.sh</step>
</case>

<case name="ofono_sim_read_pb" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Read sim card phonebook<br />
Run Instructions:<br />
<br />
1, read all phonebook record from SIM card<br />
./test-phonebook<br />
Pass/Fail Criteria:<br />
All record can be read and with Vcard3.0 format</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sim_read_pb.sh</step>
</case>
</set>
<set name="Networking" >

<case name="ofono_net_scan" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Scan network<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, scan available [root@xx]# ./test-network scan<br />
Pass/Fail Criteria:<br />
all available network will be showed</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_scan.sh</step>
</case>

<case name="ofono_net_mode" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Check the mode of network<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the mode of network<br />
[root@xx]# ./test-network networkinfo<br />
Pass/Fail Criteria:<br />
the mode information of network will be showed, e.g. auto, off, manual</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_mode.sh</step>
</case>

<case name="ofono_net_status" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Check the status of network<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the status of network<br />
[root@xx]# ./test-network networinfo<br />
Pass/Fail Criteria:<br />
network status information will be showed, e.g. &quot;registered&quot;</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_status.sh</step>
</case>

<case name="ofono_net_op_status" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Check the status of operator<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the status information of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
status information of operator will be showed, e.g. current, available, forbidden</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_op_status.sh</step>
</case>

<case name="ofono_net_register" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Register the default network<br />
Run Instructions:<br />
1, power on modem <br />
2, registered to default network<br />
[root@xx]# ./test-network register<br />
Pass/Fail Criteria:<br />
it will register the modem to default network</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_register.sh</step>
</case>

<case name="ofono_net_reg_chosen_op" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Register device to chosen operator's network<br />
Run Instructions:<br />
<br />
1, select avaliable network<br />
[root@xx]# ./test-network networkinfo<br />
2, select one avaliable operator<br />
3, register to the chosen operator<br />
[root@xx]# ./test-network register [operator path]<br />
Pass/Fail Criteria:<br />
modem will register to the chosen operator</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_reg_chosen_op.sh</step>
</case>

<case name="ofono_net_mcc_mnc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check MCC and MNC<br />
Run Instructions:<br />
<br />
1, power on modem<br />
2, check the MCC,MNC information<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
3 digital MCC code and 2 MNC code information will be showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_mcc_mnc.sh</step>
</case>

<case name="ofono_net_op_name" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check the name of operator<br />
Run Instructions:<br />
<br />
1,power on modem<br />
2, check the name of operator<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
name of operator will be showed if it supported, e.g. T-Moblin etc.</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_op_name.sh</step>
</case>

<case name="ofono_net_op_tech" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check Operator technology information<br />
Run Instructions:<br />
<br />
1, power on modem <br />
2, check the technology information of network<br />
[root@xx]# ./test-network operatorinfo<br />
Pass/Fail Criteria:<br />
technology information of network will be showed, e.g. GSM, UMTS etc.</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_net_op_tech.sh</step>
</case>
</set>
<set name="Simple_Call" >

<case name="ofono_call_send_dtmf" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
send dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it <br />
[root@xx]# ./test-simple-call answer<br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9])<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_send_dtmf.sh</step>
</case>

<case name="ofono_call_hungup_hold" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
hangup the held call<br />
Run Instructions:<br />
1, setup an outgoing call<br />
[root@xx]# ./test-simplecall dial [number]<br />
2, hold this call<br />
[root@xx]# ./test-simplecall hold<br />
3, hangup this call [root@xx]# ./test-simple-voicecall hangup<br />
Pass/Fail Criteria:<br />
1, user can terminate he held call.</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_hungup_hold.sh</step>
</case>

<case name="ofono_call_hungup_in" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
hangup an incoming call by remote side<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote party and accept it <br />
[root@xx]# ./test-simple-call dial 199<br />
2, hangup this call by phonesim automatically<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can hang up the call<br />
3, in phonesim, this call will be terminated automatically</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_hungup_inc_mo.sh</step>
</case>

<case name="ofono_call_send_multi_dtmf" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
send multi dtmf during a call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side and accept it<br />
 [root@xx]# ./test-simple-call answer <br />
2, send a dtmf during this ongoing call<br />
[root@xx]# ./test-simple-call senddtmf [0-9,*,#,A,B,C,D]<br />
3. repeat step2 for 3 times<br />
4,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call<br />
2. user can send multi dtmf during the call<br />
3. this call is in active status<br />
note: in real network, the dtmf tone can be heard at remote side</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_send_multi-dtmf.sh</step>
</case>

<case name="ofono_call_sos" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
dial sos call with sim card<br />
Run Instructions:<br />
pre-condition: sim card is in target device<br />
1, setup sos call<br />
[root@xx]# ./test-simple-call dial 112 (or other number 911 etc.)<br />
2, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
3. terminate the sos call<br />
Pass/Fail Criteria:<br />
1, the sos call can be setup successfully<br />
2. user can terminate the sos call</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_sos.sh</step>
</case>

<case name="ofono_call_hungup" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
hang up an outgoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hangup this ongoing call<br />
[root@xx]# ./test-simple-voicecall hangupall<br />
3,check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
<br />
Pass/Fail Criteria:<br />
1. user can setup an outgoing call<br />
2. user can hangup the call<br />
3. no call is in active status</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_hungup.sh</step>
</case>

<case name="ofono_call_retrieve" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
retrieve an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, hold this outgoing call<br />
[root@xx]# ./test-simple-call hold<br />
3, retrieve this call<br />
[root@xx]# ./test-simple-call retrieve<br />
4, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can setup an outgoing call <br />
2. user can hold the call<br />
3. user can retrive the call<br />
4. The ongoing call is in active status after step3</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_retrieve.sh</step>
</case>

<case name="ofono_call_hold" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
hold an ongoing call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it <br />
[root@xx]# ./test-simple-call dial [number]<br />
2, Hold this call<br />
[root@xx]# ./test-simple-call hold<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can setup an outgoing call <br />
2. user can hold the call<br />
3. the ongoing call is in held status after step2</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_hold.sh</step>
</case>

<case name="ofono_call_reject_in" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
reject an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
2, reject this incoming call<br />
[root@xx]# ./test-simple-call hangup<br />
Pass/Fail Criteria:<br />
1,The incoming can be terminated</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_reject_inc.sh</step>
</case>

<case name="ofono_call_accept_in" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
accept an incoming call<br />
Run Instructions:<br />
<br />
1, setup an incoming call at remote side<br />
[root@xx]# ./test-simple-voicecall dial 199<br />
2, accept this incoming call<br />
[root@xx]# ./test-simple-call answer<br />
3, check this call status<br />
[root@xx]# ./test-multi-voicecall properties<br />
Pass/Fail Criteria:<br />
1. user can setup an incoming call <br />
2. this incoming call is in active status after step2</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_accept_inc.sh</step>
</case>

<case name="ofono_call_outgoing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
make an outgoing call<br />
Run Instructions:<br />
<br />
1, make an outgoing call and accept it from remote side<br />
./test-simple-call dial [number]<br />
Pass/Fail Criteria:<br />
1. user can setup outgoing call successfully<br />
note: in real network, user can listen the ring tone at peer side. While with phonesim, user will see AT command e.g. AT+CLCC,</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_outgoing.sh</step>
</case>

<case name="ofono_call_hide_callid" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose: enable hide call id to dial a call</p>
<p>Run Instructions:</p>
<p>[root@xx]# ./test-simple-voicecall hide-callid [number]</p>
<p>Pass/Fail Criteria: user can make this outgoing call successfully</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_hide_callid.sh</step>
</case>
</set>
<set name="Multi_call" >

<case name="ofono_private_chat_4" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
private chat(4 parties)<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, dial a call<br />
./test-simple-voicecall dial [number]<br />
5, add to multiparty<br />
./test-mult-voicecall multipartycall<br />
6, private talk with the second one<br />
./test-multi-voicecall privatechat 1<br />
Pass/Fail Criteria:<br />
Only the second call is in active status<br />
others are in held status</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_private_chat_4.sh</step>
</case>

<case name="ofono_add_one_party" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
add one party into a multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make an outgoing call<br />
./test-simple-call dial [number]<br />
5, add the held multiparty call in conversation<br />
./test-multi-voicecall multiparty<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call<br />
2. all calls are in active status after step5</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_add_one_party.sh</step>
</case>

<case name="ofono_hungup_one_party" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
hangup one party in multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multiparty<br />
4, make the third outgoing call<br />
./test-simple-call dial [number]<br />
5, hangup one party of multiparty<br />
./test-simple-call hang up 1<br />
Pass/Fail Criteria:<br />
1. user can hangup one party in multiparty call<br />
2. one call is in held status and another is in active status after step5</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_hungup_one_party.sh</step>
</case>

<case name="ofono_hungup_multi_party" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
hangup multiparty call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, make the third outgoing call <br />
./test-simple-call dial [number]<br />
5, hang up the multiparty call<br />
./test-multi-voicecall hangupmultiparty<br />
Pass/Fail Criteria:<br />
1. user can hangup multiparty call<br />
2. only the third outgoing call is in active status after step5</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_hungup_multiparty.sh</step>
</case>

<case name="ofono_private_chat_3" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
private chat(3 parties)<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. make an incoming call and accept it<br />
./test-simple-call answer [1]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
4, private talk with the second one<br />
./test-multi-voicecall privatechat<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call<br />
2. the first call is in held status and the second one is in active status</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_private_chat_3.sh</step>
</case>

<case name="ofono_create_multiparty" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
multiparty call<br />
Run Instructions:<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. setup second outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
3, create a multiparty call <br />
./test-mult-voicecall multipartycall<br />
<br />
Pass/Fail Criteria:<br />
1. user can make multiparty call and all calls are in active status</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_create_multiparty.sh</step>
</case>

<case name="ofono_explicit_call_transfer" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
transfer two calls<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
( ./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold <br />
3, setup second outgoing call and accept it at remote side<br />
4, transfer the two call <br />
./test-simple-call transfer<br />
Pass/Fail Criteria:<br />
1. user can transfer the two outgoing calls<br />
note: it need network support and with simulator we only can see the two call were released.</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_ect.sh</step>
</case>

<case name="ofono_swap_calls" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
swap two calls<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2. put it in hold status<br />
./test-simple-call hold<br />
3, setup second outgoing call and accept it at remote side<br />
4, swap the two call<br />
./test-simple-call hold/retrieve <br />
<br />
Pass/Fail Criteria:<br />
1. user can swap the two outgoing calls<br />
2. status of these two outgoing calls is showed correctly during swapping</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_swap_calls.sh</step>
</case>

<case name="ofono_call_deflect" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
call deflect<br />
Run Instructions:<br />
<br />
1, setup an incoming call and deflect it to another number<br />
./test-simple-call deflect [number]<br />
<br />
Pass/Fail Criteria:<br />
1. user can deflect the call to another number<br />
note: the feature needs network support. with simulator we only can see this call was released.</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_call_deflect.sh</step>
</case>

<case name="ofono_hold_and_answer" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
2 call:<br />
hold first outgoing call and accept incoming<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, hold the first outgoing call and then accept the incoming call<br />
./test-multi-voicecall holdandanswer<br />
4, release the active call<br />
./test-simple-call hang up 1<br />
Pass/Fail Criteria:<br />
1. the outgoing call can be hold and the incoming call can be accepted successfylly after step3<br />
2. the active call can be released after step4</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_hold_and_answer.sh</step>
</case>

<case name="ofono_release_and_accept" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
2call: release first outgoing call and accept incoming call<br />
Run Instructions:<br />
<br />
1, setup an outgoing call and accept it at remote side<br />
./test-simple-call dial [number]<br />
2, make an incoming call<br />
3, release the first outgoing call and accept this incoming call<br />
./test-multi-voicecall releaseandanswer<br />
Pass/Fail Criteria:<br />
only the incoming call is in active status after step3</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_release_and_answer.sh</step>
</case>

<case name="ofono_call_get_emergencylist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
get emergency call number of modem<br />
Run Instructions:<br />
<br />
1, get the emergency call number of modem<br />
( ./test-multi-voicecall getproperties<br />
<br />
Pass/Fail Criteria:<br />
sos number will be showed, e.g. 112, 911 etc.</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_emergency_list.sh</step>
</case>
</set>
<set name="Modem" >

<case name="ofono_modem_get_properties" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check model information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there should be the model information of modem</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_model.sh</step>
</case>

<case name="ofono_modem_serial" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
check modem serial information<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
modem serial information will be showed correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_serial.sh</step>
</case>

<case name="ofono_modem_power" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Check power status information of Modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
2, check power status<br />
[root@xx]# ./test-modem properties<br />
<br />
Pass/Fail Criteria:<br />
there is power status: true or false</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_power.sh</step>
</case>

<case name="ofono_modem_poweron" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
power on modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
<br />
Pass/Fail Criteria:<br />
power on can work correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_poweron.sh</step>
</case>

<case name="ofono_modem_poweroff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
power off modem<br />
Run Instructions:<br />
<br />
1, power on modem<br />
[root@xx]# ./test-modem poweron<br />
2, power off modem<br />
[root@xx]# ./test-modem poweroff<br />
3,poweron modem again<br />
[root@xx]# ./test-modem poweron<br />
Pass/Fail Criteria:<br />
poweron/off can work correctly</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_poweroff.sh</step>
</case>

<case name="ofono_modem_get_manuf" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check manufacture information of modem<br />
Run Instructions:<br />
<br />
1, plug in the modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ././test-modem properties<br />
3, check the output of script<br />
Pass/Fail Criteria:<br />
<br />
there will be manufacture information of modem in your output</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_manufacture.sh</step>
</case>

<case name="ofono_modem_interface" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check interface information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there is the interface information of modem</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_interface.sh</step>
</case>

<case name="ofono_modem_revision" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Check revision information of Modem<br />
Run Instructions:<br />
<br />
1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
there should be the revision information of modem</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_revision.sh</step>
</case>

<case name="ofono_modem_online" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose: Get online status</p>
<p>Run Instructions:</p>
<p>1, plugin modem or start the simulator(phonesim)<br />
2, run the test-modem script<br />
[root@xx]# ./test-modem properties<br />
3, check the output of test script<br />
Pass/Fail Criteria:<br />
<br />
modem&nbsp;online status&nbsp;will be showed correctly</p>
<p>Pass/Fail Criteria:</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_modem_online.sh</step>
</case>
</set>
<set name="SS-setting" >

<case name="ofono_set_cf_timeout" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CF Voice call timeout<br />
Run Instructions:<br />
1, Set timeout value of voice call by UI<br />
or[root@xx]# ./test-ss-setting timeout 30<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The value is set</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cf_timeout.sh</step>
</case>

<case name="ofono_set_cw_disable" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
CW VoiceCallWaiting disabled<br />
Run Instructions:<br />
1, Set call waiting for voice call CB value <br />
[root@xx]# ./test-ss-setting VoiceCallWaiting disabled<br />
2, Check whether the value is set<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
VoiceCallWaiting is disabled successfully</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cw_disable.sh</step>
</case>

<case name="ofono_set_cs_dis_callid" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
set HideCallerId disabled<br />
Run Instructions:<br />
1, enable HideCallerId<br />
[root@xx]# ./test-ss-setting HideCallerId disabled<br />
2, Check whether the value is disabled<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
HideCallerId is disabled successfully</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cs_dis_callid.sh</step>
</case>

<case name="ofono_set_cf_not_reach" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice not reachable<br />
Run Instructions:<br />
1, Set voice not reachable call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceNotReachable [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cf_not_reach.sh</step>
</case>

<case name="ofono_set_cf_uncon" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice unconditional<br />
Run Instructions:<br />
1, Set voice unconditional call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceUnconditional [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cf_uncon.sh</step>
</case>

<case name="ofono_set_cf_noreply" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice no reply<br />
Run Instructions:<br />
1, Set voice no reply call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceNoReply [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cf_noreply.sh</step>
</case>

<case name="ofono_set_cf_busy" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CF voice busy<br />
Run Instructions:<br />
1, Set voice busy call forward by UI<br />
or [root@xx]# ./test-ss-setting VoiceBusy [number]<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The number is set</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cf_busy.sh</step>
</case>

<case name="ofono_set_callid_enalbe" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CS caller ID<br />
Run Instructions:<br />
1, Set caller ID by UI<br />
or [root@xx]# ./test-ss-setting HideCallerId enabled/disabled<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The hidecallerid are enabled/disabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_enable_callid.sh</step>
</case>

<case name="ofono_set_cw_enable" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CW voice call<br />
Run Instructions:<br />
1, Set call waiting for voice call CB value by UI<br />
or [root@xx]# ./test-ss-setting VoiceCallWaiting enabled/disabled<br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
The voice call waiting value are enabled/disabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cw_enable.sh</step>
</case>

<case name="ofono_set_cb_dis_inc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceIncoming disable<br />
Run Instructions:<br />
1, Set VoiceIncoming CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceIncoming disable 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice incoming call value are disabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_dis_inc.sh</step>
</case>

<case name="ofono_set_cb_in_romaing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceIncoming when romaing<br />
Run Instructions:<br />
1, Set VoiceIncoming CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceIncoming whenromaing 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All when roaming Voice incoming call value are enabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_in_roaming.sh</step>
</case>

<case name="ofono_set_cb_incoming" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceIncoming<br />
Run Instructions:<br />
1, Set VoiceIncoming CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceIncoming always 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice incoming call value are enabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_incoming.sh</step>
</case>

<case name="ofono_set_cb_out_nh" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing internationalnothome<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing internationalnothome 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice international no home outgoing call value are enabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_out_nh.sh</step>
</case>

<case name="ofono_set_cb_dis_out" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing disabled<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing disable 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice outgoing call value are disabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_dis_out.sh</step>
</case>

<case name="ofono_set_out_in" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing international<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing international 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice international outgoing call value are enabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_out_in.sh</step>
</case>

<case name="ofono_set_cb_out" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB VoiceOutgoing all<br />
Run Instructions:<br />
1, Set VoiceOutgoing CB value by UI<br />
or [root@xx]# ./test-call-barring VoiceOutgoing all 3579 <br />
2, Check the value is changed<br />
[root@xx]# ./test-monitor-telephony<br />
Pass/Fail Criteria:<br />
All Voice outgoing call value are enabled</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_out.sh</step>
</case>

<case name="ofono_set_cb_disall" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Set CB disable all<br />
Run Instructions:<br />
1, Set disableall CB value by UI<br />
or [root@xx]# ./test-call-barring disableall 3579<br />
2, Check the output of script<br />
Pass/Fail Criteria:<br />
No error report</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_set_cb_disall.sh</step>
</case>
</set>
<set name="Stress" >
</set>
<set name="sms" >

<case name="ofono_sms_set_sc" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
set service center number<br />
Run Instructions:<br />
(real network)<br />
1, set service center number<br />
[root@xx]# ./test-sms sc [ number ]<br />
Pass/Fail Criteria:<br />
The service center number can be set successfully</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sms_set_sc.sh</step>
</case>

<case name="ofono_sms_send_ucs2" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
send UCS2 message<br />
Run Instructions:<br />
(real network)<br />
1, send a &quot;UCS2&quot; message<br />
./test-sms send (UCS2 content)<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sms_send_ucs2.sh</step>
</case>

<case name="ofono_sms_send_long" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
send long message<br />
Run Instructions:<br />
(real network)<br />
1, send a long message<br />
./test-sms send [content (more than 140 byte)] .<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sms_send_long.sh</step>
</case>

<case name="ofono_sms_send" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
send sms<br />
Run Instructions:<br />
(real network)<br />
1, send a sms<br />
./test-sms send [message content]<br />
Pass/Fail Criteria:<br />
1. the message can be sent without any error<br />
2. the message can be received at remote side</p>]]></description>
<step expected_result="0">/opt/mcts-ofono-tests/ofono_sms_send.sh</step>
</case>
</set>
<set name="call_history" >
</set>
</suite>
</testdefinition>
