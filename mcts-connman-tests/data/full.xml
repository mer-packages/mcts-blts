<?xml version="1.0" encoding="UTF-8"?>
<testdefinition version="1.0">
<description></description>
<suite name="ConnMan" >
<set name="BT" >
<pre_steps>
<step expected_result="0">/opt/mcts-connman-tests/BT/startup </step>
</pre_steps>

<case name="CM_BT_DeviceIsExist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device exists</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the BT technology</p>
<p>3. Get the device from BT technology</p>
<p>4. Check if the device is null</p>
<p><br />
Pass/Fail Criteria:</p>
<p>There is BT device</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_DeviceIsExist.py</step>

</case>

<case name="CM_BT_HasDHCP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device by default is dhcp enabled</p>
<p><br />
Run Instructions:</p>
<p>1. Get BTdevice</p>
<p>2. Get the IPv4 property of the device</p>
<p>3. Check method of IPv4 is dhcp</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The method is dhcp</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_HasDHCP.py</step>

</case>

<case name="CM_BT_BigPing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can ping local BT nework</p>
<p><br />
Run Instructions:</p>
<p>1. Get local network IP address</p>
<p>2.&nbsp;Ping with size = 1400</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_BigPing.py</step>

</case>

<case name="CM_BT_HasIP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device has IP address by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the BT technology</p>
<p>3. Get the device from BT technology</p>
<p>4. Get the IPv4 property and check the IP address</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The IP address is valid</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_HasIP.py</step>

</case>

<case name="CM_BT_Connect" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if there is an BT network by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get BT device</p>
<p>2. Ping local network</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response, meaning there is local network.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_Connect.py</step>

</case>

<case name="CM_BT_Disconnect" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can disconnet BT device from local network</p>
<p><br />
Run Instructions:</p>
<p>1. Make sure there is local network by default</p>
<p>2. Powered off the BT device</p>
<p>3. Check if we can ping local network</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping cannot receive any response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_Disconnect.py</step>

</case>

<case name="CM_BT_IfconfigDown" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig down</p>
<p><br />
Run Instructions:</p>
<p>1. Get the state of the BT device</p>
<p>2. The state is 'available'</p>
<p>3. Run ifconfig &lt;bnep&gt; down</p>
<p>4. Get the device state, check if the state is down</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The state is down</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_IfconfigDown.py</step>

</case>

<case name="CM_BT_IfconfigUp" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig up</p>
<p><br />
Run Instructions:</p>
<p>1. Run ifconfig &lt;bnep&gt; down</p>
<p>2. Check the device is down</p>
<p>3. Run ifconfig &lt;bnep&gt; up</p>
<p>2. Check the state is up</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the device state is up</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_IfconfigUp.py</step>

</case>

<case name="CM_BT_IsPoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device is on by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the Powered status of BT device</p>
<p>2. Check the Powered&nbsp;status is On</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The Powered status is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_IsPoweredOn.py</step>

</case>

<case name="CM_BT_IsReady" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device is ready to connect</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Check the device status</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The status is ready/online/login</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_IsReady.py</step>

</case>

<case name="CM_BT_IsReEnableWorks" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device still works after powered off and powered on</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Check if the network available</p>
<p>3. Powered off the device</p>
<p>4. Powered on the device</p>
<p>5. Check if the network available</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can ping local network</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_IsReEnableWorks.py</step>

</case>

<case name="CM_BT_PoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered off works for BTdevice</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Set powered property to off</p>
<p>3. Check powered property value is off</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is off</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_PoweredOff.py</step>

</case>

<case name="CM_BT_PoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered on works for BT</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Set powered to on</p>
<p>3. Check the powered property</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_PoweredOn.py</step>

</case>

<case name="CM_BT_SmallPing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if can ping with small packet for BT</p>
<p><br />
Run Instructions:</p>
<p>1. Get the BT device</p>
<p>2. Ping with small packet</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Receives ping response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_BT_SmallPing.py</step>

</case>
<post_steps>
<step expected_result="0">/opt/mcts-connman-tests/BT/cleanup </step>
</post_steps>
</set>
<set name="3G" >
<pre_steps>
<step expected_result="0">/opt/mcts-connman-tests/3G/startup </step>
</pre_steps>

<case name="CM_3G_DeviceIsExist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if 3G device exists</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the 3G technology</p>
<p>3. Get the device from 3G technology</p>
<p>4. Check if the device is null</p>
<p><br />
Pass/Fail Criteria:</p>
<p>There is 3G device</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_DeviceIsExist.py</step>

</case>

<case name="CM_3G_HasDHCP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if 3G device by default is dhcp enabled</p>
<p><br />
Run Instructions:</p>
<p>1. Get 3G device</p>
<p>2. Get the IPv4 property of the device</p>
<p>3. Check method of IPv4 is dhcp</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The method is dhcp</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_HasDHCP.py</step>

</case>

<case name="CM_3G_BigPing" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can ping local 3G nework</p>
<p><br />
Run Instructions:</p>
<p>1. Get local network IP address</p>
<p>2.&nbsp;Ping with size = 1400</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_BigPing.py</step>

</case>

<case name="CM_3G_HasIP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if 3G device has IP address by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the 3G technology</p>
<p>3. Get the device from 3G technology</p>
<p>4. Get the IPv4 property and check the IP address</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The IP address is valid</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_HasIP.py</step>

</case>

<case name="CM_3G_Connect" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if there is an 3G network by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get 3G device</p>
<p>2. Ping local network</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response, meaning there is local network.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_Connect.py</step>

</case>

<case name="CM_3G_Disconnect" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can disconnet 3G device from local network</p>
<p><br />
Run Instructions:</p>
<p>1. Make sure there is local network by default</p>
<p>2. Powered off the 3G device</p>
<p>3. Check if we can ping local network</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping cannot receive any response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_Disconnect.py</step>

</case>

<case name="CM_3G_IfconfigDown" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig down</p>
<p><br />
Run Instructions:</p>
<p>1. Get the state of the 3G device</p>
<p>2. The state is 'available'</p>
<p>3. Run ifconfig &lt;wwan&gt; down</p>
<p>4. Get the device state, check if the state is down</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The state is down</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_IfconfigDown.py</step>

</case>

<case name="CM_3G_IfconfigUp" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig up</p>
<p><br />
Run Instructions:</p>
<p>1. Run ifconfig &lt;wwan&gt; down</p>
<p>2. Check the device is down</p>
<p>3. Run ifconfig &lt;wwan&gt; up</p>
<p>2. Check the state is up</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the device state is up</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_IfconfigUp.py</step>

</case>

<case name="CM_3G_IsPoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if 3G device is on by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the Powered status of 3G device</p>
<p>2. Check the Powered&nbsp;status is On</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The Powered status is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_IsPoweredOn.py</step>

</case>

<case name="CM_3G_IsReady" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if 3G device is ready to connect</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Check the device status</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The status is ready/online/login</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_IsReady.py</step>

</case>

<case name="CM_3G_IsReEnableWorks" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if 3G device still works after powered off and powered on</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Check if the network available</p>
<p>3. Powered off the device</p>
<p>4. Powered on the device</p>
<p>5. Check if the network available</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can ping local network</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_IsReEnableWorks.py</step>

</case>

<case name="CM_3G_PoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered off works for 3G device</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Set powered property to off</p>
<p>3. Check powered property value is off</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is off</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_PoweredOff.py</step>

</case>

<case name="CM_3G_PoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered on works for 3G</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Set powered to on</p>
<p>3. Check the powered property</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_PoweredOn.py</step>

</case>

<case name="CM_3G_SmallPing" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if can ping with small packet for 3G</p>
<p><br />
Run Instructions:</p>
<p>1. Get the 3G device</p>
<p>2. Ping with small packet</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Receives ping response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_3G_SmallPing.py</step>

</case>
<post_steps>
<step expected_result="0">/opt/mcts-connman-tests/3G/cleanup </step>
</post_steps>
</set>
<set name="Property" >
<pre_steps>
<step expected_result="0">/opt/mcts-connman-tests/Property/startup </step>
</pre_steps>

<case name="CM_PM_State" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if State property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if State&nbsp;property is in&nbsp;&nbsp;['online', 'offline', 'connected']</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_State.py</step>

</case>

<case name="CM_PM_ActiveProfile" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if ActiveProfile property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if ActiveProfile property is '/profile/default'</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_ActiveProfile.py</step>

</case>

<case name="CM_PM_AvailableTechnologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if AvailableTechnologies property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if AvailableTechnologies property is in&nbsp;&nbsp;['ethernet', 'wifi', 'bluetooth', 'gprs']</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_AvailableTechnologies.py</step>

</case>

<case name="CM_PM_ConnectedTechnologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if State property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if ConnectedTechnologies property is in&nbsp;&nbsp;['ethernet', 'wifi', 'bluetooth', 'gprs']</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_ConnectedTechnologies.py</step>

</case>

<case name="CM_PM_DefaultTechnology" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if DefaultTechnology property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if DefaultTechnology property is in&nbsp;&nbsp;['ethernet', 'wifi', 'bluetooth', 'gprs']</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_DefaultTechnology.py</step>

</case>

<case name="CM_PM_EnabledTechnologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if EnabledTechnologies property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if EnabledTechnologies property is in&nbsp;&nbsp;['ethernet', 'wifi', 'bluetooth', 'gprs']</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_EnabledTechnologies.py</step>

</case>

<case name="CM_PM_OfflineMode" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if OfflineMode property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if OfflineMode property is in&nbsp;&nbsp;[True, False]</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_OfflineMode.py</step>

</case>

<case name="CM_PM_Profiles" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Profiles property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if Profiles property is '/profile/default'</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_Profiles.py</step>

</case>

<case name="CM_PM_Technologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Technologies property in Manager interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Manager interface</p>
<p>2. Check if Technologies property is in&nbsp;['/org/moblin/connman/technology/ethernet', '/org/moblin/connman/technology/wifi', '/org/moblin/connman/technology/bluetooth', '/org/moblin/connman/technology/3g']</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PM_Technologies.py</step>

</case>

<case name="CM_PS_State" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if State in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if State is in ['ready', 'idle', &quot;failure&quot;, &quot;association&quot;, &quot;configuration&quot;, &quot;login&quot;, &quot;online&quot;]</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_State.py</step>

</case>

<case name="CM_PS_APN" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if APN property in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get 3G service</p>
<p>2. Check if APN is&nbsp;not empty&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_APN.py</step>

</case>

<case name="CM_PS_MCC" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if MCC property in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get 3G service</p>
<p>2. Check if MCC is&nbsp;not empty&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_MCC.py</step>

</case>

<case name="CM_PS_MNC" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if MNC property in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get 3G service</p>
<p>2. Check if MNC is&nbsp;not empty&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_MNC.py</step>

</case>

<case name="CM_PS_Roaming" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Roaming property in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get 3G service</p>
<p>2. Check if Roaming is&nbsp;in [True, False]&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Roaming.py</step>

</case>

<case name="CM_PS_SetupRequired" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if SetupRequired property in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get 3G service</p>
<p>2. Check if SetupRequired is&nbsp;in [True, False]</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_SetupRequired.py</step>

</case>

<case name="CM_PS_AutoConnect" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if AutoConnect in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if AutoConnect is in [True, False]</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_AutoConnect.py</step>

</case>

<case name="CM_PS_Domains" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Domains in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Domains is not empty&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Domains.py</step>

</case>

<case name="CM_PS_Error" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Error in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Error is&nbsp;not in properties since Guest connect always success&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Error.py</step>

</case>

<case name="CM_PS_Favorite" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Favorite in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Favorite is in [True, False]</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Favorite.py</step>

</case>

<case name="CM_PS_Immutable" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Immutable in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Immutable is in [True, False]</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Immutable.py</step>

</case>

<case name="CM_PS_Mode" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Mode in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Mode is &quot;managed&quot;</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Mode.py</step>

</case>

<case name="CM_PS_Name" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Name in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Name is&nbsp; &quot;Guest&quot;&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Name.py</step>

</case>

<case name="CM_PS_Nameservers" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Nameservers in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Nameservers is&nbsp;not empty&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Nameservers.py</step>

</case>

<case name="CM_PS_Passphrase" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Passphrase in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Passphrase is&nbsp;empty for Guest network&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Passphrase.py</step>

</case>

<case name="CM_PS_PassphraseRequired" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if PassphraseRequired in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if PassphraseRequired is in [True, False]</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_PassphraseRequired.py</step>

</case>

<case name="CM_PS_Security" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Security in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Security is in ['none', 'wep', 'psk', 'ieee8021x', 'wpa', 'rsn']</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Security.py</step>

</case>

<case name="CM_PS_Strength" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Strength in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Strength is&nbsp;0-100&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Strength.py</step>

</case>

<case name="CM_PS_Type" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Test if Type in Service interface is valid.</p>
<p><br />
Run Instructions:</p>
<p>1. Get Guest service</p>
<p>2. Check if Type is in&nbsp;&quot;wifi&quot;&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_PS_Type.py</step>

</case>
</set>
<set name="Ethernet" >
<pre_steps>
<step expected_result="0">/opt/mcts-connman-tests/Ethernet/startup </step>
</pre_steps>

<case name="CM_Eth_DeviceIsExist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ethernet device exists</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the ethernet technology</p>
<p>3. Get the device from ethernet technology</p>
<p>4. Check if the device is null</p>
<p><br />
Pass/Fail Criteria:</p>
<p>There is ethernet device</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_DeviceIsExist.py</step>

</case>

<case name="CM_Eth_HasDHCP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ethernet device by default is dhcp enabled</p>
<p><br />
Run Instructions:</p>
<p>1. Get ethernet device</p>
<p>2. Get the IPv4 property of the device</p>
<p>3. Check method of IPv4 is dhcp</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The method is dhcp</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_HasDHCP.py</step>

</case>

<case name="CM_Eth_BigBroadcastPing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can ping local ethernet nework through broadcast</p>
<p><br />
Run Instructions:</p>
<p>1. Get local network IP address</p>
<p>2. Broadcast ping with size = 1400</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_BigBroadcastPing.py</step>

</case>

<case name="CM_Eth_HasIP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ethernet device has IP address by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the ethernet technology</p>
<p>3. Get the device from ethernet technology</p>
<p>4. Get the IPv4 property and check the IP address</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The IP address is valid</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_HasIP.py</step>

</case>

<case name="CM_Eth_Connect" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if there is an ethernet network by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get ethernet device</p>
<p>2. Ping local network</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response, meaning there is local network.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_Connect.py</step>

</case>

<case name="CM_Eth_Disconnect" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can disconnet ethernet device from local network</p>
<p><br />
Run Instructions:</p>
<p>1. Make sure there is local network by default</p>
<p>2. Powered off the ethernet device</p>
<p>3. Check if we can ping local network</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping cannot receive any response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_Disconnect.py</step>

</case>

<case name="CM_Eth_IfconfigDown" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig down</p>
<p><br />
Run Instructions:</p>
<p>1. Get the state of the ethernet device</p>
<p>2. The state is 'available'</p>
<p>3. Run ifconfig &lt;eth&gt; down</p>
<p>4. Get the device state, check if the state is down</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The state is down</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_IfconfigDown.py</step>

</case>

<case name="CM_Eth_IfconfigUp" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig up</p>
<p><br />
Run Instructions:</p>
<p>1. Run ifconfig &lt;eth&gt; down</p>
<p>2. Check the device is down</p>
<p>3. Run ifconfig &lt;eth&gt; up</p>
<p>2. Check the state is up</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the device state is up</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_IfconfigUp.py</step>

</case>

<case name="CM_Eth_IsPoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ethernet device is on by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the Powered status of ethernet device</p>
<p>2. Check the Powered&nbsp;status is On</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The Powered status is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_IsPoweredOn.py</step>

</case>

<case name="CM_Eth_IsReady" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ethernet device is ready to connect</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Check the device status</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The status is ready/online/login</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_IsReady.py</step>

</case>

<case name="CM_Eth_IsReEnableWorks" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ethernet device still works after powered off and powered on</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Check if the network available</p>
<p>3. Powered off the device</p>
<p>4. Powered on the device</p>
<p>5. Check if the network available</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can ping local network</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_IsReEnableWorks.py</step>

</case>

<case name="CM_Eth_PoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered off works for ethernet device</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Set powered property to off</p>
<p>3. Check powered property value is off</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is off</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_PoweredOff.py</step>

</case>

<case name="CM_Eth_PoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered on works for ethernet</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Set powered to on</p>
<p>3. Check the powered property</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_PoweredOn.py</step>

</case>

<case name="CM_Eth_SmallBroadcastPing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if can broadcast with small packet for ethernet</p>
<p><br />
Run Instructions:</p>
<p>1. Get the ethernet device</p>
<p>2. Broadcast ping with small packet</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Receives ping response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Eth_SmallBroadcastPing.py</step>

</case>
</set>
<set name="WiFi" >
<pre_steps>
<step expected_result="0">/opt/mcts-connman-tests/WiFi/startup </step>
</pre_steps>

<case name="CM_WF_Channel1" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 1</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 1</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel1.py</step>

</case>

<case name="CM_WF_Channel8" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 8</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 8</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel8.py</step>

</case>

<case name="CM_WF_Channel11" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 11</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 11</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel11.py</step>

</case>

<case name="CM_WF_Channel10" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 10</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 10</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel10.py</step>

</case>

<case name="CM_WF_Channel9" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 9</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 9</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel9.py</step>

</case>

<case name="CM_WF_Channel7" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 7</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 7</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

</case>

<case name="CM_WF_Channel6" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 6</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 6</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel6.py</step>

</case>

<case name="CM_WF_Channel5" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 5</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 5</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel5.py</step>

</case>

<case name="CM_WF_Channel4" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 4</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 4</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel4.py</step>

</case>

<case name="CM_WF_Channel3" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 3</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 3</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel3.py</step>

</case>

<case name="CM_WF_Channel2" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Channel 2</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Channel 2</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WF_Channel2.py</step>

</case>

<case name="CM_WA_AutoConnectFromSuspend" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check wifi can automatically connect from suspend</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to an AP</p>
<p>2. Suspend to mem</p>
<p>3. Resume from Suspend</p>
<p>4. Check if&nbsp; can connect to the AP automattically</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can connect automatically.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WA_AutoConnectFromSuspend.py</step>

</case>

<case name="CM_WA_ForgotPassword" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if can get error when the connection with password failed</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to AP with wrong password</p>
<p>2. The error property of the service will show error reason.</p>
<p># According to developer, ConnMan just report error in error property, but the passphrase will not be empty</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Error property is set.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WA_ForgotPassword.py</step>

</case>

<case name="CM_WA_DetectSecurityWEP" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ConnMan can detect AP with WEP</p>
<p><br />
Run Instructions:</p>
<p>1.&nbsp; Set AP with WEP</p>
<p>2. The AP is in WiFi service list, check the security of the&nbsp;service is WEP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the security of the&nbsp;service is WEP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WA_DetectSecurityWEP.py</step>

</case>

<case name="CM_WA_RememberPasswd" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ConnMan remember previous password</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to AP with password</p>
<p>2. Disconnect to the AP</p>
<p>3. Connect to the same AP without password</p>
<p>4. ConnMan should remember the password and can connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>ConnMan should remember the password and can connect to the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WA_RememberPasswd.py</step>

</case>

<case name="CM_WA_DetectSecurityNone" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ConnMan can detect AP with None security</p>
<p><br />
Run Instructions:</p>
<p>1.&nbsp; Set AP with None security</p>
<p>2. The AP is in WiFi service list, check the security of the&nbsp;service is None security</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the security of the&nbsp;service is WEP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WA_DetectSecurityNone.py</step>

</case>

<case name="CM_WA_DetectSecurityWPA" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ConnMan can detect AP with WPA</p>
<p><br />
Run Instructions:</p>
<p>1.&nbsp; Set AP with WPA</p>
<p>2. The AP is in WiFi service list, check the security of the&nbsp;service is WPA</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the security of the&nbsp;service is WEP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WA_DetectSecurityWPA.py</step>

</case>

<case name="CM_WA_DetectSecurityRSN" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if ConnMan can detect AP with RSN</p>
<p><br />
Run Instructions:</p>
<p>1.&nbsp; Set AP with RSN</p>
<p>2. The AP is in WiFi service list, check the security of the&nbsp;service is RSN</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the security of the&nbsp;service is WEP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WA_DetectSecurityRSN.py</step>

</case>

<case name="CM_WN_WEP40Wrong" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with wrong&nbsp;WEP64 will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP64</p>
<p>2. Connect to the AP with wrong WEP64, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP40Wrong.py</step>

</case>

<case name="CM_WN_WEP40Long" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with long than WEP64 (like 11110000000) &nbsp;will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP64</p>
<p>2. Connect to the AP with long than WEP64 (like 11110000000)&nbsp;&nbsp;, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP40Long.py</step>

</case>

<case name="CM_WN_WEP40Short" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with short than WEP64 (like 111100000)&nbsp;&nbsp;will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP64</p>
<p>2. Connect to the AP with short than WEP64 (like 111100000)&nbsp;, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP40Short.py</step>

</case>

<case name="CM_WN_WEP40ascii" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with wrong&nbsp;WEP64 ascii will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP64</p>
<p>2. Connect to the AP with wrong WEP64 ascii, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP40ascii.py</step>

</case>

<case name="CM_WN_WEP128Wrong" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with wrong&nbsp;WEP128 will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP128</p>
<p>2. Connect to the AP with wrong WEP128, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP128Wrong.py</step>

</case>

<case name="CM_WN_WEP128Long" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with long than WEP128&nbsp;&nbsp;will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP128</p>
<p>2. Connect to the AP with long than WEP128&nbsp;&nbsp;, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP128Long.py</step>

</case>

<case name="CM_WN_WEP128Short" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with short than WEP128&nbsp;will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP64</p>
<p>2. Connect to the AP with short than WEP128&nbsp;, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP128Short.py</step>

</case>

<case name="CM_WN_WEP128ascii" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi&nbsp;connect&nbsp;with wrong&nbsp;WEP128 ascii will fail</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP128</p>
<p>2. Connect to the AP with wrong WEP128 ascii, check if the connection fail.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the connection fail</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WN_WEP128ascii.py</step>

</case>

<case name="CM_WG_DeviceIsExist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device exists</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the WiFi technology</p>
<p>3. Get the device from WiFi technology</p>
<p>4. Check if the device is null</p>
<p><br />
Pass/Fail Criteria:</p>
<p>There is WiFi device</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_DeviceIsExist.py</step>

</case>

<case name="CM_WG_HasDHCP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device by default is dhcp enabled</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to Guest WiFi&nbsp; nework</p>
<p>2. Get the IPv4 property of the device</p>
<p>3. Check method of IPv4 is dhcp</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The method is dhcp</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_HasDHCP.py</step>

</case>

<case name="CM_WG_BigBroadcastPing" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can ping Guest WiFi nework through broadcast</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to Guest WiFi nework</p>
<p>2. Get Guest WiFi IP address</p>
<p>3. Broadcast ping with size = 1400</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_BigBroadcastPing.py</step>

</case>

<case name="CM_WG_HasIP" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device has IP address by default</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to Guest WiFi network</p>
<p>2. Get the device</p>
<p>3. Get the IPv4 property and check the IP address</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The IP address is valid</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_HasIP.py</step>

</case>

<case name="CM_WG_Connect" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Can connect to Guest WiFi network</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to Guest WiFi network</p>
<p>2. Ping Guest WiFi network</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_Connect.py</step>

</case>

<case name="CM_WG_Disconnect" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can disconnet Guest WiFi network</p>
<p><br />
Run Instructions:</p>
<p>1. Make sure there is Guest WiFi network</p>
<p>2. Powered off the device</p>
<p>3. Check if we can ping Guest WiFi network</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping cannot receive any response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_Disconnect.py</step>

</case>

<case name="CM_WG_IfconfigDown" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig down</p>
<p><br />
Run Instructions:</p>
<p>1. Get the state of the WiFi device</p>
<p>2. The state is 'available'</p>
<p>3. Run ifconfig &lt;eth&gt; down</p>
<p>4. Get the device state, check if the state is down</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The state is down</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_IfconfigDown.py</step>

</case>

<case name="CM_WG_IfconfigUp" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig up</p>
<p><br />
Run Instructions:</p>
<p>1. Run ifconfig &lt;wlan&gt; down</p>
<p>2. Check the device is down</p>
<p>3. Run ifconfig &lt;wlan&gt; up</p>
<p>2. Check the state is up</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the device state is up</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_IfconfigUp.py</step>

</case>

<case name="CM_WG_IsPoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device is on by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the Powered status of WiFi device</p>
<p>2. Check the Powered&nbsp;status is On</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The Powered status is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_IsPoweredOn.py</step>

</case>

<case name="CM_WG_IsReady" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device is ready to connect</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Check the device status</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The status is ready/online/login</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_IsReady.py</step>

</case>

<case name="CM_WG_IsReEnableWorks" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device still works after powered off and powered on</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Check if the network available</p>
<p>3. Powered off the device</p>
<p>4. Powered on the device</p>
<p>5. Check if the network available</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can ping local network</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_IsReEnableWorks.py</step>

</case>

<case name="CM_WG_PoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered off works for WiFi device</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Set powered property to off</p>
<p>3. Check powered property value is off</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is off</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_PoweredOff.py</step>

</case>

<case name="CM_WG_PoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered on works for WiFi device</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Set powered to on</p>
<p>3. Check the powered property</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_PoweredOn.py</step>

</case>

<case name="CM_WG_SmallBroadcastPing" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if can broadcast with small packet for WiFi device</p>
<p><br />
Run Instructions:</p>
<p>1. Get the WiFi device</p>
<p>2. Broadcast ping with small packet</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Receives ping response.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WG_SmallBroadcastPing.py</step>

</case>

<case name="CM_WS_Open" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Open mode</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_Open.py</step>

</case>

<case name="CM_WS_PSK2" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for PSK with RSN</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK with RSN</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_PSK2.py</step>

</case>

<case name="CM_WS_PSK1" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for PSK with TKIP</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK with TKIP</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_PSK1.py</step>

</case>

<case name="CM_WS_RSN" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for WPA RSN</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WPA RSN</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_RSN.py</step>

</case>

<case name="CM_WS_WPA" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for WPA TKIP mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WPA TKIP mode</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_WPA.py</step>

</case>

<case name="CM_WS_WEP128" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for WEP128</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP128</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_WEP128.py</step>

</case>

<case name="CM_WS_WEP40" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for WEP64</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP64</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_WEP40.py</step>

</case>

<case name="CM_WS_Hidden" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Hidden SSID mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Hidden SSID mode</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_Hidden.py</step>

</case>

<case name="CM_WS_Broadcast" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Broadcast SSID&nbsp;mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in Broadcast SSID mode</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_Broadcast.py</step>

</case>

<case name="CM_WS_OpenBroadcastWEP40" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Broadcast SSID, WEP40</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Broadcast SSID, WEP40</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenBroadcastWEP40.py</step>

</case>

<case name="CM_WS_OpenHiddenWEP40" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Disable Broadcast SSID, WEP40</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Disable Broadcast SSID, WEP40</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenHiddenWEP40.py</step>

</case>

<case name="CM_WS_OpenBroadcastRSN" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Broadcast SSID, RSN</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Broadcast SSID, RSN</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenBroadcastRSN.py</step>

</case>

<case name="CM_WS_OpenBroadcastTKIP" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Broadcast SSID, TKIP</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Broadcast SSID, TKIP</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenBroadcastTKIP.py</step>

</case>

<case name="CM_WS_OpenBroadcastWEP128" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Broadcast SSID, WEP128</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Broadcast SSID, WEP128</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenBroadcastWEP128.py</step>

</case>

<case name="CM_WS_OpenHiddenTKIP" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Disable Broadcast SSID, TKIP</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Disable Broadcast SSID, TKIP</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenHiddenTKIP.py</step>

</case>

<case name="CM_WS_OpenHiddenRSN" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Disable Broadcast SSID, RSN</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Disable Broadcast SSID, RSN</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenHiddenRSN.py</step>

</case>

<case name="CM_WS_OpenHiddenWEP128" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for Open mode, Disable Broadcast SSID, WEP128</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in PSK Open mode, Disable Broadcast SSID, WEP128</p>
<p>2. Connect to the AP</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_OpenHiddenWEP128.py</step>

</case>

<case name="CM_WS_WEP40ascii" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for WEP64 ascii</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP64 with key &quot;6161616161&quot;</p>
<p>2. Connect to the AP with key &quot;aaaaa&quot;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_WEP40ascii.py</step>

</case>

<case name="CM_WS_WEP128ascii" manual="false" timeout="180">
	<description><![CDATA[<p>Purpose:</p>
<p>Test WiFi for WEP128</p>
<p><br />
Run Instructions:</p>
<p>1. Set AP in WEP128 with key &quot;61616161616161616161616161&quot;</p>
<p>2. Connect to the AP with key &quot;aaaaaaaaaaaaa&quot;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can get IP and ping the AP</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_WS_WEP128ascii.py</step>

</case>
<post_steps>
<step expected_result="0">/opt/mcts-connman-tests/WiFi/cleanup </step>
</post_steps>
</set>
<set name="Signal" >

<case name="CM_SC_Networks" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Networks property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_Networks.py</step>

</case>

<case name="CM_SM_ConnectedTechnologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when ConnectedTechnologies property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SM_ConnectedTechnologies.py</step>

</case>

<case name="CM_SM_DefaultTechnology" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when DefaultTechnology property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SM_DefaultTechnology.py</step>

</case>

<case name="CM_SM_EnabledTechnologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when EnabledTechnologies property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SM_EnabledTechnologies.py</step>

</case>

<case name="CM_SM_Profiles" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Profiles property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Create a profile</p>
<p>2.2 sleep 2 seconds, and remove the profile</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SM_Profiles.py</step>

</case>

<case name="CM_SM_Services" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Services property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SM_Services.py</step>

</case>

<case name="CM_SM_State" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when State property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set offline mode</p>
<p>2.2 sleep 5 seconds, and set to online mode</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SM_State.py</step>

</case>

<case name="CM_SM_Strength" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Strength property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Invoke Manager.RequestScan('wifi')</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SM_Strength.py</step>

</case>

<case name="CM_SS_AutoConnect" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when AutoConnect property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set Service.AutoConnect to off</p>
<p>2.2 Set Service.AutoConnect to on</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SS_AutoConnect.py</step>

</case>

<case name="CM_SS_Favorite" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Favorite property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Connect to Guest WiFi network service</p>
<p>2.2 Remove the serivce</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SS_Favorite.py</step>

</case>

<case name="CM_SS_IPv4" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when IPv4 property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off/on WiFi device</p>
<p>2.2 Connect to Guest WiFi network</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SS_IPv4.py</step>

</case>

<case name="CM_SS_Passphrase" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Passphrase property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set Passphrase of service property</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SS_Passphrase.py</step>

</case>

<case name="CM_SC_Powered" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Powered property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_Networks.py</step>

</case>

<case name="CM_SC_Scanning" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Scanning property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Invoke Manager.RequestScan('wifi')</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_Scanning.py</step>

</case>

<case name="CM_SC_ConnectedTechnologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when ConnectedTechnologies property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set connman to offline mode</p>
<p>2.2 sleep 5 seconds, and set connman to online mode</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_ConnectedTechnologies.py</step>

</case>

<case name="CM_SC_Services" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Services property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_Services.py</step>

</case>

<case name="CM_SC_State" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when State property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_State.py</step>

</case>

<case name="CM_SC_Connected" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Connected property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set connman to offline mode</p>
<p>2.2 sleep 5 seconds, and set connman to online mode</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_Connected.py</step>

</case>

<case name="CM_SC_OfflineMode" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when OfflineMode property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set connman to offline mode</p>
<p>2.2 sleep 5 seconds, and set connman to online mode</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_OfflineMode.py</step>

</case>

<case name="CM_SC_DefaultTechnology" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when DefaultTechnology property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set connman to offline mode</p>
<p>2.2 sleep 5 seconds, and set connman to online mode</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_DefaultTechnology.py</step>

</case>

<case name="CM_SC_Favorite" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when Favorite property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set connman to offline mode</p>
<p>2.2 sleep 5 seconds, and set connman to online mode</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_Favorite.py</step>

</case>

<case name="CM_SC_IPv4" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when IPv4property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Set connman to offline mode</p>
<p>2.2 sleep 5 seconds, and set connman to online mode</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_IPv4.py</step>

</case>

<case name="CM_SC_EnabledTechnologies" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if signal is triggered when EnabledTechnologies property changed</p>
<p><br />
Run Instructions:</p>
<p>1. Set property_changed call back</p>
<p>2. Using following way to make the property changed</p>
<p>2.1 Powered off the device</p>
<p>2.2 sleep 5 seconds, and Powered on the device</p>
<p>3. Check if the property_changed called.</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The callback function is called.</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_SC_EnabledTechnologies.py</step>

</case>
</set>
<set name="Profile" >

<case name="CM_Prof_Add" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>CreateProfile</p>
<p><br />
Run Instructions:</p>
<p>1. Get&nbsp;manager from&nbsp;connman</p>
<p>2. Invoke manager.CreateProfile('TestProfile')</p>
<p>3. Check if the profile is created</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The profile is created</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Prof_Add.py</step>

</case>

<case name="CM_Prof_RemoveNoExist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Remove No exist Profile will lead an error</p>
<p><br />
Run Instructions:</p>
<p>1. Get&nbsp;manager from&nbsp;connman</p>
<p>2. Invoke manager.RemoveProfile('TestProfile')</p>
<p>3. Check if the profile is removed</p>
<p>&nbsp;4. Invoke manager.RemoveProfile('TestProfile') again</p>
<p>5. Check if there is an error</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The error NotFound is triggered</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Prof_RemoveNoExist.py</step>

</case>

<case name="CM_Prof_Remove" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>RemoveProfile</p>
<p><br />
Run Instructions:</p>
<p>1. Get&nbsp;manager from&nbsp;connman</p>
<p>2. Invoke manager.RemoveProfile('TestProfile')</p>
<p>3. Check if the profile is removed</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The profile is removed</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Prof_Remove.py</step>

</case>

<case name="CM_Prof_AddExist" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Createfile return error when creating an exist profile</p>
<p><br />
Run Instructions:</p>
<p>1. Get&nbsp;manager from&nbsp;connman</p>
<p>2. Invoke manager.CreateProfile('TestProfile')</p>
<p>3. Check if the profile is created</p>
<p>4. Invoke manager.CreateProfile('TestProfile'), Check if there is an error</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The error should be AlreadyExists</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Prof_AddExist.py</step>

</case>

<case name="CM_Prof_List" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check profile list.</p>
<p><br />
Run Instructions:</p>
<p>1. Get&nbsp;manager from&nbsp;connman</p>
<p>2. Get the profile list</p>
<p>3. Check if the profile 'TestProfile&quot; exist</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The profile exists</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Prof_List.py</step>

</case>

<case name="CM_Prof_ActiveProfile" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>CreateProfile</p>
<p><br />
Run Instructions:</p>
<p>1. Get&nbsp;manager from&nbsp;connman</p>
<p>2. Invoke manager.CreateProfile('TestProfile')</p>
<p>3. Check if the profile is created</p>
<p>4. Set the profile as active profile by manager.SetProperty('ActiveProfile', path)</p>
<p>5. Check it's the active profile</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The active&nbsp;profile is changed</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Prof_ActiveProfile.py</step>

</case>
</set>
<set name="Flight" >

<case name="CM_Flt_Offline" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Offline works</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check if all devices are powered off</p>
<p><br />
Pass/Fail Criteria:</p>
<p>all devices are powered off</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_Offline.py</step>

</case>

<case name="CM_Flt_Service" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if service is empty in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check if service is empty</p>
<p><br />
Pass/Fail Criteria:</p>
<p>There is no service in default offline mode</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_Service.py</step>

</case>

<case name="CM_Flt_EthNoPing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Ethernet cannot ping</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Ethernet cannot ping</p>
<p><br />
Pass/Fail Criteria:</p>
<p>There is no service in default offline mode</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_EthNoPing.py</step>

</case>

<case name="CM_Flt_EthIsPoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Ethernet device&nbsp;is powered off&nbsp;in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check ethetnet device status</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ethernet device&nbsp;is powered off&nbsp;in offline mode</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_EthIsPoweredOff.py</step>

</case>

<case name="CM_Flt_WiFiNoPing" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi cannot ping in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check if WiFi cannot ping in offline mode</p>
<p><br />
Pass/Fail Criteria:</p>
<p>WiFi cannot ping in offline mode</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_WiFiNoPing.py</step>

</case>

<case name="CM_Flt_WiFiIsPoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device is Powered off in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check if WiFi device is Powered off in offline mode</p>
<p><br />
Pass/Fail Criteria:</p>
<p>WiFi device is Powered off in offline mode</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_WiFiIsPoweredOff.py</step>

</case>

<case name="CM_Flt_EthPoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Ethernet device can be powered on in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check if Ethernet device can be powered on</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ethernet device can be powered on in default offline mode</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_EthPoweredOn.py</step>

</case>

<case name="CM_Flt_EthPoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Ethernet can be powered off again in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode, and powered on ethernet device</p>
<p>2. Check if Ethernet can be powered off again</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ethernet can be powered off again</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_EthPoweredOff.py</step>

</case>

<case name="CM_Flt_WiFiPoweredOn" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device can be powered on in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check if WiFi device can be powered on</p>
<p><br />
Pass/Fail Criteria:</p>
<p>WiFi device can be powered on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_WiFiPoweredOn.py</step>

</case>

<case name="CM_Flt_WiFiPoweredOff" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi device can be powered off again in offline mode</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Offline mode</p>
<p>2. Check if WiFi device can be powered off again</p>
<p><br />
Pass/Fail Criteria:</p>
<p>WiFi device can be powered off again</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_WiFiPoweredOff.py</step>

</case>

<case name="CM_Flt_Online" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if can set to online mode</p>
<p><br />
Run Instructions:</p>
<p>1. Powered on for all devices in offline mode</p>
<p>2. Set to Online mode</p>
<p>3. Check Manager is in Online mode and all devices are powered on</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Manager is in Online mode and all devices are powered on</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_Online.py</step>

</case>

<case name="CM_Flt_WiFiOnline" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if WiFi works after online again</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Online mode</p>
<p>2. Check if WiFi works after online again</p>
<p><br />
Pass/Fail Criteria:</p>
<p>WiFi works after online again</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_WiFiOnline.py</step>

</case>

<case name="CM_Flt_EthOnline" manual="false" timeout="90">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Ehternet works after online again</p>
<p><br />
Run Instructions:</p>
<p>1. Set to Online mode</p>
<p>2. Check if Ehternet works after online again</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ehternet works after online again</p>]]></description>

<step expected_result="0">/opt/mcts-connman-tests/CM_Flt_EthOnline.py</step>

</case>
</set>
</suite>
</testdefinition>
