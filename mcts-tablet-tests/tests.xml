<?xml version="1.0" encoding="UTF-8"?>
<testdefinition version="1.0">
<description></description>
<suite name="tablet" description="An collection of mcts test cases for tablet testing" >

<set name="BT" description="&lt;p&gt;Test suites for BT PAN&lt;/p&gt;
&lt;p&gt;Current we use AnyCom AP for BT PAN testing. Before run these test script, the machine must already pair to the AnyCom AP&lt;/p&gt;">

<case name="CM_BT_CheckProp_Powered" manual="true" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
check the tochnologies &quot;State&quot; property and interface status are right<br />
Run Instructions:<br />
1. boot system<br />
2. insert bluetooth dungle<br />
3. &quot;test-manager&quot; to check the &quot;State&quot; property<br />
4. &quot;hciconfig hci0&quot; to check the bt interface status<br />
Pass/Fail Criteria:<br />
State&nbsp;==&nbsp;enabled and hci0 is &quot;UP&quot;</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="CM_BT_Connect_PAN" manual="true" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
can connect bluetooth&nbsp; PANU network<br />
Run Instructions:<br />
<br />
pre-condition: The PANU service is ready in ConnMan<br />
1. Connect the PANU service&nbsp; through test-connman connect &lt;service&gt;<br />
2.Ping the PANU network AP<br />
Pass/Fail Criteria:<br />
<br />
Can ping the PANU AP</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="CM_BT_List_PAN" manual="true" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:<br />
<br />
can list bluetooth&nbsp; PAN devices<br />
Run Instructions:<br />
<br />
pre-condition: There is bluetooth device with PAN service enabled<br />
1. boot system with bluetooth device enabled<br />
2. Pair with the BT PANU server&nbsp;<br />
3. list all the networks and check if the BT PANU network is in it (test-connman services).<br />
Pass/Fail Criteria:<br />
<br />
The BT PANU network should be created and listed by ConnMan</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="CM_BT_Connect_Invalidnetwork" manual="true" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>BT should not crash when connect an invalid BT PANU server</p>
<p><br />
Run Instructions:</p>
<p>1.&nbsp;Pair to a BT PANU server</p>
<p>2. Make sure BT network is list in the service list (test-connman services)</p>
<p>3.Power off the BT PANU server</p>
<p>4. Reconnect the BT PANU server (test-connman connect &lt;BT service&gt;)</p>
<p><br />
Pass/Fail Criteria:</p>
<p>BT should fail to connect to an incalid BT network and ConnMan should not crash.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="CM_BT_Check_State" manual="true" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check ConnMan can synchronise the connect state with the real connection state</p>
<p><br />
Run Instructions:</p>
<p>1. Connect to a BT network, the state of BT network should be &quot;online&quot; (test-connman connect &lt;BT service&gt;)</p>
<p>2. Power off the Connected BT server</p>
<p>3. wait for serveral&nbsp;minutes&nbsp;and check the state of BT network. (list-services)</p>
<p><br />
Pass/Fail Criteria:</p>
<p>ConnMan should not be &quot;online&quot; when the connection fails.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="CM_BT_DeviceIsExist" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device exists</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the BT technology</p>
<p>3. Get the device from BT technology</p>
<p>4. Check if the device is null</p>
<p><br />
Pass/Fail Criteria:</p>
<p>There is BT device</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_DeviceIsExist.py</step>
</case>

<case name="CM_BT_HasDHCP" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device by default is dhcp enabled</p>
<p><br />
Run Instructions:</p>
<p>1. Get BTdevice</p>
<p>2. Get the IPv4 property of the device</p>
<p>3. Check method of IPv4 is dhcp</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The method is dhcp</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_HasDHCP.py</step>
</case>

<case name="CM_BT_BigPing" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can ping local BT nework</p>
<p><br />
Run Instructions:</p>
<p>1. Get local network IP address</p>
<p>2.&nbsp;Ping with size = 1400</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_BigPing.py</step>
</case>

<case name="CM_BT_HasIP" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device has IP address by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the technology list from connman</p>
<p>2. Get the BT technology</p>
<p>3. Get the device from BT technology</p>
<p>4. Get the IPv4 property and check the IP address</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The IP address is valid</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_HasIP.py</step>
</case>

<case name="CM_BT_Connect" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if there is an BT network by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get BT device</p>
<p>2. Ping local network</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping will receive response, meaning there is local network.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_Connect.py</step>
</case>

<case name="CM_BT_Disconnect" manual="false" timeout="180" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if we can disconnet BT device from local network</p>
<p><br />
Run Instructions:</p>
<p>1. Make sure there is local network by default</p>
<p>2. Powered off the BT device</p>
<p>3. Check if we can ping local network</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Ping cannot receive any response.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_Disconnect.py</step>
</case>

<case name="CM_BT_IfconfigDown" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig down</p>
<p><br />
Run Instructions:</p>
<p>1. Get the state of the BT device</p>
<p>2. The state is 'available'</p>
<p>3. Run ifconfig &lt;bnep&gt; down</p>
<p>4. Get the device state, check if the state is down</p>
<p>&nbsp;</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The state is down</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_IfconfigDown.py</step>
</case>

<case name="CM_BT_IfconfigUp" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if connman works with ifconfig up</p>
<p><br />
Run Instructions:</p>
<p>1. Run ifconfig &lt;bnep&gt; down</p>
<p>2. Check the device is down</p>
<p>3. Run ifconfig &lt;bnep&gt; up</p>
<p>2. Check the state is up</p>
<p><br />
Pass/Fail Criteria:</p>
<p>the device state is up</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_IfconfigUp.py</step>
</case>

<case name="CM_BT_IsPoweredOn" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device is on by default</p>
<p><br />
Run Instructions:</p>
<p>1. Get the Powered status of BT device</p>
<p>2. Check the Powered&nbsp;status is On</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The Powered status is on</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_IsPoweredOn.py</step>
</case>

<case name="CM_BT_IsReady" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device is ready to connect</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Check the device status</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The status is ready/online/login</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_IsReady.py</step>
</case>

<case name="CM_BT_IsReEnableWorks" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if BT device still works after powered off and powered on</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Check if the network available</p>
<p>3. Powered off the device</p>
<p>4. Powered on the device</p>
<p>5. Check if the network available</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Can ping local network</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_IsReEnableWorks.py</step>
</case>

<case name="CM_BT_PoweredOff" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered off works for BTdevice</p>
<p><br />
Run Instructions:</p>
<p>1. Get the device</p>
<p>2. Set powered property to off</p>
<p>3. Check powered property value is off</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is off</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_PoweredOff.py</step>
</case>

<case name="CM_BT_PoweredOn" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if Powered on works for BT</p>
<p><br />
Run Instructions:</p>
<p>1. Get device</p>
<p>2. Set powered to on</p>
<p>3. Check the powered property</p>
<p><br />
Pass/Fail Criteria:</p>
<p>The value is on</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_PoweredOn.py</step>
</case>

<case name="CM_BT_SmallPing" manual="false" timeout="90" type="Functional" subfeature="Bluetooth" insignificant="false">
	<description><![CDATA[<p>Purpose:</p>
<p>Check if can ping with small packet for BT</p>
<p><br />
Run Instructions:</p>
<p>1. Get the BT device</p>
<p>2. Ping with small packet</p>
<p><br />
Pass/Fail Criteria:</p>
<p>Receives ping response.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_SmallPing.py</step>
</case>
<case name="CM_BT_Upload" manual="false" timeout="90" type="Functional" insignificant="false" level="Feature">
	<description><![CDATA[<p>Purpose (Mandatory): This test case is used for test bluetooth upload.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory): /opt/mcts-connman-tests/CM_BT_Upload.py<br />
This commands basically do:<br />
+ Connect To the AP<br />
+ Upload/Download file to/from peer machine through the AP</p>
<p>Pass/Fail criteria (Mandatory): The command returns 0</p>
<p>Test Environment (Optional): Tester need to setup following test environment:<br />
+ An AP, a peer machine that connect to the same network<br />
+ Need to pair to the AP as normal BT cases<br />
+ Configure common/config.py to change&nbsp;method to transfer data file (cm_bt_download/upload). Tester needs to make sure the method works</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_Upload.py</step>
</case>

<case name="CM_BT_Download" manual="false" timeout="90" type="Functional" insignificant="false" level="Feature">
	<description><![CDATA[<p>Purpose (Mandatory): This test case is used for test Bluetooth download</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory): /opt/mcts-connman-tests/CM_BT_Download.py<br />
This commands basically do:<br />
+ Connect To the AP<br />
+ Upload/Download file to/from peer machine through the AP</p>
<p>Pass/Fail criteria (Mandatory): The command returns 0</p>
<p>Test Environment (Optional): Tester need to setup following test environment:<br />
+ An AP, a peer machine that connect to the same network<br />
+ Configure common/config.py to change&nbsp;method to transfer data file (cm_bt_download/upload). Tester needs to make sure the method works</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-connman-tests/CM_BT_Download.py</step>
</case>

</set>
</suite>
</testdefinition>
