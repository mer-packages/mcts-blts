/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Geoclue_Test
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Geoclue_Test

static
#ifdef G_HAVE_INLINE
inline
#endif

#define GEOCLUE_TEST_SERVICE	"org.freedesktop.Geoclue.Providers.Test"
#define GEOCLUE_TEST_PATH	"/org/freedesktop/Geoclue/Providers/Test"
#define GEOCLUE_TEST_INTERFACE	"org.freedesktop.Geoclue.Test"

inline gboolean
org_freedesktop_Geoclue_Test_set_address ( DBusGProxy *proxy, const gint IN_valid_for, const GHashTable* IN_address, GError **error )

{
	return dbus_g_proxy_call ( proxy, "SetAddress", error, G_TYPE_INT, IN_valid_for, dbus_g_type_get_map ( "GHashTable", G_TYPE_STRING, G_TYPE_STRING ), IN_address, G_TYPE_INVALID, G_TYPE_INVALID );
}

//start Address, when create client from mast, it must start address or position
void 
org_freedesktop_Geoclue_Test_address_start( DBusGProxy *proxy,  GError **error)
{
	 dbus_g_proxy_call ( proxy, "AddressStart" , error, G_TYPE_INVALID);
}
void 
org_freedesktop_Geoclue_Test_position_start( DBusGProxy *proxy,  GError **error)
{
	 dbus_g_proxy_call ( proxy, "PositionStart" , error, G_TYPE_INVALID);
}

typedef void ( *org_freedesktop_Geoclue_Test_set_address_reply ) ( DBusGProxy *proxy, GError *error, gpointer userdata );

static void
org_freedesktop_Geoclue_Test_set_address_async_callback ( DBusGProxy *proxy, DBusGProxyCall *call, void *user_data )
{
	DBusGAsyncData *data = ( DBusGAsyncData* ) user_data;
	GError *error = NULL;
	dbus_g_proxy_end_call ( proxy, call, &error, G_TYPE_INVALID );
	( * ( org_freedesktop_Geoclue_Test_set_address_reply ) data->cb ) ( proxy, error, data->userdata );
	return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Geoclue_Test_set_address_async ( DBusGProxy *proxy, const gint IN_valid_for, const GHashTable* IN_address, org_freedesktop_Geoclue_Test_set_address_reply callback, gpointer userdata )

{
	DBusGAsyncData *stuff;
	stuff = g_new ( DBusGAsyncData, 1 );
	stuff->cb = G_CALLBACK ( callback );
	stuff->userdata = userdata;
	return dbus_g_proxy_begin_call ( proxy, "SetAddress", org_freedesktop_Geoclue_Test_set_address_async_callback, stuff, g_free, G_TYPE_INT, IN_valid_for, dbus_g_type_get_map ( "GHashTable", G_TYPE_STRING, G_TYPE_STRING ), IN_address, G_TYPE_INVALID );
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Geoclue_Test_set_address_fields ( DBusGProxy *proxy, const gint IN_valid_for, const char * IN_countrycode, const char * IN_country, const char * IN_region, const char * IN_locality, const char * IN_area, const char * IN_postalcode, const char * IN_street, GError **error )

{
	return dbus_g_proxy_call ( proxy, "SetAddressFields", error, G_TYPE_INT, IN_valid_for, G_TYPE_STRING, IN_countrycode, G_TYPE_STRING, IN_country, G_TYPE_STRING, IN_region, G_TYPE_STRING, IN_locality, G_TYPE_STRING, IN_area, G_TYPE_STRING, IN_postalcode, G_TYPE_STRING, IN_street, G_TYPE_INVALID, G_TYPE_INVALID );
}

typedef void ( *org_freedesktop_Geoclue_Test_set_address_fields_reply ) ( DBusGProxy *proxy, GError *error, gpointer userdata );

static void
org_freedesktop_Geoclue_Test_set_address_fields_async_callback ( DBusGProxy *proxy, DBusGProxyCall *call, void *user_data )
{
	DBusGAsyncData *data = ( DBusGAsyncData* ) user_data;
	GError *error = NULL;
	dbus_g_proxy_end_call ( proxy, call, &error, G_TYPE_INVALID );
	( * ( org_freedesktop_Geoclue_Test_set_address_fields_reply ) data->cb ) ( proxy, error, data->userdata );
	return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Geoclue_Test_set_address_fields_async ( DBusGProxy *proxy, const gint IN_valid_for, const char * IN_countrycode, const char * IN_country, const char * IN_region, const char * IN_locality, const char * IN_area, const char * IN_postalcode, const char * IN_street, org_freedesktop_Geoclue_Test_set_address_fields_reply callback, gpointer userdata )

{
	DBusGAsyncData *stuff;
	stuff = g_new ( DBusGAsyncData, 1 );
	stuff->cb = G_CALLBACK ( callback );
	stuff->userdata = userdata;
	return dbus_g_proxy_begin_call ( proxy, "SetAddressFields", org_freedesktop_Geoclue_Test_set_address_fields_async_callback, stuff, g_free, G_TYPE_INT, IN_valid_for, G_TYPE_STRING, IN_countrycode, G_TYPE_STRING, IN_country, G_TYPE_STRING, IN_region, G_TYPE_STRING, IN_locality, G_TYPE_STRING, IN_area, G_TYPE_STRING, IN_postalcode, G_TYPE_STRING, IN_street, G_TYPE_INVALID );
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_Geoclue_Test_set_position ( DBusGProxy *proxy, const gdouble IN_latitude, const gdouble IN_longitude, const gdouble IN_altitude, const gint IN_accuracy_level, const gint IN_horizontal_accuracy, const gint IN_vertical_accuracy, GError **error )

{
	return dbus_g_proxy_call ( proxy, "SetPosition", error, G_TYPE_DOUBLE, IN_latitude, G_TYPE_DOUBLE, IN_longitude, G_TYPE_DOUBLE, IN_altitude, G_TYPE_INT, IN_accuracy_level, G_TYPE_INT, IN_horizontal_accuracy, G_TYPE_INT, IN_vertical_accuracy, G_TYPE_INVALID, G_TYPE_INVALID );
}

typedef void ( *org_freedesktop_Geoclue_Test_set_position_reply ) ( DBusGProxy *proxy, GError *error, gpointer userdata );

static void
org_freedesktop_Geoclue_Test_set_position_async_callback ( DBusGProxy *proxy, DBusGProxyCall *call, void *user_data )
{
	DBusGAsyncData *data = ( DBusGAsyncData* ) user_data;
	GError *error = NULL;
	dbus_g_proxy_end_call ( proxy, call, &error, G_TYPE_INVALID );
	( * ( org_freedesktop_Geoclue_Test_set_position_reply ) data->cb ) ( proxy, error, data->userdata );
	return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_Geoclue_Test_set_position_async ( DBusGProxy *proxy, const gdouble IN_latitude, const gdouble IN_longitude, const gdouble IN_altitude, const gint IN_accuracy_level, const gint IN_horizontal_accuracy, const gint IN_vertical_accuracy, org_freedesktop_Geoclue_Test_set_position_reply callback, gpointer userdata )

{
	DBusGAsyncData *stuff;
	stuff = g_new ( DBusGAsyncData, 1 );
	stuff->cb = G_CALLBACK ( callback );
	stuff->userdata = userdata;
	return dbus_g_proxy_begin_call ( proxy, "SetPosition", org_freedesktop_Geoclue_Test_set_position_async_callback, stuff, g_free, G_TYPE_DOUBLE, IN_latitude, G_TYPE_DOUBLE, IN_longitude, G_TYPE_DOUBLE, IN_altitude, G_TYPE_INT, IN_accuracy_level, G_TYPE_INT, IN_horizontal_accuracy, G_TYPE_INT, IN_vertical_accuracy, G_TYPE_INVALID );
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_Geoclue_Test */

G_END_DECLS
