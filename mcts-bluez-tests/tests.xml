<?xml version="1.0" encoding="UTF-8"?>
<testdefinition version="1.0">
<description></description>
<suite name="mcts-bluez-tests" description="&lt;p&gt;Owner: Zhang Jingke (jingke.zhang@intel.com)&lt;/p&gt;">
<set name="obex_profiles" description="&lt;p&gt;In this suite, we test OBEX (Object Exchange) related profiles. They are: FTP, OPP, PBAP, SYNC.&lt;/p&gt;
&lt;p&gt;Contacter: jingke.zhang@intel.com&lt;/p&gt;">

<case name="bt_ftp_get_check" manual="false" timeout="90" type="Functional" subfeature="FTP">
	<description><![CDATA[<br /><br /><p>Purpose:</p>
<p>Check to use FTP profile to get file.</p>
<p>Run Instructions:</p>
<p>1. Place one file on Server (write down its md5sum in one config file on Client) before testing.</p>
<p>2. Client does bluetooth pairing with Server.</p>
<p>3. Client gets the file name and use ftp-client script to get the file from Server by FTP profile.</p>
<p>4. Check the md5sum of the got file, to see if the md5sum is same with the file on Server (Confirm they are the same one).</p>
<p>Pass/Fail Criteria:</p>
<p>1. By FTP profile, Client should be able to get file from Server.</p>
<p>2. The file got from Server should have same md5sum with the target file on Server.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_ftp_get_check.sh</step>
</case>

<case name="bt_ftp_put_check" manual="false" timeout="100" type="Functional" subfeature="FTP">
	<description><![CDATA[<br /><br /><p>Purpose:</p>
<p>Check to use FTP profile to put file to Server.</p>
<p>Run Instructions:</p>
<p>1. Prepare one file (whose md5sum is in one config file  on Client) before testing.</p>
<p>2. Client does bluetooth pairing with Server.</p>
<p>3. Client gets the file name from config and use ftp-client script to put it to the Server by FTP profile.</p>
<p>4. Also use FTP profile to get the file from Server, then check if the md5sum of the file is same with original one in Client.</p>
<p>Pass/Fail Criteria:</p>
<p>1. By FTP profile, Client should be able to put file to Server.</p>
<p>2. The file put to Server should be same (md5sum) with original one..</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_ftp_put_check.sh</step>
</case>

<case name="bt_ftp_neg_put_same_file" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case is to test FTP profile transfer with a exsit file</p>
<p>Run Instructions:</p>
<p>1, Transfer a file which already exsit in your target device.<br />
2, Check the file in your target device<br />
<br />
Pass/Fail Criteria:</p>
<p>1. The file is still able to be uploaded.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_ftp_neg_put_same_file.sh</step>
</case>

<case name="bt_ftp_browse_check" manual="false" timeout="100" type="Functional" subfeature="FTP">
	<description><![CDATA[<p>&nbsp;</p>
<p>Purpose:</p>
<p>Check FTP folder navigation from FTP client.</p>
<p>Run Instructions:</p>
<p>1. Client does pairing with Server successfully.</p>
<p>2. By ftp-client script, client creates a sub_folder under one folder on Server.</p>
<p>3. Browse the folder structure on Server, to get the sub folder.</p>
<p>Pass/Fail Criteria:</p>
<p>1. Client could get the sub folder on Server.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_ftp_browse_check.sh</step>
</case>

<case name="bt_ftp_remove_check" manual="false" timeout="100" type="Functional" subfeature="FTP">
	<description><![CDATA[<p>&nbsp;</p>
<p>Purpose:</p>
<p>Check FTP (File Transfer Profile) folder manipulation inculdes create and remove</p>
<p>Run Instructions:</p>
<p>1. Get local hci0 MAC address.</p>
<p>2. Pair with server machine.</p>
<p>3. On client side, use ftp-client command to create a folder on Server</p>
<p>4. From client side, list all the folders on server, and check if there is the folder created right away.</p>
<p>5. On client side, use ftp-client command to delete the created folder from Server.</p>
<p>6.  From client side, list all the folders on server, and check if the target folder has been deleted.</p>
<p>Pass/Fail Criteria:</p>
<p>1. Client should be able to create folder on Server by FTP profile.</p>
<p>2. Client should be able to delete the folder from Server by FTP profile.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_ftp_remove_check.sh</step>
</case>

<case name="bt_ftp_stress_put_bigsizefile" manual="false" timeout="300" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:<br />
<br />
Create a 10MB size file in local, and use FTP to transfer it to the Server.</p>
<p>Run Instructions:<br />
<br />
1, Build up FTP connection.</p>
<p>2, Transfer a big file =10MB from client or server</p>
<p>3, Get the file from server.</p>
<p>4. Check the two file md5sum value. <br />
&nbsp;<br />
Pass/Fail Criteria:</p>
<p>1. The md5sum of the originally created one and the file got around from Server should be equal.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_ftp_stress_put_bigsizefile.sh</step>
</case>

<case name="bt_opp_send_files" manual="false" timeout="100" type="Functional">
	<description><![CDATA[<br /><br /><p>Purpose (Mandatory):</p>
<p>Check bluetooth OPP (Object Push Profile) to put some objects (e.g. movies) to server</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Pair with server machine. (server should support OPP by obexd -o)</p>
<p>2. Use send-files (from obexd-0.32/test/) to send three movies copies to server.</p>
<p>3. Use FTP profile to see if server has 3 files added.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. Three little size movies should be put to server by OPP profile.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_opp_send_files.sh</step>
</case>

<case name="bt_pbap_pb_get_check" manual="false" timeout="60" type="Functional">
	<description><![CDATA[<br /><br /><p>Purpose (Mandatory):</p>
<p>Check bluetooth PBAP (Phone-Book Access Profile) to get some addressbook from server.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Pair with bluetooth server.</p>
<p>2. Use pbap-client (from obex-0.32/test/) to get some addressbook data from server.</p>
<p>3. Check the phone book data number.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. Test machine should have got all the phone book from server by PBAP-PSE.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_pbap_pb_get_check.sh</step>
</case>

<case name="bt_pbap_server" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>Take MeeGo as PBAP Server part (PSE), use other machine to require Phonebook from MeeGo.</p>
<p>Run Instructions:</p>
<p>1. Install obexd-server on meego.<br />
&nbsp; <br />
2. Start obexd-server by this command: (-p means enabling PBAP server)</p>
<p># obexd -n -d -a -f -p -r ./</p>
<p>3. Use nother machine to require phonebook from MeeGo PBAP server. The step could be referred from case bt_pbap_pb_check's auto script.</p>
<p>Pass/Fail Criteria:</p>
<p>1. PBAP server should be able to provide its phonebook (contacts data) to client.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_sync_pb_get_check" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case is to test SYNC prfile<br />
Run Instructions:</p>
<p>1, Select a phonebook server(MID or othe mobile phone)<br />
2, Use the UI to synchronize the phonebook to local(IVI or MID device)<br />
or run script ./bt_sync_getphonephonebook <br />
3, You can check the phonebook content in local device if application support it</p>
<p><br />
Pass/Fail Criteria:</p>
<p>You should get all phonebook records of server in your client side</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>
</set>
<set name="audio_profiles" description="&lt;p&gt;In this suite, we test audio related bluetooth profiles. They are: A2DP, AVRCP, HSP, HFP. If meeting problem, you need to check both Pulseaudio and Buetooth.&lt;/p&gt;
&lt;p&gt;Contactor: jingke.zhang@intel.com&lt;/p&gt;">

<case name="bt_a2dp_playback" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case is to test&nbsp;A2DP profile</p>
<p>Run Instructions:</p>
<p>If your system has bluetooth GUI APP for pairing, just use the pairing GUI and skip step1&amp;2.<br />
1, hcitool scan<br />
&nbsp;&nbsp;&nbsp; You will get bluetooth headset baddr.<br />
2. Do the device pairing<br />
&nbsp;&nbsp; simple-agent is within bluez source.<br />
&nbsp;&nbsp; cd bluez-&lt;version&gt;/test<br />
&nbsp;&nbsp; ./simple-agent hci0 &lt;Your headset mac&nbsp;&nbsp; address&gt;<br />
&nbsp;&nbsp; Input the PIN code if requiured. Many bluetooth device use the PIN code 0000 by default.</p>
<p>&nbsp;&nbsp;&nbsp; ./test-audio connect &lt;Your headset mac address&gt;<br />
3. [On CDK] you need to open bluetooth GUI and choose &quot;connect to audio&quot; button on the applet.</p>
<p>4. aplay --device=bluetooth file.wav</p>
<p><br />
Pass/Fail Criteria:</p>
<p>you can listen the mp3 file from bluetooth headset.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_a2dp_headset_re_link" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>While playing music with BT headset, disconnect headset and re-connect it.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Pair with Bluetooth headset and playing a long-time music (the song is enough to last during case executing).</p>
<p>2. Disconnect bluez links of headset, NOTE: not destroy the pairing.</p>
<p>3. Reconnect bluez links of the headset. Check if the music is still able to be played through BT headset.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. Music playing should be going on with BT headset.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="bt_a2dp_headset_re_power" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>While playing music with BT headset, powerofft headset and re-power it.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Pair with Bluetooth headset and playing a long-time music (the song is enough to last during case executing).</p>
<p>2. Poweroff headset.</p>
<p>3. Press power button to power on it (NOTE: do not press power button  too long time, the light should be blue, not blue flickering, because  flickering is in pairing status)</p>
<p>4. Reconnect bluez links of the headset. Check if the music is still able to be played through BT headset.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. Music playing should be going on with BT headset.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="bt_a2dp_headset_re_pair" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>While playing music with BT headset, re-pair with the Headset.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Pair with Bluetooth headset and playing a long-time music (the song is enough to last during case executing).</p>
<p>2. Remove the pairing of Bluetooth Headset, and re-pair it again.</p>
<p>3. Reconnect bluez links of the headset. Check if the music is still able to be played through BT headset.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. Music playing should be going on with BT headset.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="bt_avrcp_lower_loader" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case is to test AVRCP profile's function: volume UP/DOWN</p>
<p>Run Instructions:</p>
<p>1. Pair test machine with a Bluetooth Headset (e.g. Dell BH200).</p>
<p>2. Play some music through bluetooth headset.</p>
<p>3. Find control button on the headset --- Volume up/down. Press them to check effects.</p>
<p>Pass/Fail Criteria:</p>
<p>1. The music playing should be able to response to the function keys which you are pressing on headset.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_avrcp_backwords_afterwords" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case is to test AVRCP profile's function: song backwards/afterwords</p>
<p>Run Instructions:</p>
<p>1. Pair test machine with a Bluetooth Headset (e.g. Dell BH200).</p>
<p>2. Play some music through bluetooth headset. Do please use a some media player able to make a play list.</p>
<p>3. Find control button on the headset --- Song Next/Previous. Press them to check effects.</p>
<p>Pass/Fail Criteria:</p>
<p>1. The music playing should be able to response to the function keys which you are pressing on headset.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="bt_avrcp_stop_play" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case is to test AVRCP profile's function: Music Stop/Play</p>
<p>Run Instructions:</p>
<p>1. Pair test machine with a Bluetooth Headset (e.g. Dell BH200).</p>
<p>2. Play some music through bluetooth headset.</p>
<p>3. Find control button on the headset --- Stop/Play. Press them to check effects.</p>
<p>Pass/Fail Criteria:</p>
<p>1. The music playing should be able to response to the function keys which you are pressing on headset.</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="bt_hsp_playback" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>This case is to use HSP profile (in BT Headset) to playback music.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Pair with a Bluetooth headset (such as Dell BH200 or Nokia BH216).</p>
<p>2. Setup bluetooth link to audio.</p>
<p>From GUI, you need to find some button of the paired headset, named &quot;connect to audio&quot; or &quot;connect&quot;...</p>
<p>From command line, please install bluez-test package and find a  script named test-audio in /usr/lib/bluez/test/. Then ./test-audio  connect &lt;BT Headset MAC&gt;.</p>
<p>3. Bluetooth work is done. We need to operate pulseaudio in command line. Use normal user to do following commands:</p>
<p># pactl list-cards&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----- you will see the bluez card. Get its index.</p>
<p># pactl set-card-profile &lt;bluez card index&gt; hsp</p>
<p># pacmd</p>
<p># list-sinks&nbsp;&nbsp;&nbsp;&nbsp; ------ Here, in pacmd console, you can see bluez's sink</p>
<p># set-default-sinks &lt;bluez sink&gt;</p>
<p># exit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ----- exit pacmd console</p>
<p>4. Play a music to hear if the sound is able to be output to BT headset.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. Music playing should be going on with BT headset with HSP profile.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>
<p><br />
<mac address=""><audio file="" path=""> <br />
(Make sure the file is sampled by 8Khz mono PCM) <br />
on ubuntu8.10, you can find bellow file which fit the requirements: <br />
/usr/share/sounds/ekiga/busytone.wav <br />
$ file busytone.wav   busytone.wav: RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit,mono 8000 Hz <br />
<br />
Pass/Fail Criteria:<br />
<p>you can listen the sound by your bt headset.</p>
</audio></mac></p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_hfp_basic" manual="true" timeout="100" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case it to test HFP profile.</p>
<p>Run Instructions:</p>
<p>&nbsp;&nbsp; 1. ensure ofono-test is installed; if not, install it.<br />
&nbsp;&nbsp; 2. ensure ofonod is running<br />
&nbsp;&nbsp; 3. Verify your bluetooth device is RUNNING:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * hci0: Type: USB BD Address: 00:22:69:C6:0F:4D ACL MTU: 1017:8 SCO MTU: 64:8 UP RUNNING PSCAN ISCAN RX bytes:965 acl:0 sco:0 events:27 errors:0 TX bytes:361 acl:0 sco:0 commands:27 errors:0 <br />
&nbsp;&nbsp; 4. pair with bt phone using bluetooth-applet or simple-agent<br />
&nbsp;&nbsp; 5. Enable hfp modem using test scripts in /usr/lib/ofono/test/ installed by ofono-test.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * $./list-modems<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o [ /hfp/002269C60F4D_0023F1B38193 ] Interfaces = Name = C905 Powered = 0 <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * $./enable-modem /hfp/002269C60F4D_0023F1B38193 <br />
&nbsp;&nbsp; 6. disable the timeout in ofono/test/test-voicecall by commenting this line:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * #gobject.timeout_add(10000, hangup_all) <br />
&nbsp;&nbsp; 7. make an outgoing call:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * $./test-voicecall 10086 <br />
&nbsp;&nbsp; 8. There should be Bluetooth source and sink generated in pulseaudio. Verify this by list-sources and list-sinks command in &lsquo;pacmd&rsquo;(login user):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * &gt;&gt;&gt; list-sources:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o index: 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name: &lt;alsa_input.0.analog-stereo&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o .. index: 2<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name: &lt;bluez_source.00_BD_3A_D4_4E_53&gt; <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt;&gt; list-sinks:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o index: 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name: &lt;alsa_output.0.analog-stereo&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o .. index: 2<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name: &lt;bluez_sink.00_BD_3A_D4_4E_53&gt; <br />
&nbsp;&nbsp; 9. Make audio route to IVI by running load-modules in &lsquo;pacmd&rsquo;:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * &gt;&gt;&gt;load-module module-loopback source=&quot;bluez_source.00_BD_3A_D4_4E_53&quot; sink=&quot;alsa_output.0.analog-stereo&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt;&gt;load-module module-loopback source=&quot;alsa_input.0.analog-stereo&quot; sink=&quot;bluez_sink.00_BD_3A_D4_4E_53&quot; <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Now you could here voice from both sides(IVI and the called phone number) <br />
&nbsp; 10. Unload module once call is ended.<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * list-modules<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o index: 24<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + name: &lt;module-loopback&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; argument: &lt;source=&quot;bluez_source.00_BD_3A_D4_4E_53&quot; sink=&quot;alsa_output.0.analog-stereo&quot;&gt; used: -1 <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; index: 25<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + name: &lt;module-loopback&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; argument: &lt;source=&quot;alsa_input.0.analog-stereo&quot; sink=&quot;bluez_sink.00_BD_3A_D4_4E_53&quot;&gt; used: -1 <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unload-module 24 unload-module 25&nbsp;</p>
<p>Pass/Fail Criteria:</p>
<p>If every thing is ok, you could be able to dial the phone number via BT moblin phone.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_stress_hfp" manual="true" timeout="90">
	<description><![CDATA[<br /><br /><p>Purpose:<br />
<br />
This case is to test HFP profile with many time call<br />
Run Instructions:<br />
<br />
1, Initiate a call by using last number by headset<br />
2, Accept this call in remote device<br />
3, Repeate it 3 times and to check the result<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
All call should be setup normally</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>
</set>
<set name="other_profiles" description="&lt;p&gt;This suite includes all the other common used Bluetooth profiles, except data and audio transfer. They are: HID, PANU...&lt;/p&gt;
&lt;p&gt;Contactor: jingke.zhang@intel.com&lt;/p&gt;">

<case name="bt_package_stack_check" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>&nbsp;Purpose:</p>
<p>&nbsp;Check if the bluetooth stack (bluez) and corresponding packages are installed in system. <br />
<br />
Run Instructions:</p>
<p>1. ps -ef | grep bluez</p>
<p>2. ps -ef | grep obexd</p>
<p>Pass/Fail Criteria:</p>
<p>1. System should contain bluez and obexd packages.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_package_stack_check.sh</step>
</case>

<case name="bt_prof_spp" manual="true" timeout="90">
	<description><![CDATA[<br /><br /><p>Purpose:</p>
<p>This case is to test SPP profile<br />
Run Instructions:<br />
1, hcitool scan or hciconfig -a<br />
2,sdptool add SP &amp;&amp; hciconfig hci1 pscan<br />
3,rfcomm listen 0 1 &amp;<br />
4,rfcomm -i hci1 connect 1 [bdaddr] 1 &amp;<br />
5, hcitool con<br />
6, pkill rfcomm<br />
&nbsp;<br />
Pass/Fail Criteria:</p>
<p>1. There should be no any error information to display and you will get the connection result.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_package_daemon_check" manual="false" timeout="60" type="Functional">
	<description><![CDATA[<p>&nbsp;</p>
<p>Purpose:</p>
<p>Check if bluetoothd has been started</p>
<p>Run Instructions:</p>
<p>Use 'ps -ef' to get the bluetoothd pid.</p>
<p>Pass/Fail Criteria:</p>
<p>1. If the pid of bluetoothd is got, case PASS</p>
<p>2. If there is no such process named 'bluetoothd', case FAIL.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_package_daemon_check.sh</step>
</case>

<case name="bt_hid_stress_longtime_noaction" manual="true" timeout="2000" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>This case is to test HID profile without action in long time</p>
<p>Run Instructions:</p>
<p>1, setup HID connection with BT mouse,you can use bt_prof_HID to setup a connection<br />
2, Don't take any action in 0.5 hour<br />
3, To check the behavior of BT mouse after 0.5 hour<br />
&nbsp;</p>
<p>Pass/Fail Criteria:</p>
<p>The mouse should still work.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_prof_dun_dt" manual="true" timeout="100" type="Functional" level="Component">
	<description><![CDATA[<p>&nbsp;</p>
<p>Purpose:</p>
<p>This case is to test DUN profile. MeeGo machine should be able to connect to GPRS (2G network) through phone (as modem)</p>
<p>Run Instructions:</p>
<p>1. Confirm the PPP driver has been enabled. Make sure the kernel config option are selected (if not, please recompile kernel):<br />
&nbsp;&nbsp; Device Drivers ---&gt; Network device support ---&gt; PPP<br />
&nbsp;&nbsp; <br />
2. Edit the /etc/bluetooth/rfcomm.conf<br />
&nbsp;&nbsp; rfcomm0 {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bind yes;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device &lt;your PHONE mac address&gt;;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; channel 1 <br />
# to get the DUN service bonding on which channel number, you could execute commands:<br />
# sdptool browse &lt;your phone mac address&gt;;<br />
# and then check the Dial-up Networking section;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comment &quot;Example Bluetooth device&quot;;<br />
&nbsp;&nbsp;&nbsp; }</p>
<p>3. reboot your computer. I tried to restart the bluetootd service, but seems it only works  after rebooting.<br />
4. do the bt paring, entry bluez source test directory<br />
&nbsp;&nbsp; cd bluez-&lt;version&gt;/test<br />
&nbsp;&nbsp; ./simple-agent hci0 &lt;your phone mac address&gt;<br />
5. If device node /dev/rfcomm0 isn't created, you could make it by yourself:<br />
&nbsp;&nbsp; mknod -m 666 /dev/rfcomm0 c 216 0</p>
<p>&nbsp;&nbsp; rfcomm bind /dev/rfcomm0 &lt;PHONE (DUN GW) mac address&gt; &lt;channel number&gt;</p>
<p>6. Launch gnome-ppp gui to make a connection &lt;China moblin gprs service&gt;:<br />
&nbsp;&nbsp; 1) Fill username and password with 1234/1234 and check the Remember password checkbox. It's a gnome-ppp bug, actually china moblin gprs connection didn't require username and password<br />
&nbsp;&nbsp; 2) Fill Phone number textbox with *99***1#&nbsp; (*99***1# is the service number, * is NOT wild char)<br />
&nbsp;&nbsp; 3) Click Setup button<br />
&nbsp;&nbsp; 4) Fill Device textbox with /dev/rfcomm0 and click Close button<br />
&nbsp;&nbsp; 5) Click connect button<br />
&nbsp;&nbsp; 6) un-plug the network wire<br />
&nbsp;&nbsp; 7) If every thing is ok, you could see network device node ppp0 in the ifconfig command's output<br />
&nbsp;&nbsp; 8) execute route add default gw &lt;your ppp0 ip address&gt;<br />
&nbsp;&nbsp; 9) now you can use the firefox to launch a web page, such as wap.sina.com</p>
<p>Pass/Fail Criteria:</p>
<p>1. You should access internet normally through DUN GW (not by Ethernet).</p>
<p>2. The BT network connection should be on by more than 5 minutes (should be stable).</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_prof_sdp" manual="true" timeout="90">
	<description><![CDATA[<p>&nbsp;</p>
<p>Purpose:</p>
<p>This case is to test SDP profile</p>
<p><br />
Run Instructions:<br />
1, hcitool scan or hciconfig -a<br />
2,sdptool browser [bdaddr]<br />
:You can get the bdaddr from command 1 result and it's MAC address of device<br />
&nbsp;Pass/Fail Criteria:</p>
<p>1. Normal no error to display and you can have all serverice information of target device.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_prof_did" manual="true" timeout="90">
	<description><![CDATA[<br /><br /><p>Purpose:</p>
<p>This case is to test DID profile</p>
<p>Run Instructions:</p>
<p>1, hciconfig -a or hcitool scan&nbsp;<br />
&nbsp;&nbsp;&nbsp; To find the target baddr<br />
2, sdptool records --xml [target baddr]&nbsp;<br />
3, search the 0x1200 in step2 result<br />
4, Check if there are following information<br />
0x200 - SpecificationID<br />
0x201 - VendorID<br />
0x202 - ProductID<br />
0x203 - Version<br />
0x204 - PrimaryRecord<br />
0x205 - VendorIDSource<br />
&nbsp;</p>
<p>Pass/Fail Criteria:</p>
<p>1. you have to get all the informaton by these command if you get the data all are 0 it should be fail for this case</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_prof_pan_user" manual="true" timeout="90">
	<description><![CDATA[<br /><br /><p>Purpose:</p>
<p>By PAN profile, user could log on a webpage from PAN server machine (connecting out) via bluetooth</p>
<p>Run Instructions:</p>
<p>We use one PC machine as the PAN server. Then meego machine could be PANU (client).</p>
<p>On server, steps:<br />
1. NAP setting<br />
1.1, Install bridge-utils in your pc, yum install bridge-utils<br />
1.2, &nbsp;&nbsp;&nbsp; &nbsp;brctl addbr pan1<br />
&nbsp;&nbsp;&nbsp; &nbsp;ifconfig pan1 192.168.0.1<br />
1.3,ifconfig ( you should see the pan1 information)<br />
1.4,hciconfig hci0 lm master<br />
<br />
2. Setting iptables (for internet package forward) in server. Do the following 3 commands:<br />
echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br />
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE<br />
iptables -A FORWARD -i pan1 -j ACCEPT<br />
<br />
On client machien (meego):<br />
1, make paring with your server device first<br />
2, run the script to connect the server<br />
&nbsp;&nbsp; ./test-network [server BT MAC] nap<br />
&nbsp;&nbsp; you can find this script in bluez/test/<br />
3, you will have bnep0 if the connection successful<br />
4, ifconfig bnep0 192.168.0.2<br />
5, route add default gw 192.168.0.1<br />
6, ping your server address <br />
&nbsp;&nbsp; ping -I bnep0 192.168.0.1</p>
<p>(how tp connect to internet)<br />
7, set the http proxy (same as your server)in client side <br />
8, set the /etc/resolv.conf as the server side in client side<br />
&nbsp;&nbsp;&nbsp; search sh.intel.com<br />
&nbsp;&nbsp;&nbsp; nameserver 172.16.1.11<br />
&nbsp;&nbsp;&nbsp; nameserver 172.16.16.12<br />
<br />
<br />
Pass/Fail Criteria:</p>
<p>1. yon can log on outside webpage (e.g. www.sina.com) successfully.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_prof_hid_keyboard" manual="true" timeout="90">
	<description><![CDATA[<br /><br /><p>Purpose:</p>
<p>This case is to test HID profile</p>
<p><br />
Run Instructions:</p>
<p>1, hictool scan<br />
&nbsp;&nbsp;&nbsp; you will find the keyboard baddress.<br />
2, hidd -- connect [kb addr]<br />
&nbsp;&nbsp; this kbaddr is keyboard Bluetooth MAC address.</p>
<p>3. Type some keys on the keyboard, check the output of the terminal.<br />
<br />
Pass/Fail Criteria:</p>
<p>the keyboard can work smoothly and keys can be output to terminal.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_prof_hid_mouse" manual="true" timeout="90">
	<description><![CDATA[<br /><br /><p>Purpose:</p>
<p>Use HID profile to connect Bluetooth mouse.</p>
<p>Run Instructions:</p>
<p>1. Power on the bluetooth mouse and make it in pairing status.</p>
<p>2. Move the mouse close to machine and run command 'hidd --search' in one terminal.</p>
<p>3. Check the output. After it tells connection is done, move mouse to see the pointer action.</p>
<p>Pass/Fail Criteria:</p>
<p>1. The mouse will be connected automatically.</p>
<p>2. When mouse is working, the pointer should move smoothly.</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_panu_setup_check" manual="false" timeout="100" type="Functional">
	<description><![CDATA[<br /><br /><p>Purpose (Mandatory):</p>
<p>Test PANU (Personal Area Network User). Ping PAN server ip address.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Pair with PAN server (PAN server should start BNEP and create a bridge for PANU, detail could be referred from server README file)</p>
<p>2. Run PAN user initialization python script test_network (get it from MCTS/mcts-luez-bluetooth/data/client/)</p>
<p>3. Set up gateway to PAN server and assign self ip_address to 192.168.0.2</p>
<p>4. Ping gateway IP address 192.168.0.1</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. PANU should build up bnep0 for PAN connection.</p>
<p>2. Ping 192.168.0.1 should succeed.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_panu_setup_check.sh</step>
</case>
</set>
<set name="device_control" description="&lt;p&gt;In this suite, we will test controling for the local adapter (hci0) and remote peers (paired devices). All the operation is from bluez DBus-API. To check the result, you may also use hciconfig to double confirm.&lt;/p&gt;
&lt;p&gt;Contactor: jingke.zhang@intel.com&lt;/p&gt;">

<case name="bt_device_pairing_computer" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>Pair the test machine with a compute by dbus call.</p>
<p>Run Instructions:</p>
<p>1. Get a computer device (such as Netbook, or PC) opened with bluetooth visible (if not, you can do 'hciconfig hci0 piscan').</p>
<p>2. Run 'hcitool scan' to search the bluetooth MAC of the computer..</p>
<p>3. If there is a pairing GUI, use the GUI to pair with the computer. Input the PIN code on both sides.</p>
<p>4. If there is not any GUI, get the simple-agent tool from bluez source code (under test folder).</p>
<p>5. Run command &quot;simple-agent hci0 &lt;computer MAC&gt;&quot; and input the PIN code on both sides.</p>
<p>Pass/Fail Criteria:</p>
<p>1. Computer should be able to be paired.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_device_pairing_computer.sh</step>
</case>

<case name="bt_device_pairing_phone" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>&nbsp;</p>
<p>Purpose:</p>
<p>Pair mobile phone via bluetooth.</p>
<p>Run Instructions:</p>
<p>1. Power on the phone with bluetooth opened.</p>
<p>2. If the machine has bluetooth pairing GUI, just search device and click &quot;pair&quot; button. You may input PIN code in phone as bluetooth GUI tells.</p>
<p>3. If there is no bluetooth pairing GUI, get the simple-agent tool from bluez source code (under test folder).</p>
<p>4. Do &quot;simple-agent hci0 &lt;phone MAC&gt;&quot; and input a PIN code for pairing. Then input PIN code in phone to finish the pairing process. (To get the MAC address of phone, user could run &quot;hcitool scan&quot; to get all nearby BT devices)</p>
<p>Pass/Fail Criteria:</p>
<p>1. Phone is able to be paired with the machine,</p>]]></description>
<step expected_result="0" manual="true">Can pass the Criteria in the description?</step>
</case>

<case name="bt_device_remove_pairing_computer" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>User can call DBus API to remove the device pairing with a computer.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API, RemoveDevice(&lt;path of the computer&gt;) to remove pairing with the computer.</p>
<p>2. This API is available to remove pairing of Computer/Headset, but not available to deal with BT Keyboard.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. After calling the RemoveDevice API, user cannot find device by FindDevice() API.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_device_remove_pairing_computer.sh</step>
</case>

<case name="bt_device_remove_pairing_keyboard" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>User can call DBus API to remove the device pairing with a BT keyboard.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API, Disconnect() to remove the pair with the human interface device (e.g. Keyboard).</p>
<p>2. This API is available to remove pair of BT Keyboard.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. After calling the Disconnect API, user cannot use the BT Keyboard.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>

<case name="bt_adapter_get_address" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p><br />
Purpose:<br />
<br />
Get the MAC address of the bluetooth adapter.</p>
<p>Run Instructions:<br />
<br />
1, Run command &quot;hciconfig -a&quot; to display all device information. (In auto case, it will call DBus API to get the name property of the adapter)</p>
<p>2. Find BT MAC address from the output of the command. <br />
&nbsp;&nbsp; <br />
Pass/Fail Criteria:<br />
<br />
1. Bluetooth MAC address should be output in pattern, for example, 00:22:69:FB:AA:8A</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_get_address.sh</step>
</case>

<case name="bt_adapter_set_name" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Set the local adapter's name by calling Get DBus API.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: Set_Property(&quot;Name&quot;, &lt;input your custom name here&gt;).</p>
<p>2. Call DBus API: GetProperties() to see adapter visible name property.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The name got in step2 should be same with the name you set.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_set_name.sh</step>
</case>

<case name="bt_adapter_set_power" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Call Bluez DBus API to set adapter power On/Off.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: SetProperty(&quot;Powered&quot;, &lt;On or Off&gt;) to power on/off the bluetooth adapter.</p>
<p>2. Call DBus API: GetProperties() to get the value of &quot;Powered&quot; property. 1 stands for On, and 0 stands for Off.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The property value got from DBus call should be same with the value we set.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_set_power.sh</step>
</case>

<case name="bt_adapter_stress_set_power_50times" manual="false" timeout="500" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Power on/off the adapter for 50 times.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: SetProperty(&quot;Powered&quot;, &lt;boolean value for On/Off&gt;) to power on and power off the adapter for 50 times.</p>
<p>2. Check if the bluetooth device can be powered correctly during the stress process.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. For each execution during the 50 times, adapter power should be correctly On and Off.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_stress_set_power_50times.sh</step>
</case>

<case name="bt_adapter_set_pairable_on" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Call Bluez DBus API to set adapter pairable On/Off.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: SetProperty(&quot;Pairable&quot;, &lt;On or Off&gt;) to power on/off the bluetooth adapter.</p>
<p>2. Call DBus API: GetProperties() to get the value of &quot;Pairable&quot; property. 1 stands for On, and 0 stands for Off.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The property value got from DBus call should be able to be set to On.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_set_pairable_on.sh</step>
</case>

<case name="bt_device_type_check" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>By DBus API call, user can know the bluetooth type of the paired Peer.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: GetProperties() to get the Peer's &quot;Class&quot; property and print it by hex.</p>
<p>2. Read the last third of the hex numbers, for example, if number is 0x002540, the last 3rd number is '5'; if number is 0x5a0100, the last 3rd number is &quot;1&quot;.</p>
<p>3. Map human readable type to those hex number, 1 stands for &quot;Computer&quot;, 2 stands for &quot;Phone&quot;, 4 stands for &quot;Headset&quot; and 5 stands for &quot;Keyboard&quot;.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The type of paired device should be judged correctly.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_device_type_check.sh</step>
</case>

<case name="bt_adapter_set_pairable_off" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Call Bluez DBus API to set adapter pairable to Off.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: SetProperty(&quot;Pairable&quot;, &lt;On or Off&gt;) to power on/off the bluetooth adapter.</p>
<p>2. Call DBus API: GetProperties() to get the value of &quot;Pairable&quot; property. 1 stands for On, and 0 stands for Off.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The property value got from DBus call should be able to be set to Off</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_set_pairable_off.sh</step>
</case>

<case name="bt_adapter_set_discoverable_on" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Call Bluez DBus API to set adapter discoverable On</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: SetProperty(&quot;Discoverable&quot;, &lt;On or Off&gt;) to power on/off the bluetooth adapter.</p>
<p>2. Call DBus API: GetProperties() to get the value of &quot;Discoverable&quot; property. 1 stands for On, and 0 stands for Off.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The property value got from DBus call should be able to be set to 1</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_set_discoverable_on.sh</step>
</case>

<case name="bt_adapter_set_discoverable_off" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Call Bluez DBus API to set adapter discoverable Off</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Call DBus API: SetProperty(&quot;Discoverable&quot;, &lt;On or Off&gt;) to power on/off the bluetooth adapter.</p>
<p>2. Call DBus API: GetProperties() to get the value of &quot;Discoverable&quot; property. 1 stands for On, and 0 stands for Off.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The property value got from DBus call should be able to be set to 0</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_adapter_set_discoverable_off.sh</step>
</case>

<case name="bt_device_l2ping_check" manual="false" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose:</p>
<p>Check l2cap socket communication using l2ping.</p>
<p>Run Instructions:</p>
<p>1. Get the Bluetooth MAC address of the server machine.</p>
<p>2. On client, l2ping &lt;Server BT MAC&gt;, and check if it can get reply from the Server.</p>
<p>Pass/Fail Criteria:</p>
<p>1. Client should be able to get reply by l2ping.</p>]]></description>
<step expected_result="0" manual="false">/opt/mcts-bluez-tests/bt_l2cap_ping_check.sh</step>
</case>

<case name="bt_device_passive_pairing" manual="true" timeout="60" type="Functional" level="Component">
	<description><![CDATA[<p>Purpose (Mandatory):</p>
<p>Check if the meego machine could be paired by other devices.</p>
<p>Method (Optional):</p>
<p>References (Optional):</p>
<p>Pre/Post-conditions (Optional):</p>
<p>Run instructions (Mandatory):</p>
<p>1. Open a terminal and come to root account by &quot;su -&quot;</p>
<p>2. Install bluez-test package, and get simple-agent script from /usr/lib/bluez/test/ folder.</p>
<p>3. Make sure bluetooth adapter (hci0) is workable. Then start daemon to get paired:</p>
<p># ./simple-agent hci0</p>
<p>4. From another device, you can use ./simple-agent hci0 &lt;tested machine's BT MAC&gt; to build up the pairing.</p>
<p>Pass/Fail criteria (Mandatory):</p>
<p>1. The meego machine is able to be paired by others. Passively pairing succeed.</p>
<p>Test Environment (Optional):</p>
<p>Required test data (Optional):</p>
<p>Change history (Optional):</p>]]></description>
<step expected_result="0" manual="true"><![CDATA[Can pass the Criteria in the description?]]></step>
</case>
</set>
</suite>
</testdefinition>