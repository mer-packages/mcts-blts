<?xml version="1.0" encoding="ISO-8859-1"?>
<testdefinition version="0.1">
  <suite name="mwts-multimedia-audiorecorder-tests" domain="System">
    <!--This set contains test cases from mwts-multimedia-audiorecorder.cfg-->
    <set name="Functional test" description="Multimedia audio recording functionality tests" feature="Settings" type="Functional" >
      <case name="FUTE-Multimedia_Record_audio_mono_1channel_48KHZ_256kbs_vorbis" subfeature="Record" timeout="120" description=
        "Purpose
        Test basic recording functionality of the device
        Method
        Test case uses qt-mobility API
        Pre-/Post-Conditions
        Pass/Fail Criteria
        Is able to create audio files with >0 size
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Record_audio_mono_1channel_48KHZ_256kbs_vorbis'</step>
      </case>

      <case name="FUTE-Multimedia_Record_audio_stereo_2channel_48KHZ_256kbs_vorbis" subfeature="Record" timeout="120" description=
        "Purpose
        Test basic recording functionality of the device
        Method
        Test case uses qt-mobility API
        Pre-/Post-Conditions
        Pass/Fail Criteria
        Is able to create audio files with >0 size
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Record_audio_stereo_2channel_48KHZ_256kbs_vorbis'</step>
      </case>

      <case name="FUTE-Multimedia_Record_audio_mono_1channel_48KHz_128kbs_PCM" subfeature="Record" timeout="120" description=
        "Purpose
        Test basic recording functionality of the device
        Method
        Test case uses qt-mobility API
        Pre-/Post-Conditions
        Pass/Fail Criteria
        Is able to create audio files with >0 size
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Record_audio_mono_1channel_48KHz_128kbs_PCM'</step>
      </case>

      <case name="FUTE-Multimedia_Record_audio_stereo_2channel48KHz_320kbs_PCM" subfeature="Record" timeout="120" description=
        "Purpose
        Test basic recording functionality of the device
        Method
        Test case uses qt-mobility API
        Pre-/Post-Conditions
        Pass/Fail Criteria
        Is able to create audio files with >0 size
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Record_audio_stereo_2channel48KHz_320kbs_PCM'</step>
      </case>

      <case name="FUTE-Multimedia_Show_supported_codecs_and_containers" subfeature="Record" timeout="120" description=
        "Purpose
        Shows supported codecs and containers
        Method
        Test case uses qt-mobility multimedia API
        Pre-/Post-Conditions
        Pass/Fail Criteria
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Show_supported_codecs_and_containers'</step>
      </case>

      <case name="FUTE-Multimedia_Listen_recorded_stereo_2channel_48KHZ_256kbs_vorbis" subfeature="Record" timeout="120" description=
        "Purpose
        Test basic recording functionality of the device and playing it back
        Method
        Test case uses qt-mobility multimedia API
        Pre-/Post-Conditions
        Audio is saved to '/home/meego' so that directory should exists
        Pass/Fail Criteria
        Is able to create audio files with >0 size and play it back with no MediaPLayer error
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Listen_recorded_stereo_2channel_48KHZ_256kbs_vorbis'</step>
      </case>

      <case name="FUTE-Multimedia_Listen_recorded_mono_1channel_48KHz_128kbs_PCM" subfeature="Record" timeout="120" description=
        "Purpose
        Test basic recording functionality of the device and playing it back
        Method
        Test case uses qt-mobility multimedia API
        Pre-/Post-Conditions
        Audio is saved to '/home/meego' so that directory should exists
        Pass/Fail Criteria
        Is able to create audio files with >0 size and play it back with no MediaPLayer error
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Listen_recorded_mono_1channel_48KHz_128kbs_PCM'</step>
      </case>

      <case name="FUTE-Multimedia_Listen_audio_stereo_2channel_44.1KHZ_128kbs_vorbis_ogg" subfeature="Playback" timeout="120" description=
        "Purpose
        Test basic playback functionality on device
        Method
        Test case uses qt-mobility multimedia API
        Pre-/Post-Conditions
        Audio file to play should exists in given path, check path and file name in test case script.
        Pass/Fail Criteria
        Is able to play given audio file with no error.
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Listen_audio_stereo_2channel_44.1KHZ_128kbs_vorbis_ogg'</step>
      </case>

      <case name="FUTE-Multimedia_Listen_audio_mono_1channel_8KHZ_128kbs_PCM_wav" subfeature="Playback" timeout="120" description=
        "Purpose
        Test basic playback functionality on device
        Method
        Test case uses qt-mobility multimedia API
        Pre-/Post-Conditions
        Audio file to play should exists in given path, check path and file name in test case script.
        Pass/Fail Criteria
        Is able to play given audio file with no error.
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE-Multimedia_Listen_audio_mono_1channel_8KHZ_128kbs_PCM_wav'</step>
      </case>
    </set>
  </suite>

  <suite name="mwts-multimedia-imageviewer-tests" domain="Visual">
    <!--This set contains test cases from mwts-multimedia-imageviewer*.cfg-->   
    <set name="Imageviewing_Reliability" description="Image viewing reliability tests" feature="Still Viewing" type="Iterative" >
      <case name="NFT-Imageviewing-Show_1MB_JPG_image-ITER" subfeature="Show" description=
            "Purpose
            Test reading data from memory, using image decoder by standard QT, display image.
            Method
            Open image to display multiple times. Memory management is logged.
            Pre-/Post-conditions
            Image file available in device at /home/user/MyDocs/testdata/Image/JPEG/
            Pass/Fail Criteria
            Image is shown in screen. Testcase does not crash. Memory is managed properly.
            References
            Required test data (JPEG files)
            " timeout="360">
            <step>min -c -t 'NFT-Imageviewing-Show_1MB_JPG_image-ITER'</step>
      </case>
      <case name="NFT-Imageviewing-Show_various_size_JPG_images-ITER" subfeature="Show" description=
            "Purpose
            Test reading data from memory, using image decoder by standard QT, display image.
            Method
            Open image to display multiple times. Memory management is logged.
            Pre-/Post-conditions
            Image files available in device at /home/user/MyDocs/testdata/Image/JPEG/
            Pass/Fail Criteria
            Image is shown in screen. Testcase does not crash. Memory is managed properly.
            References
            Required test data (JPEG files)
            " timeout="120">
            <step>min -c -t 'NFT-Imageviewing-Show_various_size_JPG_images-ITER'</step>
      </case>
      <case name="NFT-Imageviewing-Show_various_size_BMP_images-ITER" subfeature="Show" description=
            "Purpose
            Test reading data from memory, using image decoder by standard QT, display image.
            Method
            Open image to display multiple times. Memory management is logged.
            Pre-/Post-conditions
            Image files available in device at /home/user/MyDocs/testdata/Image/BMP/
            Pass/Fail Criteria
            Image is shown in screen. Testcase does not crash. Memory is managed properly.
            References
            Required test data (BMP files)
            " timeout="360">
            <step>min -c -t 'NFT-Imageviewing-Show_various_size_BMP_images-ITER'</step>
      </case>
      <case name="NFT-Imageviewing-Show_various_size_PNG_images-ITER" subfeature="Show" description=
            "Purpose
            Test reading data from memory, using image decoder by standard QT, display image.
            Method
            Open image to display multiple times. Memory management is logged.
            Pre-/Post-conditions
            Image files available in device at /home/user/MyDocs/testdata/Image/PNG/
            Pass/Fail Criteria
            Image is shown in screen. Testcase does not crash. Memory is managed properly.
            References
            Required test data (PNG files)
            " timeout="360">
            <step>min -c -t 'NFT-Imageviewing-Show_various_size_PNG_images-ITER'</step>
      </case>
    </set>
    <set name="Functional test" description="Multimedia image viewining functionality tests" feature="Still Viewing" type="Functional" >
      <case name="FUTE-Imageviewing-Open_1MB_JPG_image" subfeature="Show" description=
            "Purpose
            Test opening and viewing still image(s).
            Method
            Test case uses qt-mobility multimedia API
            Pre-/Post-conditions
            Image file(s) available in device at /home/user/MyDocs/testdata/Image/JPEG/
            Pass/Fail Criteria
            Image is shown in screen. Testcase does not crash.
            References
            Required test data (JPEG files)">
            <step>min -c -t 'FUTE-Imageviewing-Open_1MB_JPG_image'</step>
      </case>

    </set>
  </suite>

  <suite name="mwts-multimedia-fmradio-tests" domain="System">
    <!--This set contains test cases from mwts-multimedia-fmradio.cfg-->
    <set name="Functional test" description="Multimedia fm radio functionality tests" feature="Settings" type="Functional" >
      <case name="FUTE_Multimedia_FMRadio_Tune_on_active_frequency" subfeature="" timeout="120" description=
        "Purpose
        Test turning on active frequency
        Method
        Test case uses qt-mobility mobility API. RadioTuner class is used to play radio.
        Pre-/Post-Conditions
        Pass/Fail Criteria
        Is able to listen radio at a certain frequency
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE_Multimedia_FMRadio_Tune_on_active_frequency'</step>
      </case>

      <case name="FUTE_Multimedia_FMRadio_Scan_frequency" subfeature="" timeout="120" description=
        "Purpose
        Test scaning frequency
        Method
        Test case uses qt-mobility mobility API. RadioTuner class is used to search backward from current frequency and play radio.
        Pre-/Post-Conditions
        There should be active freqency below set one.
        Pass/Fail Criteria
        Is able to scan down or up and then play a radio.
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'FUTE_Multimedia_FMRadio_Scan_frequency'</step>
      </case>
    </set>

    <!--This set contains test cases from mwts-multimedia-fmradio-nft.cfg-->
    <set name="Non functional test" description="Multimedia fm radio non functional tests" feature="Settings" type=" Non Functional" >
      <case name="NFT-FMRadio_Scan_frequency-LATE" subfeature="" timeout="120" description=
        "Purpose
        Test measure how long FM Radio scan takes to scan all radio stations.
        Method
        Test case uses qt-mobility mobility API. RadioTuner class is used to scan FM band.
        Pre-/Post-Conditions
        Radio device should be available.
        Pass/Fail Criteria
        Is able to to scan FM band, log founded station and measure scan time (latency).
        Test case result can be found from /var/log/tests
        ">
        <step>min -c -t 'NFT-FMRadio_Scan_frequency-LATE'</step>
      </case>
    </set>
  </suite>
</testdefinition>
