# Parameter configuration for blts-wlan-core
# This configuration should work with most hardware, but access point SSIDs and
# encryption keys need to be changed to match the test environment.

# Some programs (connman, wpa_supplicant) and the test asset use similar methods of
# accessing the WLAN adapter. Consequently, many tests will fail due to
# conflicting commands from the test cases and other device users. To
# prevent this 'stopped_processes' parameter can be defined. After testing is done these 
# stopped processes can be restarted by defining 'restarted_processes' parameter.
# These parameters can also be empty if e.g "killall connmand" and "killall wpa_supplicant" 
# commands are executed manually before testing. The format for these semicolon separated
# parameters is the following: "program1 p1;program2 p1 p2"
# NOTE: Some restrictions: max process and parameter count is 10 and whole process name 
# to stop/restart must be less than 255 characters

[globals]
	stopped_processes "/usr/sbin/connmand;/sbin/wpa_supplicant"
    restarted_processes "/usr/sbin/connmand -W nl80211,wext;/sbin/wpa_supplicant -u"
[end_globals]

# expected phys for HW. (space separated) e.g. "phy0 phy1 phy2"
[parameter]
	name expected_phys
	const "phy0"
[end_parameter]

# Valid wlan devices for HW.
[parameter]
	name wlan_device
	const "wlan0"
[end_parameter]

# SSID for an existing open AP (change this to match your environment)
[parameter]
	name open_ssid
	const "test-open"
[end_parameter]

# SSID for an existing WEP-encrypted AP (change this to match your environment)
[parameter]
	name wep_ssid
	const "test-WEP"
[end_parameter]

# SSID for an existing WPA-encrypted AP (change this to match your environment)
[parameter]
	name wpa_ssid
	const "test-WPA"
[end_parameter]

# SSID for an existing open adhoc network (change this to match your environment)
#
# NOTE: use here value from adhoc_ssid2 parameter if "Core-WLAN-Disconnect from adhoc network"
# test case is executed against "Core-WLAN-Establish new adhoc network" test case
[parameter]
	name adhoc_ssid
	const "exist-adhoc"
[end_parameter]

# SSID for established open adhoc network (adhoc network created during test runs)
[parameter]
	name adhoc_ssid2
	const "estab-adhoc"
[end_parameter]

# Channel for an established open adhoc network (adhoc network created during test runs)
[parameter]
	name adhoc_channel
	const 1
[end_parameter]

# WEP keys - wep key format "i:t:key", space separated
# i = index (0 - 3)
# t = type (a: = ASCII wep key / h: HEX wep key)
# e.g.
# first 0 index ascii wep key abcdef ->  0:a:abcdef
[parameter]
	name wep_keys
	const "0:a:abcde"	"0:h:1234567890"
[end_parameter]

# WEP key index (0 - 3) - default key to transmit
[parameter]
	name wep_tx_keyidx
	const 0
[end_parameter]

# Passphrase for WPA2-PSK test
[parameter]
	name wpa_passphrase
	const "abcdefgh"
[end_parameter]


# Tests

[test]
	name "Core-WLAN-Enumerate hardware"
	params expected_phys
[end_test]

[test]
	name "Core-WLAN-Enumerate supported features"
	params wlan_device
[end_test]

[test]
	name "Core-WLAN-Scan for specific AP"
	params wlan_device open_ssid
[end_test]

[test]
	name "Core-WLAN-Associate with open AP"
	params wlan_device open_ssid
[end_test]

[test]
	name "Core-WLAN-Associate with WEP encryption"
	params wlan_device wep_ssid wep_keys wep_tx_keyidx
[end_test]

[test]
	name "Core-WLAN-Scan and associate on max power save"
	params wlan_device open_ssid
[end_test]

[test]
	name "Core-WLAN-Disconnect with deauthenticate"
	params wlan_device open_ssid
[end_test]

[test]
	name "Core-WLAN-Disconnect with disassociate"
	params wlan_device open_ssid
[end_test]

[test]
	name "Core-WLAN-Disconnect with AP loss"
	params wlan_device open_ssid
[end_test]

[test]
	name "Core-WLAN-Disconnect from adhoc network"
	params wlan_device adhoc_ssid
[end_test]

[test]
	name "Core-WLAN-Associate with WPA2-PSK AP"
	params wlan_device wpa_ssid wpa_passphrase
[end_test]

[test]
	name "Core-WLAN-Establish new adhoc network"
	params wlan_device adhoc_ssid2 adhoc_channel
[end_test]

[test]
	name "Core-WLAN-Join established adhoc network"
	params wlan_device adhoc_ssid2
[end_test]
