/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_DBus_Introspectable_introspect (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Introspect", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_DBus_Introspectable_introspect_reply) (DBusGProxy *proxy, char * OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_DBus_Introspectable_introspect_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_DBus_Introspectable_introspect_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_DBus_Introspectable_introspect_async (DBusGProxy *proxy, org_freedesktop_DBus_Introspectable_introspect_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Introspect", org_freedesktop_DBus_Introspectable_introspect_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_SimManager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_SimManager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_SimManager_get_properties (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_SimManager_get_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_SimManager_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_SimManager_get_properties_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_SimManager_get_properties_async (DBusGProxy *proxy, org_ofono_SimManager_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_ofono_SimManager_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_SimManager_set_property (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetProperty", error, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_SimManager_set_property_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_SimManager_set_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_SimManager_set_property_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_SimManager_set_property_async (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, org_ofono_SimManager_set_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetProperty", org_ofono_SimManager_set_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_SimManager_change_pin (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, const char * IN_arg2, GError **error)

{
  return dbus_g_proxy_call (proxy, "ChangePin", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_STRING, IN_arg2, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_SimManager_change_pin_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_SimManager_change_pin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_SimManager_change_pin_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_SimManager_change_pin_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, const char * IN_arg2, org_ofono_SimManager_change_pin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ChangePin", org_ofono_SimManager_change_pin_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_STRING, IN_arg2, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_SimManager_enter_pin (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "EnterPin", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_SimManager_enter_pin_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_SimManager_enter_pin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_SimManager_enter_pin_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_SimManager_enter_pin_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, org_ofono_SimManager_enter_pin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "EnterPin", org_ofono_SimManager_enter_pin_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_SimManager_reset_pin (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, const char * IN_arg2, GError **error)

{
  return dbus_g_proxy_call (proxy, "ResetPin", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_STRING, IN_arg2, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_SimManager_reset_pin_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_SimManager_reset_pin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_SimManager_reset_pin_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_SimManager_reset_pin_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, const char * IN_arg2, org_ofono_SimManager_reset_pin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ResetPin", org_ofono_SimManager_reset_pin_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_STRING, IN_arg2, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_SimManager_lock_pin (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "LockPin", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_SimManager_lock_pin_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_SimManager_lock_pin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_SimManager_lock_pin_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_SimManager_lock_pin_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, org_ofono_SimManager_lock_pin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "LockPin", org_ofono_SimManager_lock_pin_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_SimManager_unlock_pin (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "UnlockPin", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_SimManager_unlock_pin_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_SimManager_unlock_pin_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_SimManager_unlock_pin_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_SimManager_unlock_pin_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, org_ofono_SimManager_unlock_pin_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "UnlockPin", org_ofono_SimManager_unlock_pin_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_SimManager */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_VoiceCallManager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_VoiceCallManager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_get_properties (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_get_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_get_properties_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_get_properties_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_ofono_VoiceCallManager_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_dial (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, char** OUT_arg2, GError **error)

{
  return dbus_g_proxy_call (proxy, "Dial", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_arg2, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_dial_reply) (DBusGProxy *proxy, char *OUT_arg2, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_dial_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_arg2;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_arg2, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_dial_reply)data->cb) (proxy, OUT_arg2, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_dial_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, org_ofono_VoiceCallManager_dial_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Dial", org_ofono_VoiceCallManager_dial_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_transfer (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Transfer", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_transfer_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_transfer_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_transfer_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_transfer_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_transfer_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Transfer", org_ofono_VoiceCallManager_transfer_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_swap_calls (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "SwapCalls", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_swap_calls_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_swap_calls_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_swap_calls_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_swap_calls_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_swap_calls_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SwapCalls", org_ofono_VoiceCallManager_swap_calls_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_release_and_answer (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "ReleaseAndAnswer", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_release_and_answer_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_release_and_answer_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_release_and_answer_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_release_and_answer_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_release_and_answer_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ReleaseAndAnswer", org_ofono_VoiceCallManager_release_and_answer_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_hold_and_answer (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "HoldAndAnswer", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_hold_and_answer_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_hold_and_answer_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_hold_and_answer_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_hold_and_answer_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_hold_and_answer_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "HoldAndAnswer", org_ofono_VoiceCallManager_hold_and_answer_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_hangup_all (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "HangupAll", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_hangup_all_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_hangup_all_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_hangup_all_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_hangup_all_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_hangup_all_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "HangupAll", org_ofono_VoiceCallManager_hangup_all_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_private_chat (DBusGProxy *proxy, const char* IN_arg0, GPtrArray** OUT_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "PrivateChat", error, DBUS_TYPE_G_OBJECT_PATH, IN_arg0, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), OUT_arg1, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_private_chat_reply) (DBusGProxy *proxy, GPtrArray *OUT_arg1, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_private_chat_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_arg1;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), &OUT_arg1, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_private_chat_reply)data->cb) (proxy, OUT_arg1, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_private_chat_async (DBusGProxy *proxy, const char* IN_arg0, org_ofono_VoiceCallManager_private_chat_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PrivateChat", org_ofono_VoiceCallManager_private_chat_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_create_multiparty (DBusGProxy *proxy, GPtrArray** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "CreateMultiparty", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_create_multiparty_reply) (DBusGProxy *proxy, GPtrArray *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_create_multiparty_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_create_multiparty_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_create_multiparty_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_create_multiparty_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CreateMultiparty", org_ofono_VoiceCallManager_create_multiparty_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_hangup_multiparty (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "HangupMultiparty", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_hangup_multiparty_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_hangup_multiparty_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_hangup_multiparty_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_hangup_multiparty_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_hangup_multiparty_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "HangupMultiparty", org_ofono_VoiceCallManager_hangup_multiparty_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_send_tones (DBusGProxy *proxy, const char * IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "SendTones", error, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_send_tones_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_send_tones_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_send_tones_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_send_tones_async (DBusGProxy *proxy, const char * IN_arg0, org_ofono_VoiceCallManager_send_tones_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SendTones", org_ofono_VoiceCallManager_send_tones_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_VoiceCallManager_get_calls (DBusGProxy *proxy, GPtrArray** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCalls", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_VoiceCallManager_get_calls_reply) (DBusGProxy *proxy, GPtrArray *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_VoiceCallManager_get_calls_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_VoiceCallManager_get_calls_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_VoiceCallManager_get_calls_async (DBusGProxy *proxy, org_ofono_VoiceCallManager_get_calls_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCalls", org_ofono_VoiceCallManager_get_calls_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_VoiceCallManager */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_MessageManager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_MessageManager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_MessageManager_get_properties (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_MessageManager_get_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_MessageManager_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_MessageManager_get_properties_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_MessageManager_get_properties_async (DBusGProxy *proxy, org_ofono_MessageManager_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_ofono_MessageManager_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_MessageManager_set_property (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetProperty", error, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_MessageManager_set_property_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_MessageManager_set_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_MessageManager_set_property_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_MessageManager_set_property_async (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, org_ofono_MessageManager_set_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetProperty", org_ofono_MessageManager_set_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_MessageManager_send_message (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, char** OUT_arg2, GError **error)

{
  return dbus_g_proxy_call (proxy, "SendMessage", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_arg2, G_TYPE_INVALID);
}

typedef void (*org_ofono_MessageManager_send_message_reply) (DBusGProxy *proxy, char *OUT_arg2, GError *error, gpointer userdata);

static void
org_ofono_MessageManager_send_message_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_arg2;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_arg2, G_TYPE_INVALID);
  (*(org_ofono_MessageManager_send_message_reply)data->cb) (proxy, OUT_arg2, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_MessageManager_send_message_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, org_ofono_MessageManager_send_message_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SendMessage", org_ofono_MessageManager_send_message_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_MessageManager_get_messages (DBusGProxy *proxy, GPtrArray** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetMessages", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_MessageManager_get_messages_reply) (DBusGProxy *proxy, GPtrArray *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_MessageManager_get_messages_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_MessageManager_get_messages_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_MessageManager_get_messages_async (DBusGProxy *proxy, org_ofono_MessageManager_get_messages_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetMessages", org_ofono_MessageManager_get_messages_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_MessageManager */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_Phonebook
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_Phonebook

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_Phonebook_import (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Import", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_Phonebook_import_reply) (DBusGProxy *proxy, char * OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_Phonebook_import_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_Phonebook_import_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_Phonebook_import_async (DBusGProxy *proxy, org_ofono_Phonebook_import_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Import", org_ofono_Phonebook_import_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_Phonebook */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_NetworkRegistration
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_NetworkRegistration

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_NetworkRegistration_get_properties (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_NetworkRegistration_get_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_NetworkRegistration_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_NetworkRegistration_get_properties_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_NetworkRegistration_get_properties_async (DBusGProxy *proxy, org_ofono_NetworkRegistration_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_ofono_NetworkRegistration_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_NetworkRegistration_register (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Register", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_NetworkRegistration_register_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_NetworkRegistration_register_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_NetworkRegistration_register_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_NetworkRegistration_register_async (DBusGProxy *proxy, org_ofono_NetworkRegistration_register_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Register", org_ofono_NetworkRegistration_register_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_NetworkRegistration_deregister (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Deregister", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_NetworkRegistration_deregister_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_NetworkRegistration_deregister_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_NetworkRegistration_deregister_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_NetworkRegistration_deregister_async (DBusGProxy *proxy, org_ofono_NetworkRegistration_deregister_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Deregister", org_ofono_NetworkRegistration_deregister_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_NetworkRegistration_get_operators (DBusGProxy *proxy, GPtrArray** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetOperators", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_NetworkRegistration_get_operators_reply) (DBusGProxy *proxy, GPtrArray *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_NetworkRegistration_get_operators_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_NetworkRegistration_get_operators_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_NetworkRegistration_get_operators_async (DBusGProxy *proxy, org_ofono_NetworkRegistration_get_operators_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetOperators", org_ofono_NetworkRegistration_get_operators_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_NetworkRegistration_scan (DBusGProxy *proxy, GPtrArray** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Scan", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_NetworkRegistration_scan_reply) (DBusGProxy *proxy, GPtrArray *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_NetworkRegistration_scan_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_NetworkRegistration_scan_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_NetworkRegistration_scan_async (DBusGProxy *proxy, org_ofono_NetworkRegistration_scan_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Scan", org_ofono_NetworkRegistration_scan_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_NetworkRegistration */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallForwarding
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallForwarding

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallForwarding_get_properties (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallForwarding_get_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_CallForwarding_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_CallForwarding_get_properties_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallForwarding_get_properties_async (DBusGProxy *proxy, org_ofono_CallForwarding_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_ofono_CallForwarding_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallForwarding_set_property (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetProperty", error, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallForwarding_set_property_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallForwarding_set_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallForwarding_set_property_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallForwarding_set_property_async (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, org_ofono_CallForwarding_set_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetProperty", org_ofono_CallForwarding_set_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallForwarding_disable_all (DBusGProxy *proxy, const char * IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "DisableAll", error, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallForwarding_disable_all_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallForwarding_disable_all_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallForwarding_disable_all_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallForwarding_disable_all_async (DBusGProxy *proxy, const char * IN_arg0, org_ofono_CallForwarding_disable_all_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DisableAll", org_ofono_CallForwarding_disable_all_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallForwarding */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallSettings
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallSettings

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallSettings_get_properties (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallSettings_get_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_CallSettings_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_CallSettings_get_properties_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallSettings_get_properties_async (DBusGProxy *proxy, org_ofono_CallSettings_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_ofono_CallSettings_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallSettings_set_property (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetProperty", error, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallSettings_set_property_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallSettings_set_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallSettings_set_property_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallSettings_set_property_async (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, org_ofono_CallSettings_set_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetProperty", org_ofono_CallSettings_set_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallSettings */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallBarring
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallBarring

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallBarring_get_properties (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProperties", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallBarring_get_properties_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_CallBarring_get_properties_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_CallBarring_get_properties_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallBarring_get_properties_async (DBusGProxy *proxy, org_ofono_CallBarring_get_properties_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProperties", org_ofono_CallBarring_get_properties_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallBarring_set_property (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, const char * IN_arg2, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetProperty", error, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_STRING, IN_arg2, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallBarring_set_property_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallBarring_set_property_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallBarring_set_property_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallBarring_set_property_async (DBusGProxy *proxy, const char * IN_arg0, const GValue* IN_arg1, const char * IN_arg2, org_ofono_CallBarring_set_property_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetProperty", org_ofono_CallBarring_set_property_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_VALUE, IN_arg1, G_TYPE_STRING, IN_arg2, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallBarring_disable_all (DBusGProxy *proxy, const char * IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "DisableAll", error, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallBarring_disable_all_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallBarring_disable_all_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallBarring_disable_all_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallBarring_disable_all_async (DBusGProxy *proxy, const char * IN_arg0, org_ofono_CallBarring_disable_all_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DisableAll", org_ofono_CallBarring_disable_all_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallBarring_disable_all_incoming (DBusGProxy *proxy, const char * IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "DisableAllIncoming", error, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallBarring_disable_all_incoming_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallBarring_disable_all_incoming_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallBarring_disable_all_incoming_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallBarring_disable_all_incoming_async (DBusGProxy *proxy, const char * IN_arg0, org_ofono_CallBarring_disable_all_incoming_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DisableAllIncoming", org_ofono_CallBarring_disable_all_incoming_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallBarring_disable_all_outgoing (DBusGProxy *proxy, const char * IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "DisableAllOutgoing", error, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallBarring_disable_all_outgoing_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallBarring_disable_all_outgoing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallBarring_disable_all_outgoing_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallBarring_disable_all_outgoing_async (DBusGProxy *proxy, const char * IN_arg0, org_ofono_CallBarring_disable_all_outgoing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DisableAllOutgoing", org_ofono_CallBarring_disable_all_outgoing_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_CallBarring_change_password (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "ChangePassword", error, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_ofono_CallBarring_change_password_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_ofono_CallBarring_change_password_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_ofono_CallBarring_change_password_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_CallBarring_change_password_async (DBusGProxy *proxy, const char * IN_arg0, const char * IN_arg1, org_ofono_CallBarring_change_password_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ChangePassword", org_ofono_CallBarring_change_password_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_arg0, G_TYPE_STRING, IN_arg1, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_CallBarring */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_Manager
#define DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_Manager

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_ofono_Manager_get_modems (DBusGProxy *proxy, GPtrArray** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetModems", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_ofono_Manager_get_modems_reply) (DBusGProxy *proxy, GPtrArray *OUT_arg0, GError *error, gpointer userdata);

static void
org_ofono_Manager_get_modems_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", dbus_g_type_get_struct ("GValueArray", DBUS_TYPE_G_OBJECT_PATH, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), G_TYPE_INVALID)), &OUT_arg0, G_TYPE_INVALID);
  (*(org_ofono_Manager_get_modems_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_ofono_Manager_get_modems_async (DBusGProxy *proxy, org_ofono_Manager_get_modems_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetModems", org_ofono_Manager_get_modems_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_ofono_Manager */

G_END_DECLS
