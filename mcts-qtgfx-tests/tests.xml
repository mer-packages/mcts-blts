<?xml version="1.0" encoding="UTF-8"?>
<testdefinition version="1.0">
<description></description>
<suite name="Graphics" >
<description></description>
<set name="qtgfx" >

<case name="qt_painting_basic" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Basic Drawing example shows how to display basic graphics primitives in a variety of styles using the QPainter class.<br />
QPainter performs low-level painting on widgets and other paint devices. The class can draw everything from simple lines to complex shapes like pies and chords. It can also draw aligned text and pixmaps. Normally, it draws in a &quot;natural&quot; coordinate system, but it can in addition do view and world transformation.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-basicdrawing<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/painting-basicdrawing.html</p>]]></description>

</case>

<case name="qt_painting_SVGViewer" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The SVG Viewer example shows how to add SVG viewing support to applications.<br />
Scalable Vector Graphics (SVG) is an XML-based language for describing two-dimensional vector graphics. Qt provides classes for rendering and displaying SVG drawings in widgets and on other paint devices. This example allows the user to load SVG files and view them in a QGraphicsView using a QGraphicsSvgItem.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-svgviewer<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/painting-svgviewer.html</p>]]></description>

</case>

<case name="qt_painting_SVGenerator" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The SVG Generator example shows how to add SVG file export to applications.<br />
Scalable Vector Graphics (SVG) is an XML-based language for describing two-dimensional vector graphics. Qt provides classes for rendering and generating SVG drawings. This example allows the user to create a simple picture and save it to an SVG file.<br />
<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-svggenerator<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/painting-svggenerator.html</p>]]></description>

</case>

<case name="qt_painting_FontSampler" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Font Sampler example shows how to preview and print multi-page documents.<br />
<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-fontsampler<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/painting-fontsampler.html</p>]]></description>

</case>

<case name="qt_painting_ConcentricCircles" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Concentric Circles example shows the improved rendering quality that can be obtained using floating point precision and anti-aliasing when drawing custom widgets. The example also shows how to do simple animations.<br />
The application's main window displays several widgets which are drawn using the various combinations of precision and anti-aliasing.<br />
<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-concentriccircles<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/painting-concentriccircles.html</p>]]></description>

</case>

<case name="qt_painting_PainterPaths" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Painter Paths example shows how painter paths can be used to build complex shapes for rendering.<br />
The QPainterPath class provides a container for painting operations, enabling graphical shapes to be constructed and reused.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-painterpaths<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/painting-painterpaths.html</p>]]></description>

</case>

<case name="qt_painting_Transformations" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Transformations example shows how transformations influence the way that QPainter renders graphics primitives. In particular it shows how the order of transformations affect the result.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-transformations<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/painting-transformations.html</p>]]></description>

</case>

<case name="qt_painting_ImageComposition" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Image Composition example lets the user combine images together using any composition mode supported by QPainter, described in detail in Composition Modes.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: painting-imagecomposition<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/painting-imagecomposition.html</p>]]></description>

</case>

<case name="qt_ogl_textures" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>The Textures example demonstrates the use of Qt's image classes as textures in applications that use both OpenGL and Qt to display graphics.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: opengl-textures<br>&nbsp;<br />Pass/Fail Criteria:<br />http://doc.qt.nokia.com/4.6/opengl-textures.html]]></description>

</case>

<case name="qt_ogl_pb2" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>The Pixel Buffers 2 example demonstrates how to use the QGLPixelBuffer class to render into an off-screen buffer and use the contents as a dynamic texture in a QGLWidget.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: opengl-pbuffers2<br>&nbsp;<br />Pass/Fail Criteria:<br /><br>http://doc.qt.nokia.com/4.6/opengl-pbuffers2.html]]></description>

</case>

<case name="qt_ogl_pb" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>The Pixel Buffers example demonstrates how to use the QGLPixelBuffer class to render into an off-screen buffer and use the contents as a dynamic texture in a QGLWidget.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: opengl-pbuffers<br>&nbsp;<br />Pass/Fail Criteria:<br />http://doc.qt.nokia.com/4.6/opengl-pbuffers.html]]></description>

</case>

<case name="qt_ogl_Overpainting" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>The Overpainting example shows how QPainter can be used to overpaint a scene rendered using OpenGL in a QGLWidget.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: opengl-overpainting<br>&nbsp;<br />Pass/Fail Criteria:<br /><br>http://doc.qt.nokia.com/4.6/opengl-overpainting.html]]></description>

</case>

<case name="qt_ogl_hello" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>The Hello GL example demonstrates the basic use of the OpenGL-related classes provided with Qt.<br>Qt provides the QGLWidget class to enable OpenGL graphics to be rendered within a standard application user interface. By subclassing this class, and providing reimplementations of event handler functions, 3D scenes can be displayed on widgets that can be placed in layouts, connected to other objects using signals and slots, and manipulated like any other widget.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: opengl-hellogl<br>&nbsp;<br />Pass/Fail Criteria:<br />http://doc.qt.nokia.com/4.6/opengl-hellogl.html]]></description>

</case>

<case name="qt_ogl_Grabber" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>The Grabber examples shows how to retrieve the contents of an OpenGL framebuffer.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: opengl-grabber<br>&nbsp;<br />Pass/Fail Criteria:<br />http://doc.qt.nokia.com/4.6/opengl-grabber.html]]></description>

</case>

<case name="qt_ogl_fbo" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The Framebuffer Object example demonstrates how to use the QGLFramebufferObject class to render into an off-screen buffer and use the contents as a texture in a QGLWidget.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: opengl-framebufferobject<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/opengl-framebufferobject.html</p>]]></description>

</case>

<case name="qt_ogl_fbo2" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>The Framebuffer Object 2 example demonstrates how to use the QGLFramebufferObject class to render into an off-screen buffer and use the contents as a texture in a QGLWidget.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: opengl-framebufferobject2<br>&nbsp;<br />Pass/Fail Criteria:<br /><br>http://doc.qt.nokia.com/4.6/opengl-framebufferobject2.html]]></description>

</case>

<case name="qt_ogl_sb" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Sample Buffers example demonstrates how to use and enable sample buffers in a QGLWidget.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: opengl-samplebuffers<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/opengl-samplebuffers.html</p>]]></description>

</case>

<case name="qt_ogl_2DPainting" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The 2D Painting example shows how QPainter and QGLWidget can be used together to display accelerated 2D graphics on supported hardware.<br />
The QPainter class is used to draw 2D graphics primitives onto paint devices provided by QPaintDevice subclasses, such as QWidget and QImage.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: opengl-2dpainting<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/opengl-2dpainting.html</p>]]></description>

</case>

<case name="qt_gfxview_DiagramScene" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
This example shows use of Qt's graphics framework.<br />
The Diagram Scene example is an application in which you can create a flowchart diagram. It is possible to add flowchart shapes and text and connect the shapes by arrows as shown in the image above. The shapes, arrows, and text can be given different colors, and it is possible to change the font, style, and underline of the text.</p>
<p><br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: graphicsview-diagramscene<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/graphicsview-diagramscene.html</p>]]></description>

</case>

<case name="qt_gfxview_PortedCanvas" manual="true" timeout="90">
	<description><![CDATA[Purpose:<br /><br>This GraphicsView example is a port of the old QCanvas example from Qt 3.<br><br />Run Instructions:<br />yum install qtdemos<br>run sample: graphicsview-portedcanvas<br>&nbsp;<br />Pass/Fail Criteria:<br />http://doc.qt.nokia.com/4.6/graphicsview-portedcanvas.html]]></description>

</case>

<case name="qt_gfxview_DragDrop" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
This GraphicsView example shows how to implement drag and drop in a QGraphicsItem subclass, as well as how to animate items using QGraphicsItemAnimation and QTimeLine.&nbsp;</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: graphicsview-dragdroprobot<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/graphicsview-dragdroprobot.html</p>]]></description>

</case>

<case name="qt_gfxview_ElasticNodes" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
This GraphicsView example shows how to implement edges between nodes in a graph&nbsp;</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: graphicsview-elasticnodes<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/graphicsview-elasticnodes.html</p>]]></description>

</case>

<case name="qt_gfxview_PadNavigator" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Pad Navigator Example shows how you can use Graphics View together with embedded widgets to create a simple but useful dynamic user interface for embedded devices.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: qtjambi-padnavigator<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.trolltech.com/qtjambi-4.5.2_01/com/trolltech/qt/qtjambi-padnavigator.html</p>]]></description>

</case>

<case name="qt_gfxview_CollidingMice" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Colliding Mice example shows how to use the Graphics View framework to implement animated items and detect collision between items.<br />
Graphics View provides the QGraphicsScene class for managing and interacting with a large number of custom-made 2D graphical items derived from the QGraphicsItem class, and a QGraphicsView widget for visualizing the items, with support for zooming and rotation.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: graphicsview-collidingmice<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/graphicsview-collidingmice.html</p>]]></description>

</case>

<case name="qt_gfxview_PortedAsteroids" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
This GraphicsView example is a port of the Asteroids game, which was based on QCanvas.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: graphicsview-portedasteroids<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/graphicsview-portedasteroids.html</p>]]></description>

</case>

<case name="qt_widget_Calculator" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
<br />
The example shows how to use signals and slots to implement the functionality of a calculator widget, and how to use QGridLayout to place child widgets in a grid<br />
&nbsp;<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-calculator<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-calculator.html</p>]]></description>

</case>

<case name="qt_widget_Calendar" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The Calendar Widget example shows use of QCalendarWidget.<br />
QCalendarWidget displays one calendar month at a time and lets the user select a date. The calendar consists of four components: a navigation bar that lets the user change the month that is displayed, a grid where each cell represents one day in the month, and two headers that display weekday names and week numbers.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-calendarwidget<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-calendarwidget.html</p>]]></description>

</case>

<case name="qt_widget_Character" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Character Map example shows how to create a custom widget that can both display its own content and respond to user input.<br />
<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-charactermap<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-charactermap.html</p>]]></description>

</case>

<case name="qt_widget_Icons" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Icons example shows how QIcon can generate pixmaps reflecting an icon's state, mode and size. These pixmaps are generated from the set of pixmaps made available to the icon, and are used by Qt widgets to show an icon representing a particular action.<br />
<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-icons<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-icons.html<br />
&nbsp;</p>]]></description>

</case>

<case name="qt_widget_Image Viewer" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The example shows how to combine QLabel and QScrollArea to display an image. QLabel is typically used for displaying text, but it can also display an image. QScrollArea provides a scrolling view around another widget. If the child widget exceeds the size of the frame, QScrollArea automatically provides scroll bars.<br />
<br />
Run Instructions:<br />
yum install qtdemos<br />
run widgets-imageviewer<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-imageviewer.html</p>]]></description>

</case>

<case name="qt_widget_LineEdits" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Line Edits example demonstrates the many ways that QLineEdit can be used, and shows the effects of various properties and validators on the input and output supplied by the user.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-lineedits<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-lineedits.html</p>]]></description>

</case>

<case name="qt_widget_GroupBox" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Group Box example shows how to use the different kinds of group boxes in Qt.<br />
Group boxes are container widgets that organize buttons into groups, both logically and on screen. They manage the interactions between the user and the application so that you do not have to enforce simple constraints.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-groupbox<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-groupbox.html</p>]]></description>

</case>

<case name="qt_widget_DigitalClock" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
he Digital Clock example shows how to use QLCDNumber to display a number with LCD-like digits.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-digitalclock<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-digitalclock.html<br />
&nbsp;</p>]]></description>

</case>

<case name="qt_widget_editor" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Code Editor example shows how to create a simple editor that has line numbers and that highlights the current line.<br />
As can be seen from the image, the editor displays the line numbers in an area to the left of the area for editing. The editor will highlight the line containing the cursor.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-codeeditor<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-codeeditor.html</p>]]></description>

</case>

<case name="qt_widget_AnalogClock" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The Analog Clock example shows how to draw the contents of a custom widget.<br />
This example also demonstrates how the transformation and scaling features of QPainter can be used to make drawing custom widgets easier.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-analogclock<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-analogclock.html</p>]]></description>

</case>

<case name="qt_widget_Movie" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Movie example demonstrates how to use QMovie and QLabel to display animations. Now that Qt comes with Phonon (the multimedia framework), QMovie is mostly useful if one wants to play a simple animation without the added complexity of a multimedia framework to install and deploy.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-movie<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-movie.html</p>]]></description>

</case>

<case name="qt_widget_Scribble" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The Scribble example shows how to reimplement some of QWidget's event handlers to receive the events generated for the application's widgets.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-Scribble</p>
<p><br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-scribble.html</p>]]></description>

</case>

<case name="qt_widget_ShapedClock" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The Shaped Clock example shows how to apply a widget mask to a top-level widget to produce a shaped window.</p>
<p>Run Instructions:</p>
<p>yum install qtdemos<br />
run sample: widgets-ShapedClock</p>
<p><br />
<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/widgets-shapedclock.html</p>]]></description>

</case>

<case name="qt_widget_Sliders" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
Qt provides three types of slider-like widgets: QSlider, QScrollBar and QDial. They all inherit most of their functionality from QAbstractSlider, and can in theory replace each other in an application since the differences only concern their look and feel. This example shows what they look like, how they work and how their behavior and appearance can be manipulated through their properties.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-Sliders</p>
<p><br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-sliders.html</p>]]></description>

</case>

<case name="qt_widget_SpinBoxes" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Spin Boxes example shows how to use the many different types of spin boxes available in Qt, from a simple QSpinBox widget to more complex editors like the QDateTimeEdit widget.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-SpinBoxes<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-spinboxes.html</p>]]></description>

</case>

<case name="qt_widget_Styles" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Styles example illustrates how to create custom widget drawing styles using Qt, and demonstrates Qt's predefined styles.<br />
A style in Qt is a subclass of QStyle or of one of its subclasses. Styles perform drawing on behalf of widgets. Qt provides a whole range of predefined styles, either built into the QtGui library or found in plugins. Custom styles are usually created by subclassing one of Qt's existing style and reimplementing a few virtual functions.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-Styles<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-styles.html</p>]]></description>

</case>

<case name="qt_widget_StyleSheet" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Style Sheet Example shows how to use style sheets.</p>
<p>Run Instructions:</p>
<p>yum install qtdemos<br />
run sample: widgets-StyleSheet<br />
<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-stylesheet.html</p>]]></description>

</case>

<case name="qt_widget_Tablet" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
When you use a tablet with Qt applications, QTabletEvents are generated. You need to reimplement the tabletEvent() event handler if you want to handle tablet events. Events are generated when the device used for drawing enters and leaves the proximity of the tablet (i.e., when it is close but not pressed down on it), when a device is pushed down and released from it, and when a device is moved on the tablet.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-Tablet<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-tablet.html</p>]]></description>

</case>

<case name="qt_widget_Tetrix" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Tetrix example is a Qt version of the classic Tetrix game.<br />
The object of the game is to stack pieces dropped from the top of the playing area so that they fill entire rows at the bottom of the playing area.<br />
When a row is filled, all the blocks on that row are removed, the player earns a number of points, and the pieces above are moved down to occupy that row. If more than one row is filled, the blocks on each row are removed, and the player earns extra points.<br />
The Left cursor key moves the current piece one space to the left, the Right cursor key moves it one space to the right, the Up cursor key rotates the piece counter-clockwise by 90 degrees, and the Down cursor key rotates the piece clockwise by 90 degrees.<br />
To avoid waiting for a piece to fall to the bottom of the board, press D to immediately move the piece down by one row, or press the Space key to drop it as close to the bottom of the board as possible.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-Tetrix<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-tetrix.html</p>]]></description>

</case>

<case name="qt_widget_ToolTips" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Tool Tips example shows how to provide static and dynamic tool tips for an application's widgets.<br />
The simplest and most common way to set a widget's tool tip is by calling its QWidget::setToolTip() function (static tool tips). Then the tool tip is shown whenever the cursor points at the widget. We show how to do this with our application's tool buttons. But it is also possible to show different tool tips depending on the cursor's position (dynamic tooltips). This approach uses mouse tracking and event handling to determine what widgets are located under the cursor at any point in time, and displays their tool tips. The tool tips for the shape items in our application are implemented using the latter approach.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-ToolTips<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-tooltips.html</p>]]></description>

</case>

<case name="qt_widget_Wiggly" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Wiggly example shows how to animate a widget using QBasicTimer and timerEvent(). In addition, the example demonstrates how to use QFontMetrics to determine the size of text on screen.<br />
QBasicTimer is a low-level class for timers. Unlike QTimer, QBasicTimer doesn't inherit from QObject; instead of emitting a timeout() signal when a certain amount of time has passed, it sends a QTimerEvent to a QObject of our choice. This makes QBasicTimer a more lightweight alternative to QTimer. Qt's built-in widgets use it internally, and it is provided in Qt's API for highly-optimized applications (e.g., Qt for Embedded Linux applications).</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-Wiggly<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-wiggly.html</p>]]></description>

</case>

<case name="qt_widget_WindowFlags" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Window Flags example shows how to use the window flags available in Qt.<br />
A window flag is either a type or a hint. A type is used to specify various window-system properties for the widget. A widget can only have one type, and the default is Qt::Widget. However, a widget can have zero or more hints. The hints are used to customize the appearance of top-level windows.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-WindowFlags<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/widgets-windowflags.html</p>]]></description>

</case>

<case name="qt_animation_AnimatedTiles" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Animated Tiles example animates items in a graphics scene.<br />
<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: widgets-AnimatedTiles<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
App started and animation works like this:</p>
<p>http://doc.qt.nokia.com/4.6/animation-animatedtiles.html</p>]]></description>

</case>

<case name="qt_animation_appchooser" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Application Chooser example shows how to use the Qt state machine and the animation framework to select between applications.<br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: animation-appchooser<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/animation-appchooser.html</p>]]></description>

</case>

<case name="qt_animation_EasingCurves" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Easing Curves example shows how to use easing curves to control the speed of an animation.</p>
<p><br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: animation-easing<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/animation-easing.html</p>]]></description>

</case>

<case name="qt_animation_MoveBlocks" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
<br />
The Move Blocks example shows how to animate items in a QGraphicsScene using a QStateMachine with a custom transition.<br />
The example animates the blue blocks that you can see in the image above. The animation moves the blocks between four preset positions.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: animation-moveblocks<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
<br />
http://doc.qt.nokia.com/4.6/animation-moveblocks.html</p>]]></description>

</case>

<case name="qt_animation_StateMachine" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
Qt provides a powerful hierarchical finite state machine through the Qt State Machine classes.<br />
These examples demonstrate the fundamental aspects of implementing Statecharts with Qt.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: examples-statemachine<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/examples-statemachine.html</p>]]></description>

</case>

<case name="qt_animation_Stickman" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The Stickman example shows how to animate transitions in a state machine to implement key frame animations.<br />
In this example, we will write a small application which animates the joints in a skeleton and projects a stickman figure on top. The stickman can be either &quot;alive&quot; or &quot;dead&quot;, and when in the &quot;alive&quot; state, he can be performing different actions defined by key frame animations.</p>
<p><br />
Run Instructions:<br />
yum install qtdemos<br />
run sample: animation-stickman<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/animation-stickman.html</p>]]></description>

</case>

<case name="qt_animation_tiles" manual="true" timeout="90">
	<description><![CDATA[<p>Purpose:<br />
The Animated Tiles example animates items in a graphics scene.</p>
<p>Run Instructions:<br />
yum install qtdemos<br />
run sample: animation-animatedtiles<br />
&nbsp;<br />
Pass/Fail Criteria:<br />
http://doc.qt.nokia.com/4.6/animation-animatedtiles.html</p>]]></description>

</case>

</set>
</suite>
</testdefinition>
